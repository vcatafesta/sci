#line 11 "trelato.prg"
_HB_CLASS TRelato ; function TRelato ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TRelato", iif( .F., { }, { @HBObject() } ), @TRelato() ) ) ;
    nScope := 1 ; ( ( nScope ) )
          _HB_MEMBER { RowPrn } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"RowPrn"}, .F. )
          _HB_MEMBER { Pagina } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Pagina"}, .F. )
          _HB_MEMBER { Tamanho } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Tamanho"}, .F. )
          _HB_MEMBER { NomeFirma } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"NomeFirma"}, .F. )
          _HB_MEMBER { Sistema } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Sistema"}, .F. )
          _HB_MEMBER { Titulo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Titulo"}, .F. )
          _HB_MEMBER { Cabecalho } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Cabecalho"}, .F. )
          _HB_MEMBER { Separador } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Separador"}, .F. )
          _HB_MEMBER { Registros } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Registros"}, .F. )

    nScope := 1 ; ( ( nScope ) )
        _HB_MEMBER New() AS CLASS TRelato; oClass:AddMethod( "New", @TRelato_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
          _HB_MEMBER Inicio(); oClass:AddMethod( "Inicio", @TRelato_Inicio(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
          _HB_MEMBER Eject(); oClass:AddMethod( "Eject", @TRelato_Eject(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
          _HB_MEMBER PrintOn(); oClass:AddMethod( "PrintOn", @TRelato_PrintOn(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
          _HB_MEMBER PrintOff(); oClass:AddMethod( "PrintOff", @TRelato_PrintOff(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
          _HB_MEMBER cabec(); oClass:AddMethod( "cabec", @TRelato_Inicio(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TRelato ;

static FUNCTION TRelato_New( ) ; local Self AS CLASS TRelato := QSelf() AS CLASS TRelato
          ::RowPrn      := 0
          ::Pagina      := 0
          ::Tamanho   := 80
          ::NomeFirma := if( XNOMEFIR = NIL, AllTrim(oAmbiente:xFanta), XNOMEFIR )
        ::Sistema   := "Macrosoft NOME DO PROGRAMA"
          ::Titulo      := "TITULO DO RELATORIO"
          ::Cabecalho := "CODIGO DESCRICAO"
          ::Separador := "="
          ::Registros := 0
        return( Self )

static FUNCTION TRelato_Inicio( ) ; local Self AS CLASS TRelato := QSelf() AS CLASS TRelato
        LOCAL nTam := ::Tamanho / 2
        LOCAL Hora := Time()
        LOCAL Data := Dtoc( Date() )
        ::Pagina++

        DevPos( 0, 0) ; QQout( Padc( ::NomeFirma, ::Tamanho ))
        Qout( Padc( ::Sistema, ::Tamanho ))
        Qout( Padc( ::Titulo, ::Tamanho ))
        Qout( Padr( "Pagina : " + StrZero( ::Pagina, 3 ), ( nTam     ) ) + Padl( Data + " - " + Hora, ( nTam  ) ) )
        Qout( Repl( ::Separador, ::Tamanho ))
        Qout( ::Cabecalho )
        Qout( Repl( ::Separador, ::Tamanho ))
      ::RowPrn := 7
      return( Self )

static FUNCTION TRelato_PrintOn( cCodigoControle ) ; local Self AS CLASS TRelato := QSelf() AS CLASS TRelato
    PrintOn()
    if cCodigoControle <> NIL
        Fprint( cCodigoControle)
    endif
   SetPrc(0,0)
    return self

static FUNCTION TRelato_PrintOff( cCodigoControle ) ; local Self AS CLASS TRelato := QSelf() AS CLASS TRelato
    if cCodigoControle <> NIL
        Fprint( cCodigoControle)
    endif
    PrintOff()
    return self

static FUNCTION TRelato_Eject( ) ; local Self AS CLASS TRelato := QSelf() AS CLASS TRelato
    ::RowPrn := 0
   __Eject()
    SetPrc(0,0)
   return self

Function TRelatoNew()

return( TRelato():New())
