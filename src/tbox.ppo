#line 12 "c:\sci\include\rddName.ch"
    EXTERNAL leto
    EXTERNAL DBFNTX
   EXTERNAL DBFCDX


    EXTERNAL DBFFPT
    EXTERNAL SIXCDX
    EXTERNAL DBFNSX
    EXTERNAL HB_MEMIO
#line 5 "tbox.prg"
_HB_CLASS TBox ; function TBox ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TBox", iif( .F., { }, { @HBObject() } ), @TBox() ) ) ;
    nScope := 1 ; ( ( nScope ) )
        _HB_MEMBER { Cima } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Cima"}, .F. )
          _HB_MEMBER { Esquerda } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Esquerda"}, .F. )
          _HB_MEMBER { Baixo } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Baixo"}, .F. )
          _HB_MEMBER { Direita } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Direita"}, .F. )
          _HB_MEMBER { cScreen } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cScreen"}, .F. )
        _HB_MEMBER { Cabecalho } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Cabecalho"}, .F. )
        _HB_MEMBER { Rodape } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Rodape"}, .F. )
          _HB_MEMBER { Cor } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Cor"}, .F. )
          _HB_MEMBER { Frame } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Frame"}, .F. )

    nScope := 1 ; ( ( nScope ) )
        _HB_MEMBER New() AS CLASS TBox; oClass:AddMethod( "New", @TBox_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
        _HB_MEMBER Show(); oClass:AddMethod( "Show", @TBox_Show(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
        _HB_MEMBER Hide(); oClass:AddMethod( "Hide", @TBox_Hide(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
        _HB_MEMBER Up(); oClass:AddMethod( "Up", @TBox_Up(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
        _HB_MEMBER Down(); oClass:AddMethod( "Down", @TBox_Down(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
        _HB_MEMBER Right(); oClass:AddMethod( "Right", @TBox_Right(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
        _HB_MEMBER PageUp(); oClass:AddMethod( "PageUp", @TBox_PageUp(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
        _HB_MEMBER PageDown(); oClass:AddMethod( "PageDown", @TBox_PageDown(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
        _HB_MEMBER Move(); oClass:AddMethod( "Move", @TBox_Move(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
        _HB_MEMBER MoveGet(); oClass:AddMethod( "MoveGet", @TBox_MoveGet(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
        _HB_MEMBER Inkey(); oClass:AddMethod( "Inkey", @TBox_InkeyMBox(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
        _HB_MEMBER Esquerda(); oClass:AddMethod( "Esquerda", @TBox_LeftMBox(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TBox ;

static FUNCTION TBox_New( nCima, nEsquerda, nBaixo, nDireita, cCabecalho, cRodape, lInverterCor ) ; local Self AS CLASS TBox := QSelf() AS CLASS TBox
          ::Cima       := if( nCima      <> NIL, nCima,      10 )
          ::Esquerda  := if( nEsquerda <> NIL, nEsquerda, 10 )
          ::Baixo      := if( nBaixo     <> NIL, nBaixo,      20 )
          ::Direita   := if( nDireita  <> NIL, nDireita,  40 )
          ::Cor          := if( lInverterCor <> NIL, lInverterCor, 31 )
          ::Cabecalho := if( cCabecalho <> NIL, cCabecalho, NIl )
          ::Rodape      := if( cRodape      <> NIL, cRodape,     NIL )
        ::Frame     := ( Chr( 218 ) + Chr( 196 ) + Chr( 191 ) + Chr( 179 ) +  Chr( 217 ) + Chr( 196 ) + Chr( 192 ) + Chr( 179 ) )
        return( Self )

static FUNCTION TBox_Move( oGetList, nCima, nEsquerda, nBaixo, nDireita ) ; local Self AS CLASS TBox := QSelf() AS CLASS TBox
          LOCAL nTam := Len( oGetList )
          LOCAL nDifTopo := nCima        - ::Cima
          LOCAL nDifEsq  := nEsquerda - ::Esquerda
          ::Hide()
        ::Show( nCima, nEsquerda, nBaixo, nDireita )
          if nTam <> 0
              ::MoveGet( oGetList, nTam, nDifTopo, nDifEsq )
          endif
        return( Self )

static FUNCTION TBox_MoveGet( oGetList, nTam, nDifTopo, nDifEsq ) ; local Self AS CLASS TBox := QSelf() AS CLASS TBox
          LOCAL nX
          For nX := 1 To nTam
              oGetList[nX]:Row += nDifTopo
              oGetList[nX]:Col += nDifEsq
          Next
          return Self

static FUNCTION TBox_Hide( nTela ) ; local Self AS CLASS TBox := QSelf() AS CLASS TBox
          ResTela( ::cScreen )
          return Self

static FUNCTION TBox_InkeyMBox( ) ; local Self AS CLASS TBox := QSelf() AS CLASS TBox
          Inkey(0)
          if LastKey() = 397
              ::Up()
          End
          return Self

static FUNCTION TBox_Up( ) ; local Self AS CLASS TBox := QSelf() AS CLASS TBox
          ::Hide()
          ::Cima--
          ::Baixo--
          ::Paint()
          return Self

static FUNCTION TBox_PageUp( ) ; local Self AS CLASS TBox := QSelf() AS CLASS TBox
          ::Hide()
          ::cScreen  := SaveScreen()
          ::Cima      := 0
          ::Baixo     := 4
          ::Paint()
          return Self

static FUNCTION TBox_PageDown( ) ; local Self AS CLASS TBox := QSelf() AS CLASS TBox
          ::Hide()
          ::cScreen  := SaveScreen()
          ::Cima      := 20
          ::Baixo     := 24
          ::Paint()
          return Self

static FUNCTION TBox_Down( ) ; local Self AS CLASS TBox := QSelf() AS CLASS TBox
          ::Hide()
          ::cScreen  := SaveScreen()
          ::Cima++
          ::Baixo++
          ::Paint()
          return Self

static FUNCTION TBox_LeftMBox( ) ; local Self AS CLASS TBox := QSelf() AS CLASS TBox
          ::Hide()
          ::cScreen  := SaveScreen()
          ::Esquerda--
          ::Direita--
          ::Paint()
          return Self

static FUNCTION TBox_Right( ) ; local Self AS CLASS TBox := QSelf() AS CLASS TBox
          ::Hide()
          ::cScreen  := SaveScreen()
          ::Esquerda++
          ::Direita++
          ::Paint()
          return Self

static FUNCTION TBox_Show( nCima, nEsquerda, nBaixo, nDireita, cCabecalho, cRodape, lInverterCor ) ; local Self AS CLASS TBox := QSelf() AS CLASS TBox
    LOCAL cPattern := " "
    LOCAL cCor
    LOCAL pBack
    ::cScreen     := SaveScreen()
    ::Cima         := if( nCima        <> NIL, nCima, ::Cima )
    ::Esquerda    := if( nEsquerda <> NIL, nEsquerda, ::Esquerda )
    ::Baixo        := if( nBaixo      <> NIL, nBaixo, ::Baixo )
    ::Direita    := if( nDireita  <> NIL, nDireita,    ::Direita)
    ::Cor      := if( lInverterCor <> NIL, lInverterCor, ::Cor )
    ::Cabecalho := if( cCabecalho <> NIL, cCabecalho, ::Cabecalho )
    ::Rodape     := if( cRodape     <> NIL, cRodape,      ::Rodape )

   cCor := ::Cor
    DispBegin()
    if ::Direita = 79
        ::Direita := MaxCol()
    endif

   ColorSet( @cCor, @pback )
    MS_Box( ::Cima, ::Esquerda, ::Baixo, ::Direita, Super:Frame + cPattern, ::Cor )
    if ::Cabecalho <> Nil
        aPrint( ::Cima, ::Esquerda+1, "Û", Roloc( ::Cor ), (::Direita-::Esquerda)-1)
        aPrint( ::Cima, ::Esquerda+1, Padc( ::Cabecalho, ( ::Direita-::Esquerda)-1), Roloc( ::Cor ))
    endif
    if ::Rodape <> Nil
        aPrint( ::Baixo, ::Esquerda+1, "Û", Roloc( ::Cor ), (::Direita-::Esquerda)-1)
        aPrint( ::Baixo, ::Esquerda+1, Padc( ::Rodape, ( ::Direita-::Esquerda)-1), Roloc( ::Cor ))
    endif
    cSetColor( SetColor())
    nSetColor( cCor, Roloc( cCor ))
    DispEnd()
    return Self

Function TBoxNew()

   return( TBox():New())
