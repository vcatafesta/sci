#line 12 "c:\sci\include\rddName.ch"
    EXTERNAL leto
    EXTERNAL DBFNTX
   EXTERNAL DBFCDX


    EXTERNAL DBFFPT
    EXTERNAL SIXCDX
    EXTERNAL DBFNSX
    EXTERNAL HB_MEMIO
#line 23 "diretori.prg"
Function Diretorio( nRowTop, nColumnTop, nRowBottom, cColorString, cDefaultPath )

Local lSetScore
MEMVAR GetList
PUBL aFileMan, aFileList
PUBL hScrollBar, nMenuItem, nTagged
PUBL nEl, nRel, lReloadDir, nFileItem

   nMenuItem   := 1
   nTagged     := 0
   nFileItem   := 1
   nEl         := 1
   nRel        := 1
   lReloadDir  := .T.
   aFileMan    := {}
   aFileList   := {}
   aFileMan    := ARRAY( 10 )
   if nRowTop  = NIL
      nRowTop  := 0

   else
      if nRowTop > (MaxRow() - 7)
         nRowTop := MaxRow() - 7

      endif
   endif
   aFileMan[ 1 ] := nRowTop
   if nColumnTop = NIL
      nColumnTop := 0

   else
      if nColumnTop > (MaxCol() - 52)
         nColumnTop := MaxRow() - 52

      endif

   endif
   aFileMan[ 2 ] := nColumnTop

   if nRowBottom = NIL
      nRowBottom := 0

   else
      if nRowBottom > MaxRow()
         nRowBottom := MaxRow()

      endif
   endif
   aFileMan[ 3 ] := nRowBottom
   aFileMan[ 4 ] := nColumnTop + 51

   if cColorString = NIL
      cColorString := SetColor()

   endif
   aFileMan[ 5 ] := cColorString

   if cDefaultPath = NIL
      cDefaultPath := FCURDIR() + "\*.*"
      cDefaultPath := STRTRAN( cDefaultPath, "\\", "\" )

   endif
   aFileMan[ 6 ] := cDefaultPath
   aFileMan[ 8 ] := SetColor( aFileMan[ 5 ] )
   aFileMan[ 10 ] := SELECT()
   lSetScore := LETO_SET( 32, .F. )



   aFileMan[ 9 ] := SaveScreen( aFileMan[ 1    ],  aFileMan[ 2    ],  aFileMan[ 3 ],  aFileMan[ 4 ] )
   CreateScreen()
   GetFiles()





   RestScreen( aFileMan[ 1    ],  aFileMan[ 2    ],  aFileMan[ 3 ],  aFileMan[ 4 ],  aFileMan[ 9 ] )
   SetColor( aFileMan[ 8 ] )
   LETO_SET( 32, lSetScore )
   dbSelectArea( ( aFileMan[ 10 ] ) )
   return( aFileMan[ FM_returnFILE ] )

Static Function GetFiles

   Local lDone       := .F.
   Local nCurrent    := 0
   Local nLastKey    := 0

   while !lDone
      if lReloadDir
         nEl   := 1
         nRel  := 1
         if !LoadFiles()
            ErrorBeep()
            Message( "Erro: Arquivos nao Encontrados!..." )
            InKey( 0 )
            if YesOrNo( "Mudar de path? (S/N)", "S" )
               GetNewPath( aFileMan[ 6 ] )
               if LASTKEY() == 27
                  lDone := .T.

               else
                  LOOP

               endif
            else
               lDone := .T.

            endif
         else
            lReloadDir := .F.

         endif
      endif
      TabUpdate( hScrollBar, nEl, LEN( aFileList ), .T. )




      nCurrent := ACHOICE( aFileMan[ 1 ] + 3,  aFileMan[ 2 ] + 2,  aFileMan[ 3 ] - 3,  aFileMan[ 4 ] - 4,  aFileList, .T., "ProcessKey", nEl, nRel )

      nFileItem := nCurrent
      nLastKey := LASTKEY()

      DO CASE
         CASE UPPER(CHR(nLastKey)) $ "LCRDPO"
            nMenuItem := AT( UPPER(CHR(nLastKey)), "LCRDPO" )
            DisplayMenu()

         CASE nLastKey == 4
            nMenuItem++
            if nMenuItem > 6
               ErrorBeep()
               nMenuItem := 6

            endif
            DisplayMenu()

         CASE nLastKey == 19
            nMenuItem--
            if nMenuItem < 1
               ErrorBeep()
               nMenuItem := 1
            endif
            DisplayMenu()

         CASE nLastKey == 27
            aFileMan[ FM_returnFILE ] := ""
            lDone := .T.

         CASE nLastKey == 13



            aFileMan[ FM_returnFILE ] :=  SUBSTR( aFileMan[ 6 ], 1,  RAT( "\", aFileMan[ 6 ] ) ) +  ltrim(rtrim(SUBSTR( aFileList[ nCurrent ], 1, 12 )))

            DO CASE
               CASE nMenuItem == 6
                  LookAtFile()

               CASE nMenuItem == 2
                  CopyFile()

               CASE nMenuItem == 3
                  RenameFile()

               CASE nMenuItem == 4
                  DeleteFile()

               CASE nMenuItem == 5
                  PrintFile()

               CASE nMenuItem == 1
                  if AT( "<DIR>", aFileList[ nFileItem ] ) = 0
                     lDone := .T.
                  else
                     LookAtFile()
                  endif

            ENDCASE

         CASE nLastKey == 7
            DeleteFile()

         CASE nLastKey == -4
            TagAllFiles()

         CASE nLastKey == -5
            UnTagAllFiles()

         CASE nLastKey == 32
            if AT( "D", SUBSTR( aFileList[ nCurrent ], 43, 6 ) ) == 0
               if SUBSTR( aFileList[ nCurrent ], 14, 1 ) == " "

                  aFileList[ nCurrent ] := STUFF( aFileList[ nCurrent ],  14, 1, CHR( 251 ) )
                  nTagged++
               else

                  aFileList[ nCurrent ] := STUFF( aFileList[ nCurrent ],  14, 1, " " )
                  nTagged--
               endif
            endif

      ENDCASE
   ENDDO

   return NIL

Static Function LoadFiles

   Local aDirectory := {}
   Local nItem := 0
   Local lreturnValue := .T.
   Local nNumberOfItems := 0
   Local cFileString := ""

   Message( "Chamando o Diretorio Corrente..." )

   Scroll( aFileMan[ 1 ] + 3, aFileMan[ 2 ] + 2, aFileMan[ 3 ] - 3, aFileMan[ 4 ] - 4 ) ; SetPos( aFileMan[ 1 ] + 3, aFileMan[ 2 ] + 2 )

   aDirectory := DIRECTORY( aFileMan[ 6 ], "D" )
   nNumberOfItems := if( VALTYPE( aDirectory ) <> "A", 0, LEN( aDirectory ) )
   aFileList := {}
   if nNumberOfItems < 1
      lreturnValue := .F.

   else
      Message( "Sorteando o Diretorio Corrente..." )
      ASORT( aDirectory,,, { | x, y | x[ 1 ] < y[ 1 ] } )
      Message( "Processando o Diretorio Corrente..." )
      FOR nItem := 1 TO nNumberOfItems






         AADD( aFileList, PADR( aDirectory[ nItem, 1 ], 15 ) +  if( SUBSTR( aDirectory[ nItem, 5 ],  1, 1 ) == "D", "   <DIR>",  STR( aDirectory[ nItem, 2 ], 8 ) ) + "  " +  DTOC( aDirectory[ nItem, 3 ] ) + "  " +  SUBSTR( aDirectory[ nItem, 4 ], 1, 5) + "  " +  SUBSTR( aDirectory[ nItem, 5 ], 1, 4 ) + "  " )
      NEXT

   endif
   Message( aFileMan[ 6 ] )
   return( lreturnValue )

Function ProcessKey( nStatus, nElement, nRelative )

   Local nreturnValue := 2
   nEl  := nElement
   nRel := nRelative
   DO CASE
   CASE nStatus == 0
      TabUpdate( hScrollBar, nElement, LEN( aFileList ) )
      Message( aFileMan[ 6 ] )

   CASE nStatus == 1 .OR. nStatus == 2
      ErrorBeep()

   CASE nStatus == 3
      DO CASE
      CASE LASTKEY() == 27
         nreturnValue := 0

      CASE LASTKEY() == 1
         __Keyboard( CHR( 31 ) )
         nreturnValue := 2

      CASE LASTKEY() == 6
         __Keyboard( CHR( 30 ) )
         nreturnValue := 2

      CASE LASTKEY() == 19 .OR. LASTKEY() == 4
         nreturnValue := 1




      CASE UPPER(CHR(LASTKEY())) $  "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 " .OR.  LASTKEY() == 7 .OR. LASTKEY() == 13 .OR.  LASTKEY() == -4 .OR. LASTKEY() == -5

         nreturnValue := 1

      ENDCASE

   ENDCASE

   return (nreturnValue)

Static Function Message( cString )

   Local cOldColor := SetColor( aFileMan[ 5 ] )
   ClearMessage()

   DevPos( aFileMan[ 3 ] - 1, aFileMan[ 2 ] + 2 ) ; DevOut( SUBSTR( cString, 1, (aFileMan[4] - aFileMan[2] - 6 )) )

   SetColor( cOldColor )

   return NIL

Static Function GetNewPath( cPath )

   Local cOldColor := SetColor( aFileMan[ 5 ] )
   ClearMessage()
   cPath := PADR( cPath, 45 )

   SetCursor(1) ; SetPos( aFileMan[ 3 ] - 1, aFileMan[ 2 ] + 2 ) ; AAdd( GetList, _GET_( cPath, "cPath", "@!@S45@K",,))
   ReadModal( GetList, NIL,,,,, ) ; GetList := {} ; ( GetList )

   cPath := LTRIM(ltrim(rtrim(cPath)))

   if RIGHT( cPath, 1 ) == "\"
      cPath += "*.*"
   endif
   if RIGHT( cPath, 1 ) == ":"
      cPath += "\*.*"
   endif

   aFileMan[ 6 ] := cPath

   Message( cPath )

   SetColor( cOldColor )
   return( ltrim(rtrim(cPath)) )

Static Function YesOrNo( cMessage, cDefault )

   Local cOldColor := SetColor( aFileMan[ 5 ] )
   Local lYesOrNo




   SetCursor(1) ; DevPos( aFileMan[ 3 ] - 1, aFileMan[ 2 ] + 2 ) ; DevOut( ltrim(rtrim(SUBSTR( cMessage, 1,  (aFileMan[4] - aFileMan[2] - 8 )))) ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( cDefault, "cDefault", "!",,))
   ReadModal( GetList, NIL,,,,, ) ; GetList := {} ; ( GetList )

   lYesOrNo := if( cDefault == "S", .T., .F. )
   SetColor( cOldColor )

   return (lYesOrNo)

Static Function ClearMessage

   Local cOldColor := SetColor( aFileMan[ 5 ] )

   Scroll( aFileMan[ 3 ] - 1, aFileMan[ 2 ] + 2, aFileMan[ 3 ] - 1, aFileMan[ 4 ] - 4 ) ; SetPos( aFileMan[ 3 ] - 1, aFileMan[ 2 ] + 2 )

   SetColor( cOldColor )

   return NIL

Static Function CreateScreen()

   Local cFrameType  := "ÚÄ¿³ÙÄÀ³"
   Local cBorderType := "Ã´ÂÁ"
   Local nRow        := 0


   Scroll( aFileMan[ 1 ], aFileMan[ 2 ], aFileMan[ 3 ], aFileMan[ 4 ] ) ; SetPos( aFileMan[ 1 ], aFileMan[ 2 ] )

   DispBox( aFileMan[ 1 ], aFileMan[ 2 ], aFileMan[ 3 ], aFileMan[ 4 ], cFrameType )


   DevPos( aFileMan[ 1 ] + 2, aFileMan[ 2 ] ) ; DevOut( SUBSTR( cBorderType, 1, 1 ) )

   DevPos( aFileMan[ 1 ] + 2, aFileMan[ 4 ] ) ; DevOut( SUBSTR( cBorderType, 2, 1 ) )


   DevPos( aFileMan[ 1 ] + 2, aFileMan[ 2 ] + 1 ) ; DevOut( REPLICATE( SUBSTR( cFrameType, 2, 1 ), ( aFileMan[ 4 ] - aFileMan[ 2 ] - 1 )  ) )

   FOR nRow := (aFileMan[ 1 ] + 3) TO (aFileMan[ 3 ] - 1)

      DevPos( nRow, aFileMan[ 4 ] - 2 ) ; DevOut( SUBSTR( cFrameType, 4, 1 ) )
   NEXT

   DevPos( aFileMan[ 1 ] + 2, aFileMan[ 4 ] - 2 ) ; DevOut( SUBSTR( cBorderType, 3, 1 ) )

   DevPos( aFileMan[ 3 ], aFileMan[ 4 ] - 2 ) ; DevOut( SUBSTR( cBorderType, 4, 1 ) )


   DevPos( aFileMan[ 3 ] - 2, aFileMan[ 2 ] ) ; DevOut( SUBSTR( cBorderType, 1, 1 ) )

   DevPos( aFileMan[ 3 ] - 2, aFileMan[ 4 ] -2 ) ; DevOut( SUBSTR( cBorderType, 2, 1 ) )


   DevPos( aFileMan[ 3 ] - 2, aFileMan[ 2 ] + 1 ) ; DevOut( REPLICATE( SUBSTR( cFrameType, 2, 1 ),  ( aFileMan[ 4 ] - aFileMan[ 2 ] - 3 )  ) )




   hScrollBar := TabNew( aFileMan[ 1 ] + 3,  aFileMan[ 4 ] - 1,  aFileMan[ 3 ] - 1,  aFileMan[ 5 ], 1 )
   TabDisplay( hScrollBar )

   DisplayMenu()

   return NIL

Static Function DisplayMenu

   Local cOldColor := SetColor(), nCol := aFileMan[ 2 ] + 2
   Local cItemName


   DevPos( aFileMan[ 1 ] + 1, aFileMan[ 2 ] + 2 ) ; DevOut( "Abrir Copiar Renomear Deletar Imprimir  Tipo" )
   SetColor( "I" )
   DO CASE
   CASE nMenuItem == 1
      nCol := aFileMan[ 2 ] + 2
      cItemName := "Abrir"

   CASE nMenuItem == 2
      nCol := aFileMan[ 2 ] + 8
      cItemName := "Copiar"

   CASE nMenuItem == 3
      nCol := aFileMan[ 2 ] + 15
      cItemName := "Renomear"

   CASE nMenuItem == 4
      nCol := aFileMan[ 2 ] + 24
      cItemName := "Deletar"

   CASE nMenuItem == 5
      nCol := aFileMan[ 2 ] + 32
      cItemName := "Imprimir"

   CASE nMenuItem == 6
      nCol := aFileMan[ 2 ] + 42
      cItemName := "Tipo"

   ENDCASE

   DevPos( aFileMan[ 1 ] + 1, nCol ) ; DevOut( cItemName )
   Message( aFileMan[ 6 ] )

   SetColor( cOldColor )

   return NIL



Static Function TabNew( nTopRow, nTopColumn, nBottomRow,     cColorString, nInitPosition )

   Local aTab := ARRAY( 6 )

   aTab[ 1 ]    := nTopRow
   aTab[ 2 ]    := nTopColumn
   aTab[ 3 ] := nBottomRow
   aTab[ 4 ] := nTopColumn

   if cColorString == NIL
      cColorString := "W/N"
   endif
   aTab[ 5 ]     := cColorString

   if nInitPosition == NIL
      nInitPosition := 1
   endif
   aTab[ 6 ]    := nInitPosition

   return aTab


Static Function TabDisplay( aTab )

   Local cOldColor, nRow

   cOldColor := SetColor( aTab[ 5 ] )

   DevPos( aTab[ 1 ], aTab[ 2 ] ) ; DevOut( CHR(  24 ) )
   DevPos( aTab[ 3 ], aTab[ 4 ] ) ; DevOut( CHR(  25 ) )

   FOR nRow := (aTab[ 1 ] + 1) TO (aTab[ 3 ] - 1)
      DevPos( nRow, aTab[ 2 ] ) ; DevOut( CHR( 176 ) )
   NEXT

   SetColor( cOldColor )

   return aTab


Static Function TabUpdate( aTab, nCurrent, nTotal, lForceUpdate )

   Local cOldColor, nNewPosition
   Local nScrollHeight := (aTab[3]-1)-(aTab[1])

   if nTotal < 1
      nTotal := 1
   endif

   if nCurrent < 1
      nCurrent := 1
   endif

   if nCurrent > nTotal
      nCurrent := nTotal
   endif

   if lForceUpdate == NIL
      lForceUpdate := .F.
   endif

   cOldColor := SetColor( aTab[ 5 ] )

   nNewPosition := ROUND( (nCurrent / nTotal) * nScrollHeight, 0 )

   nNewPosition := if( nNewPosition < 1, 1, nNewPosition )
   nNewPosition := if( nCurrent == 1, 1, nNewPosition )
   nNewPosition := if( nCurrent >= nTotal, nScrollHeight, nNewPosition )

   if nNewPosition <> aTab[ 6 ] .OR. lForceUpdate

      DevPos( (aTab[ 6 ] + aTab[ 1 ]), aTab[ 2 ] ) ; DevOut( CHR( 176 ) )

      DevPos( (nNewPosition + aTab[ 1 ]), aTab[ 2 ] ) ; DevOut( CHR( 178 ) )
      aTab[ 6 ] := nNewPosition
   endif

   SetColor( cOldColor )

   return aTab


Static Function UpPath( cPath )

   Local cFileSpec

   cFileSpec := RIGHT( cPath, LEN( cPath ) - RAT( "\", cPath ) )
   cPath     := LEFT( cPath, RAT( "\", cPath ) - 1 )
   cPath     := LEFT( cPath, RAT( "\", cPath ) )
   cPath     += cFileSpec

   return (cPath)

Static Function LookAtFile

   Local cExtension := ""
   Local cOldScreen := SaveScreen( 0, 0, MaxRow(), MaxCol() )

   if AT( "D", SUBSTR( aFileList[ nFileItem ], 43, 6 ) ) <> 0
      DO CASE
      CASE SUBSTR( aFileList[ nFileItem ], 1, 3 ) == ".  "
         GetNewPath( aFileMan[ 6 ] )

      CASE SUBSTR( aFileList[ nFileItem ], 1, 3 ) == ".. "
         GetNewPath( UpPath( aFileMan[ 6 ]))

      OTHERWISE


         GetNewPath( SUBSTR( aFileMan[ 6 ], 1,  RAT( "\", aFileMan[ 6 ])) +  ltrim(rtrim(SUBSTR(aFileList[nFileItem],1,12))) + "\*.*")
      ENDCASE
      lReloadDir := .T.
   else
      cExtension := GetFileExtension( SUBSTR(aFileList[nFileItem],1,12) )

      DO CASE
      CASE cExtension == "DBF"
         DBFViewer( aFileMan[ FM_returnFILE ] )

      OTHERWISE
         OlharGenerico( aFileMan[ FM_returnFILE ] )

      ENDCASE

      RestScreen( 0, 0, MaxRow(), MaxCol(), cOldScreen )

   endif
   return NIL

Static Function CopyFile

   Local cNewName := ""
   Local cOldName := ""
   Local lKeepGoing := .F.
   Local cNewFile := ""
   Local nCurrent := 0
   Local cCurrentFile := ""
   Local nCount := 0



   Local cOldScreen := SaveScreen( aFileMan[ 1 ] + 3, aFileMan[ 2 ] + 2, aFileMan[ 1 ] + 6, aFileMan[ 2 ] + 51 )
   if AT( "<DIR>", aFileList[ nFileItem ] ) = 0
      ErrorBeep()
      if nTagged > 0
         if YesOrNo( "Copiar Arquivos Marcados ? (S/N)", "N" )
            lKeepGoing := .T.

         endif
      else

         DevPos( aFileMan[ 1 ] + 3 + nRel, aFileMan[ 2 ] + 1 ) ; DevOut( CHR( 16 ) )

         DevPos( aFileMan[ 1 ] + 3 + nRel, aFileMan[ 4 ] - 3 ) ; DevOut( CHR( 17 ) )
         if YesOrNo( "Copiar Este Arquivo ? (S/N)", "N" )
            lKeepGoing := .T.
         endif
      endif

      ClearMessage()



      DispBox( aFileMan[ 1 ] + 3, aFileMan[ 2 ] + 2, aFileMan[ 1 ] + 6, aFileMan[ 2 ] + 51, "ÉÍ»º¼ÍÈº" )

      Scroll( aFileMan[ 1 ] + 4, aFileMan[ 2 ] + 3, aFileMan[ 1 ] + 5, aFileMan[ 2 ] + 50 ) ; SetPos( aFileMan[ 1 ] + 4, aFileMan[ 2 ] + 3 )




      cNewName := cOldName := PADR( SUBSTR( aFileMan[ 6 ], 1,  RAT( "\", aFileMan[ 6 ] ) ) +  ltrim(rtrim(SUBSTR( aFileList[ nFileItem ], 1, 12 ))), 45 )

      if lKeepGoing

         if nTagged > 0


            cNewName := PADR( SUBSTR( aFileMan[ 6 ], 1, RAT( "\",  aFileMan[ 6 ] ) ), 45 )
            DevPos( aFileMan[ 1 ]+4, aFileMan[ 2 ] + 4 )
            DevOut("Copiar Arquivos Marcados Para...")

            SetCursor(1) ; SetPos( aFileMan[ 1 ]+5, aFileMan[ 2 ]+4 ) ; AAdd( GetList, _GET_( cNewName, "cNewName", "@!@S46@K",,))
            ReadModal( GetList, NIL,,,,, ) ; GetList := {} ; ( GetList )
            if LASTKEY() <> 27
               cNewName := ltrim(rtrim(cNewName))
               if RIGHT( cNewName, 1 ) <> "\"
                  cNewName += "\"
               endif
               FOR nCurrent := 1 TO LEN( aFileList )
                  if SUBSTR( aFileList[ nCurrent ], 14, 1 ) == CHR( 251 )


                     cCurrentFile := SUBSTR( aFileMan[ 6 ], 1,  RAT( "\", aFileMan[ 6 ])) +  ltrim(rtrim(SUBSTR( aFileList[ nCurrent ], 1, 12)))

                     cNewFile := cNewName +  ltrim(rtrim(SUBSTR( aFileList[ nCurrent ], 1, 12)))
                     Message( "Copiando " + ltrim(rtrim(cCurrentFile)) )
                     __CopyFile( ( cCurrentFile ), ( cNewFile ) )

                     aFileList[ nCurrent ] := STUFF( aFileList[ nCurrent ],  14, 1, " " )
                     nTagged--
                     nCount++
                     if InKey() = 27
                        EXIT
                     endif
                  endif
               NEXT

               Scroll( aFileMan[ 1 ] + 4, aFileMan[ 2 ] + 3, aFileMan[ 1 ] + 5, aFileMan[ 2 ] + 50 ) ; SetPos( aFileMan[ 1 ] + 4, aFileMan[ 2 ] + 3 )


               DevPos( aFileMan[ 1 ]+4, aFileMan[ 2 ]+4 ) ; DevOut( LTRIM(STR( nCount )) + if( nCount > 1, " Arquivos Copiados.  ",  " Arquivo Copiado.  " ) + "Tecle Algo..." )
               InKey(0)
            endif
         else

            DevPos( aFileMan[ 1 ]+4, aFileMan[ 2 ]+4 ) ; DevOut( "Copiar Arquivo Corrente Para..." )

            SetCursor(1) ; SetPos( aFileMan[ 1 ]+5, aFileMan[ 2 ]+4 ) ; AAdd( GetList, _GET_( cNewName, "cNewName", "@!@S46@K",,))
            ReadModal( GetList, NIL,,,,, ) ; GetList := {} ; ( GetList )
            if LASTKEY() <> 27
               if RIGHT( cNewName, 1 ) == "\"

                  cNewName += ltrim(rtrim(SUBSTR( cOldName, RAT( "\", cOldName)  + 1, 12 )))
               endif
               __CopyFile( ( cOldName ), ( cNewName ) )

               Scroll( aFileMan[ 1 ] + 4, aFileMan[ 2 ] + 3, aFileMan[ 1 ] + 5, aFileMan[ 2 ] + 50 ) ; SetPos( aFileMan[ 1 ] + 4, aFileMan[ 2 ] + 3 )

               DevPos( aFileMan[ 1 ]+4, aFileMan[ 2 ]+4 ) ; DevOut( "1 Arquivo Copiado. Tecle Algo..." )
               InKey(0)
            endif

         endif

         lReloadDir := .T.
      endif
   endif






   RestScreen( aFileMan[ 1 ] + 3,  aFileMan[ 2 ] + 2,  aFileMan[ 1 ] + 6,  aFileMan[ 2 ] + 51, cOldScreen )


   DevPos( aFileMan[ 1 ] + 3 + nRel, aFileMan[ 2 ] + 1 ) ; DevOut( CHR( 32 ) )

   DevPos( aFileMan[ 1 ] + 3 + nRel, aFileMan[ 4 ] - 3 ) ; DevOut( CHR( 32 ) )

   return NIL

Static Function RenameFile

   Local cNewName := "", cOldName := ""



   Local cOldScreen := SaveScreen( aFileMan[ 1 ] + 3, aFileMan[ 2 ] + 2, aFileMan[ 1 ] + 6, aFileMan[ 2 ] + 51 )

   if AT( "<DIR>", aFileList[ nFileItem ] ) = 0



      DispBox( aFileMan[ 1 ] + 3, aFileMan[ 2 ] + 2, aFileMan[ 1 ] + 6, aFileMan[ 2 ] + 51, "ÉÍ»º¼ÍÈº" )

      Scroll( aFileMan[ 1 ] + 4, aFileMan[ 2 ] + 3, aFileMan[ 1 ] + 5, aFileMan[ 2 ] + 50 ) ; SetPos( aFileMan[ 1 ] + 4, aFileMan[ 2 ] + 3 )




      cNewName := cOldName := PADR( SUBSTR( aFileMan[ 6 ], 1,  RAT( "\", aFileMan[ 6 ] ) ) +  ltrim(rtrim(SUBSTR( aFileList[ nFileItem ], 1, 12 ))), 45 )

      ErrorBeep()

      DevPos( aFileMan[ 1 ] + 4, aFileMan[ 2 ] + 4 ) ; DevOut( "Renomear " + SUBSTR( cNewName, 1, 38 ) )

      SetCursor(1) ; DevPos( aFileMan[ 1 ] + 5, aFileMan[ 2 ] + 4 ) ; DevOut( "Para" ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( cNewName, "cNewName", "@!@S43@K",,))
      ReadModal( GetList, NIL,,,,, ) ; GetList := {} ; ( GetList )

      if LASTKEY() <> 27
         if FILE( cNewName )
            ErrorBeep()

            Scroll( aFileMan[ 1 ] + 4, aFileMan[ 2 ] + 3, aFileMan[ 1 ] + 5, aFileMan[ 2 ] + 50 ) ; SetPos( aFileMan[ 1 ] + 4, aFileMan[ 2 ] + 3 )

            DevPos( aFileMan[ 1 ] + 4, aFileMan[ 2 ] + 4 ) ; DevOut( "Erro: Este Arquivo Ja Existe!" )

            DevPos( aFileMan[ 1 ] + 5, aFileMan[ 2 ] + 4 ) ; DevOut( "Tecle Algo..." )
            InKey( 0 )
         else
            lReloadDir := .T.
            FRename( ( ltrim(rtrim(cOldName)) ), ( ltrim(rtrim(cNewName)) ) )
         endif
      endif

   endif





   RestScreen( aFileMan[ 1 ] + 3,  aFileMan[ 2 ] + 2,  aFileMan[ 1 ] + 6,  aFileMan[ 2 ] + 51, cOldScreen )

   return NIL

Static Function DeleteFile

   Local nCurrentFile := 0
   Local cFile := ""
   ErrorBeep()
   if nTagged > 0
      if YesOrNo( "Deletar Arquivos Marcados ? (S/N)", "N" )
         lReloadDir := .T.
         FOR nCurrentFile := 1 TO LEN( aFileList )


            cFile := SUBSTR( aFileMan[ 6 ], 1,  RAT( "\", aFileMan[ 6 ] ) ) +  ltrim(rtrim(SUBSTR( aFileList[ nCurrentFile ], 1, 12 )))
            if SUBSTR( aFileList[ nCurrentFile ], 14, 1 ) == CHR( 251 )
               FErase( ( cFile ) )
               Message( "Deletando... " + ltrim(rtrim(cFile)) )
            endif
         NEXT
         Message( LTRIM( STR( nTagged ) ) + " Arquivo(s) Deletados... ")
         InKey( 0 )
         nTagged := 0
      endif
   else
      if AT( "<DIR>", aFileList[ nFileItem ] ) = 0


         cFile := SUBSTR( aFileMan[ 6 ], 1,  RAT( "\", aFileMan[ 6 ] ) ) +  ltrim(rtrim(SUBSTR( aFileList[ nFileItem ], 1, 12 )))

         DevPos( aFileMan[ 1 ] + 3 + nRel, aFileMan[ 2 ] + 1 ) ; DevOut( CHR( 16 ) )

         DevPos( aFileMan[ 1 ] + 3 + nRel, aFileMan[ 4 ] - 3 ) ; DevOut( CHR( 17 ) )
         if YesOrNo( "Deletar Este Arquivo ? (S/N)", "N" )
            FErase( ( cFile ) )
            lReloadDir := .T.

         endif
      endif
   endif


   DevPos( aFileMan[ 1 ] + 3 + nRel, aFileMan[ 2 ] + 1 ) ; DevOut( CHR( 32 ) )

   DevPos( aFileMan[ 1 ] + 3 + nRel, aFileMan[ 4 ] - 3 ) ; DevOut( CHR( 32 ) )
   Message( aFileMan[ 6 ] )
   return NIL

Static Function PrintFile



   Local cFile := SUBSTR( aFileMan[ 6 ], 1,  RAT( "\", aFileMan[ 6 ] ) ) +  ltrim(rtrim(SUBSTR( aFileList[ nFileItem ], 1, 12 )))

   ErrorBeep()
   DevPos( aFileMan[ 1 ] + 3 + nRel, aFileMan[ 2 ] + 1 )
   DevOut( Chr( 16 ) )
   DevPos( aFileMan[ 1 ] + 3 + nRel, aFileMan[ 4 ] - 3  )
   DevOut( Chr( 17 ) )
   if YesOrNo( "Imprimir Este Arquivo ?", "N" )
      if PrintReady()
         Message( "Imprimindo " + ltrim(rtrim(cFile)) )
         __CopyFile( ( cFile ), "Prn" )
         __Eject()

      else
         ErrorBeep()
         Message( "ERRO: Impressora Nao Responde!" )
         InKey( 20 )

      endif

   endif

   ClearMessage()
   DevPos( aFileMan[ 1 ] + 3 + nRel, aFileMan[ 2 ] + 1 )
   DevOut( Chr( 32 ) )
   DevPos( aFileMan[ 1 ] + 3 + nRel, aFileMan[ 4 ] - 3 )
   DevOut( Chr( 32 ) )
   Message( aFileMan[ 6 ] )
   return Nil

Static Function DBFViewer( cDatabase )

   Local cRecords := ""
   dbUseArea( .T.,, (cDatabase), "LookFile", iif( .T. .OR. .F., ! .F., NIL ), .T. )
   if !NetErr()
      cRecords := "REGISTROS # " + LTRIM( STR( RECCOUNT()))
      StatusInf( cRecords, ltrim(rtrim(cDataBase)))
      MaBox( 0, 0, MaxRow() -1, MaxCol() )
      DbEdit( 1, 1, 22, 78 )
      dbCloseArea()
      dbSelectArea( ( aFileMan[ 10 ] ) )
   endif
   return (cDatabase)



Static Function OlharGenerico( cFile )

   Local cBuffer := ""
   Local nHandle := 0
   Local nBytes  := 0
   Local cScreen := SaveScreen()

   cBuffer := Space( 50000 )
   nHandle := Fopen( cFile )
   if Ferror() <> 0
      cBuffer := "Erro Leitura Arquivo!"
   else
      nBytes = Fread( nHandle, @cBuffer, 50000 )
   endif
   Fclose( nHandle )
   cBuffer := RTRIM( cBuffer )
   StatusInf( ltrim(rtrim(cFile)), "USE " + Chr(27)+Chr(18)+Chr(26) + "?SC Sair")
   MaBox(0, 0, MaxRow()-1, MaxCol())
   DevPos( MaxRow(),  INT( (MaxCol( ) - 48 ) / 2) )
   MemoEdit( cBuffer, 1, 2, MaxRow() - 2, MaxCol() - 1, .F., "MemoUDF" , 300 )
   RestScreen(,,,, cScreen )
   return( cFile )



Function MemoUDF( Modo, Linha, Coluna )

if Modo < 4
   return( 0 )
else
   return( 0 )
endif

Static Function TagAllFiles

   Local nCurrent

   nTagged := 0
   FOR nCurrent := 1 TO LEN( aFileList )
      if AT( "D", SUBSTR( aFileList[ nCurrent ], 43, 6 ) ) == 0

         aFileList[ nCurrent ] := STUFF( aFileList[ nCurrent ],  14, 1, CHR( 251 ) )
         nTagged++
      endif
   NEXT
   return NIL

Static Function UnTagAllFiles

   Local nCurrent
   nTagged := 0
   FOR nCurrent := 1 TO LEN( aFileList )
      aFileList[ nCurrent ] := STUFF( aFileList[ nCurrent ], 14, 1, " " )

   NEXT
   return NIL
