#line 12 "c:\sci\include\rddName.ch"
    EXTERNAL leto
    EXTERNAL DBFNTX
   EXTERNAL DBFCDX


    EXTERNAL DBFFPT
    EXTERNAL SIXCDX
    EXTERNAL DBFNSX
    EXTERNAL HB_MEMIO
#line 3 "tprotege.prg"
_HB_CLASS TProtege ; function TProtege ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "TProtege", iif( .F., { }, { @HBObject() } ), @TProtege() ) ) ;
nScope := 1 ; ( ( nScope ) )
     _HB_MEMBER { Protegido } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Protegido"}, .F. )
     _HB_MEMBER { Erro } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Erro"}, .F. )
     _HB_MEMBER { Ferror } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Ferror"}, .F. )
     _HB_MEMBER { MsgErro } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"MsgErro"}, .F. )
     _HB_MEMBER { Rotina } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Rotina"}, .F. )
    _HB_MEMBER { Proteger } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Proteger"}, .F. )
    _HB_MEMBER { Arquivos } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"Arquivos"}, .F. )
    _HB_MEMBER { File } ; oClass:AddMultiData(,, nScope + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"File"}, .F. )
nScope := 1 ; ( ( nScope ) )
     _HB_MEMBER New() AS CLASS TProtege; oClass:AddMethod( "New", @TProtege_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER Protege(); oClass:AddMethod( "Protege", @TProtege_Protege(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER Encryptar(); oClass:AddMethod( "Encryptar", @TProtege_Encryptar(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER Decryptar(); oClass:AddMethod( "Decryptar", @TProtege_Decryptar(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER DesProtege(); oClass:AddMethod( "DesProtege", @TProtege_DesProtege(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
nScope := 4 ; ( ( nScope ) )
    _HB_MEMBER Add(); oClass:AddMethod( "Add", @TProtege_TAddProtege(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS TProtege ;

static FUNCTION TProtege_New( ) ; local Self AS CLASS TProtege := QSelf() AS CLASS TProtege

::Protegido := .F.
::Erro        := .F.
::Ferror     := 0
::MsgErro   := ""
::Rotina     := ""
::Proteger  := .T.
::File      := ""
::Arquivos := {}
return( Self )

static FUNCTION TProtege_TAddProtege( ) ; local Self AS CLASS TProtege := QSelf() AS CLASS TProtege

if Ascan( ::Arquivos, ::File ) = 0
   Aadd( ::Arquivos, ::File )
endif
return( Self )

static FUNCTION TProtege_Encryptar( cFile ) ; local Self AS CLASS TProtege := QSelf() AS CLASS TProtege

    dbUseArea( .T.,, ( cFile ),, iif( .F. .OR. .F., ! .F., NIL ), .F. )

    ::Protegido := .T.
    return(Self)

static FUNCTION TProtege_Decryptar( cFile ) ; local Self AS CLASS TProtege := QSelf() AS CLASS TProtege

    dbUseArea( .T.,, ( cFile ),, iif( .F. .OR. .F., ! .F., NIL ), .F. )


    ::Protegido := .F.
    return(Self)

static FUNCTION TProtege_Protege( cFile ) ; local Self AS CLASS TProtege := QSelf() AS CLASS TProtege

LOCAL Read_Bytes
LOCAL Write_Bytes
LOCAL Handle
LOCAL Buffers
LOCAL nPos

if ::Proteger == .F.
   return( Self )
endif

::File := cFile
if ( nPos := Ascan( ::Arquivos, ::File )) <> 0
   Adel( ::Arquivos, nPos )
endif

::Rotina := "TProtege.Protege"
if ValType( cFile ) <> "C"
    ::Protegido := .F.
    ::Erro        := .T.
    ::Ferror     := 0
    ::MsgErro    := "ARQUIVO NAO LOCALIZADO"
    return( Self )
endif

Handle := FOpen( cFile, 2 )
if Ferror() <> 0
    FClose( Handle )
    ::Protegido := .F.
    ::Erro        := .T.
    ::Ferror     := Ferror()
    ::MsgErro    := "ERRO DE ABERTURA DE :" + cFile
    return( Self )
endif

Buffer := Space(01)
Read_Bytes := FRead( Handle, @Buffer, 1 )
if Read_Bytes <> 1
    FClose( Handle )
    ::Protegido := .F.
    ::Erro        := .T.
    ::Ferror     := 0
    ::MsgErro    := "ERRO DE LEITURA DE :" + cFile
    return( Self )
endif

if Asc(Buffer) == 3
  Buffer := Chr(4)
else
    FClose( Handle )
    ::Protegido := .T.
    ::Erro        := .F.
    ::Ferror     := 0
    ::MsgErro    := "ARQUIVO JA PROTEGIDO :" + cFile
    return( Self )
endif
FSeek( Handle, 0, 0 )
Write_Bytes := FWrite( Handle, Buffer, 1 )
if Write_Bytes <> 1
    FClose( Handle )
    ::Protegido := .F.
    ::Erro        := .T.
    ::Ferror     := 0
    ::MsgErro    := "ERRO DE GRAVACAO :" + cFile
    return( Self )
endif
FClose( Handle )
::Protegido := .T.
::Erro        := .F.
::Ferror     := 0
::MsgErro    := "SUCESSO NA PROTECAO DO ARQUIVO :" + cFile
return( Self )

static FUNCTION TProtege_DesProtege( cFile ) ; local Self AS CLASS TProtege := QSelf() AS CLASS TProtege

LOCAL Read_Bytes
LOCAL Write_Bytes
LOCAL Handle
LOCAL Buffers

::File := cFile
if Ascan( ::Arquivos, ::File ) <> 0
   return( Self )
endif
::Rotina := "TProtege.DesProtege"
if ValType( cFile ) <> "C"
    ::Protegido := .T.
    ::Erro        := .T.
    ::Ferror     := 0
    ::MsgErro    := "ARQUIVO NAO LOCALIZADO"
    return( Self )
endif

Handle := FOpen( cFile, 2 )
if Ferror() <> 0
    FClose( Handle )
    ::Protegido := .T.
    ::Erro        := .T.
    ::Ferror     := Ferror()
    ::MsgErro    := "ERRO DE ABERTURA DE :" + cFile
    return( Self )
endif

Buffer := Space(01)
Read_Bytes := FRead( Handle, @Buffer, 1 )
if Read_Bytes <> 1
    FClose( Handle )
    ::Protegido := .T.
    ::Erro        := .T.
    ::Ferror     := 0
    ::MsgErro    := "ERRO DE LEITURA DE :" + cFile
    return( Self )
endif

if Asc(Buffer) == 4
  Buffer := Chr(3)
else
    FClose( Handle )
    ::Protegido := .F.
    ::Erro        := .T.
    ::Ferror     := 0
    ::MsgErro    := "ARQUIVO JA DESPROTEGIDO :" + cFile
    return( Self )
endif
FSeek( Handle, 0, 0 )
Write_Bytes := FWrite( Handle, Buffer, 1 )
if Write_Bytes <> 1
    FClose( Handle )
   ::Protegido := .T.
    ::Erro        := .T.
    ::Ferror     := 0
   ::MsgErro   := "ERRO DE GRAVACAO DE :" + cFile
    return( Self )
endif
FClose( Handle )
::Protegido := .F.
::Erro      := .F.
::Ferror    := 0
::MsgErro   := "SUCESSO NA DESPROTECAO DO ARQUIVO :" + cFile
Aadd( ::Arquivos, ::File )
return( Self )

Function TProtegeNew()

return( TProtege():New())
