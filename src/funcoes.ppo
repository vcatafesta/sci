#line 12 "c:\sci\include\rddName.ch"
    EXTERNAL leto
    EXTERNAL DBFNTX
   EXTERNAL DBFCDX


    EXTERNAL DBFFPT
    EXTERNAL SIXCDX
    EXTERNAL DBFNSX
    EXTERNAL HB_MEMIO
#line 19 "funcoes.prg"
STATIC static13
STATIC static14
STATIC static1 := "ÕÍ¸³¾ÍÔ³"
STATIC static2 := ""
STATIC static3 := {1, 1, 0, 0, 0, 0, 0, 0, 0, 24, 79, 1, 0, 0, 0, 1, 8, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, -999, 0, 0, Nil}



static function MaxDrawBox(Arg1)
   Arg1[18]:= untrim(m_title(), Arg1[11] - Arg1[22]) + right(Arg1[28], Arg1[11])
   mabox(Arg1[1], Arg1[2], Arg1[3], Arg1[4], m_frame(), Arg1[5])
   if (Arg1[10] > -1)
      print( Arg1[3] - 2, Arg1[2] + 1, Replicate(SubStr(m_frame(), 6, 1), Arg1[11]), Arg1[5])
   endif
   if (Arg1[10] > -2)
      print( Arg1[3] - 1, Arg1[2] + 1, Arg1[18], Arg1[6], Arg1[11])
   endif
   return Nil




function m_frame( cFrame )
   LOCAL pFrame := static1

    if (( cFrame == NIL ))
      return oAmbiente:Frame
   else
      Static1 := cFrame
   endif
   return( pFrame )




function m_title( cTitulo )
   LOCAL pTitulo := Static2

   if (( cTitulo == NIL ))
      return Static2
   else
      Static2 := cTitulo
   endif
   return( pTitulo )




function m_data( Arg1, Arg2 )
   local Local1 := Nil

   if (( Arg1 == NIL ) .AND. ( Arg2 == NIL ))
      return Static3
   endif
   if (Arg1 < 1 .OR. Arg1 > 32)
      return -1
   endif
   if (( Arg2 == NIL ))
      Local1:= Static3[Arg1]
   else
      Local1:= Static3[Arg1]
      Static3[Arg1]:= Arg2
   endif
   return Local1




function m_datasave()
   return Static3




function m_datarest( Arg1 )
   Static3 := aclone(Arg1)
   return Nil




function VerDebitosEmAtraso()
    LOCAL nNivel := 29

    if !Empty( aPermissao )
        if aPermissao[ nNivel ]
            return( .T. )
        endif
    endif
    return( .F. )




function PodeExcederDescMax()
    LOCAL nNivel := 25
    if !Empty( aPermissao )
        if aPermissao[ nNivel ]
            return( .T. )
        endif
        return( PedePermissao( nNivel))
    endif
    return( .F. )




function PodeMudarData( dEmis )
    LOCAL nNivel := 27

    if dEmis == Date()
        return( .T. )
    endif

    if !Empty( aPermissao )
        if aPermissao[ nNivel ]
            return( .T. )
        endif
        if !PedePermissao( nNivel )
            return( .F. )
        endif
        return( .T. )
    endif
    return( .F. )




function PodeRecDataDif( dEmis )
    LOCAL nNivel := 28

    if dEmis == Date()
        return( .T. )
    endif
    if !Empty( aPermissao )
        if aPermissao[ nNivel ]
            return( .T. )
        endif
        if !PedePermissao( nNivel )
            return( .F. )
        endif
        return( .T. )
    endif
    return( .F. )




function PodeReceber()
    if !Empty( aPermissao )
        if aPermissao[ 14 ]
            return( .T. )
        endif
        nNivel := 14
        if !PedePermissao( nNivel )
            return( .F. )
        endif
        return( .T. )
    endif
    return( .F. )




function PodePagar()
    if !Empty( aPermissao )
        if aPermissao[ 13 ]
            return( .T. )
        endif
        nNivel := 13
        if !PedePermissao( nNivel )
            return( .F. )
        endif
        return( .T. )
    endif
    return( .F. )




function PodeVenderComLimiteEstourado()
    if !Empty( aPermissao )
        if aPermissao[21]
            return( .T. )
        endif
    endif
    return( .F. )




function VerificarLimiteCredito()
    if !Empty( aPermissao )
        if aPermissao[24]
            return( .T. )
        endif
    endif
    return( .F. )




function TipoCadastro()
    if !Empty( aPermissao )
        if aPermissao[23]
            return( .T. )
        endif
    endif
    return( .F. )




function PodeBaixarTituloAVista()
    if !Empty( aPermissao )
        if aPermissao[22]
            return( .T. )
        endif
    endif
    return( .F. )




function PodeFaturarComEstoqueNegativo()
    if !Empty( aPermissao )
        if aPermissao[20]
            return( .T. )
        endif
    endif
    return( .F. )




function PodeFazerBackup()
    if !Empty( aPermissao )
        if aPermissao[17]
            return( .T. )
        endif
    endif
    return( .F. )




function PodeFazerRestauracao()
    if !Empty( aPermissao )
        if aPermissao[18]
            return( .T. )
        endif
    endif
    return( .F. )




function PodeAlterar()
    if !Empty( aPermissao )
        if aPermissao[10]
            return( .T. )
        endif
    endif
    return( .F. )




function PodeTrocarEmpresa()
    if !Empty( aPermissao )
        if aPermissao[16]
            return( .T. )
        endif
    endif
    return( .F. )




function PodeIncluir()
    if !Empty( aPermissao )
        if aPermissao[9]
            return( .T. )
        endif
    endif
    return( .F. )




function PodeExcluir()
    if !Empty( aPermissao )
        if aPermissao[11]
            return( .T. )
        endif
    endif
    return( .F. )




function BoxConf( nRow, nCol, nRow1, nCol1 )
    LOCAL PBack
    LOCAL Exceto     := .F.
    LOCAL Ativo      :=  1
    LOCAL cCor         := 112
    LOCAL nComp      := ( nCol1 - nCol )-1

    MS_Box( nRow, nCol, nRow1, nCol1, M_Frame() + " ", 112, 1, 8 )
    Print( nRow, nCol, "Ú", 127, 1 )
    Print( nRow, nCol+1, Repl("Ä",nComp), 127 )
    For x := nRow+1 To nRow1
        Print( x, nCol, "³", 127, 1 )
    Next
    Print( nRow1, nCol, "À",  127,1 )
    SetColor("N/W,W+/R")
    return NIL




function AcionaSpooler()
    SetKey( -7, NIL )
    Spooler()
    SetKey( -7, {| p, l, v | AcionaSpooler( p, l, v ) } )
    return( nil )




function SaidaParaEmail()
    LOCAL cScreen    := SaveScreen()
    LOCAL GetList    := {}
    LOCAL cDir     := oAmbiente:xRoot + "\" + oAmbiente:xBaseTmp
    LOCAL xArquivo := FTempName("T*.TXT", cDir)
    LOCAL cTo        := Space(40)
    LOCAL cFrom     := oIni:ReadString("sistema", "email", Space(40))
    LOCAL cSubject := "Enviando Email : " + xTemp + Space(10)
    LOCAL xServer    := oIni:ReadString("sistema","smtp", "SMTP.MICROBRAS.COM.BR" + Space(19))
    LOCAL xString
    LOCAL i

    oMenu:Limpa()
    MaBox( 15, 00, 21, 79 )
    SetCursor(1) ; DevPos( 16, 01 ) ; DevOut( "Para    : " ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( cTo, "cTo", "@!", {|| if(Empty(cTo),      ( ErrorBeep(), Alerta("Ooops!: Vai enviar para quem ?"), .F. ), .T. )},))
    SetCursor(1) ; DevPos( 17, 01 ) ; DevOut( "De      : " ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( cFrom, "cFrom", "@!", {|| if(Empty(cFrom),    ( ErrorBeep(), Alerta("Ooops!: Nao vai dizer o email de quem enviou ?"), .F. ), .T. )},))
    SetCursor(1) ; DevPos( 18, 01 ) ; DevOut( "Anexo   : " ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( xArquivo, "xArquivo", "@!", {|| if(Empty(xArquivo), ( ErrorBeep(), Alerta("Ooops!: Entre com o Anexo!"), .F. ), .T. )},))
    SetCursor(1) ; DevPos( 19, 01 ) ; DevOut( "Assunto : " ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( cSubject, "cSubject", "@!", {|| if(Empty(cSubject), ( ErrorBeep(), Alerta("Ooops!: Entre com o Assunto!"), .F. ), .T. )},))
    SetCursor(1) ; DevPos( 20, 01 ) ; DevOut( "Servidor: " ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( xServer, "xServer", "@!", {|| if(Empty(xServer),  ( ErrorBeep(), Alerta("Ooops!: Entre com o servidor!"), .F. ), .T. )},))
    ReadModal( GetList, NIL,,,,, ) ; GetList := {} ; ( GetList )

    if LastKey() = 27
        oAmbiente:cArquivo := ""
        return(ResTela(cScreen))
    endif

    cFrom                  := ltrim(rtrim(cFrom))
    cTo                     := ltrim(rtrim(cTo))
    cSubject           := ltrim(rtrim(cSubject))
    xServer                 := ltrim(rtrim(xServer))
    oAmbiente:Spooler  := .T.
    oAmbiente:cArquivo := xArquivo
    xArquivo           := ltrim(rtrim(xArquivo))
    Set( 24, (xArquivo), .F. )
    Mensagem("Aguarde, Enviando Email.")







    xstring := "mail.bat"
    FT_ChDir( oAmbiente:xBaseDoc )
    LETO_SET( 7, ( oAmbiente:xBaseDoc ) )
    i = SWPVIDMDE(.T.)
    i = SWPDISMSG(.T.)
    i = SWPFREEMS(640)
    i = SWPFREXMS(640)
    i = SWPSETENV(32000)
    i = SWPADDENV(2048)
    i := SWPRUNCMD( xString , 100, "", "")
    FT_ChDir( oAmbiente:xBaseDados )
    LETO_SET( 7, ( oAmbiente:xBaseDados ) )
    return(ResTela(cScreen))




function SaidaParaArquivo()
    LOCAL cScreen    := SaveScreen()
    LOCAL cDir     := oAmbiente:xBaseTmp
    LOCAL GetList    := {}
    LOCAL xArquivo := ""

    oMenu:Limpa()
    xArquivo := FTempName(".TXT", cDir) + Space(20)
    MaBox( 15, 00, 17, 79 )
    SetCursor(1) ; DevPos( 16, 01 ) ; DevOut( "Visualizar no Arquivo: " ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( xArquivo, "xArquivo", "@!",,))
    ReadModal( GetList, NIL,,,,, ) ; GetList := {} ; ( GetList )

    if LastKey() = 27
        if Conf("Pergunta: Cancelar Impressao ?")
            oAmbiente:cArquivo := ""
            ResTela( cScreen )
            return .F.
        endif
    endif

    xArquivo           := ltrim(rtrim(xArquivo))
    oAmbiente:Spooler  := .T.
    oAmbiente:cArquivo := xArquivo
    Set( 24, (xArquivo), .F. )
    ResTela( cScreen )
    return .T.




function SaidaParaSpooler()
    LOCAL cScreen    := SaveScreen()
    LOCAL GetList    := {}
    LOCAL xArquivo := ""
    LOCAL cDir     := oAmbiente:xBaseTmp

    oMenu:Limpa()
    xArquivo := FTempName(".PRN", cDir) + Space(20)
    MaBox( 15, 00, 17, 79 )
    SetCursor(1) ; DevPos( 16, 01 ) ; DevOut( "Visualizar no Arquivo: " ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( xArquivo, "xArquivo", "@!",,))
    ReadModal( GetList, NIL,,,,, ) ; GetList := {} ; ( GetList )

    if LastKey() = 27
        oAmbiente:cArquivo := ""
        return(ResTela( cScreen ))
    endif

    oAmbiente:Spooler  := .T.
    oAmbiente:cArquivo := xArquivo
    xArquivo := ltrim(rtrim(xArquivo))
    Set( 24, (xArquivo), .F. )
    return(ResTela( cScreen ))




function SaidaParaHtml()
    LOCAL cScreen    := SaveScreen()
    LOCAL GetList    := {}
    LOCAL xArquivo := ""
    LOCAL cDir     := oAmbiente:xBase + "\HTM\"

    oMenu:Limpa()

    xArquivo := FTempName(".TXT", cDir) + Space(10)
    MaBox( 15, 00, 17, 79 )
    SetCursor(1) ; DevPos( 16, 01 ) ; DevOut( "Visualizar no Arquivo: " ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( xArquivo, "xArquivo", "@!",,))
    ReadModal( GetList, NIL,,,,, ) ; GetList := {} ; ( GetList )
    if LastKey() = 27
        oAmbiente:cArquivo := ""
        return(ResTela( cScreen ))
    endif
    xArquivo := ltrim(rtrim(xArquivo))
    oAmbiente:Spooler  := .T.
    oAmbiente:cArquivo := xArquivo
    oAmbiente:externo  := .T.
    Set( 24, ( xArquivo ), .F. )
    return(ResTela( cScreen ))




function SaidaParaUsb()
    LOCAL cScreen    := SaveScreen()
    LOCAL GetList    := {}
    LOCAL xArquivo := ""
    LOCAL cDir     := oAmbiente:xBaseDados + "\"
    LOCAL i

    oMenu:Limpa()

    xArquivo := FTempName(".TMP", cDir) + Space(10)
    oAmbiente:Spooler  := .F.
    oAmbiente:cArquivo := xArquivo
    xArquivo := ltrim(rtrim(xArquivo))
    Set( 24, ( xArquivo ), .F. )
    i = SWPUSEEMS(.T.)
    i = SWPUSEXMS(.T.)
    i = SWPUSEUMB(.T.)
    i = SWPVIDMDE(.T.)
    i = SWPCURDIR(.T.)
    i = SWPDISMSG(.F.)
    i = SWPGETKEY(.F.)
    xString := "COPY /B " + xArquivo + " PRN"
    i          := SWPRUNCMD( xString, 0, "", "" )
    ResTela( cScreen )
    return(.T.)




function Alerta( cString, aArray, Color )
    if oAmbiente:Visual
        aArray := Iif( aArray = NIL, {"&OK"}, aArray )
        nTam := Len( aArray )
        if      nTam = 1
            nButton := MsgBox1( cString, SISTEM_NA1 )
            return( nButton )
        elseif nTam = 2
            aArray[1] := "&" + ltrim(rtrim(aArray[1]))
            aArray[2] := "&" + ltrim(rtrim(aArray[2]))
            nButton := MsgBox2( cString, SISTEM_NA1, NIL, aArray[1], aArray[2] )
            return( nButton )
        elseif nTam = 3
            aArray[1] := "&" + ltrim(rtrim(aArray[1]))
            aArray[2] := "&" + ltrim(rtrim(aArray[2]))
            aArray[3] := "&" + ltrim(rtrim(aArray[3]))
            nButton := MsgBox3( cString, SISTEM_NA1, NIL, aArray[1], aArray[2], aArray[3] )
            return( nButton )
        elseif nTam > 3
            nButton := Alert( cString, aArray, oAmbiente:CorAlerta )
            return( nButton )
        endif
    endif
    __DefaultNIL(@cString, "(Pressione qualquer tecla)")
    __DefaultNIL(@Color, oAmbiente:CorAlerta)
    __DefaultNIL(@aArray, " true ")
    return( alert( cString, aArray, ColorIntToStr(Color)))




function LinhaHorizontal(nrow, ncol, nlen, ncor)
    LOCAL nComp  := (nLen - nCol)
    LOCAL cFrame := m_Frame()

    aprint(nRow, nCol, chr(195), nCor, 1)
    aprint(nRow, nCol + 1, replicate(substr(cFrame, 2, 1), nComp), nCor, 1)
    aprint(nRow, nCol + nComp + 1, chr(180), nCor, 1)
    return NIL




function boxpy(nRow, nCol, nRow1, nCol1, cFrame, nCor, titulo)
    nComp = (nCol1 - nCol)
    center = maxcol() / 2

    for x := nRow TO nRow1
        aprint(x, nCol, space(nComp), nCor, nComp)
    next

    aprint(nRow, nCol, left(cFrame, 1), nCor, 1)
    aprint(nRow, nCol + 1, replicate(substr(cFrame, 5, 1), nComp), nCor, 1)
    aprint(nRow, nCol1, substr(cFrame, 2, 1), nCor, 1)

    for x := nRow + 1 TO nRow1
        aprint(x, nCol, substr(cFrame, 6, 1), nCor, 1)
        aprint(x, nCol1, substr(cFrame, 6, 1), nCor, 1)
     next
    aprint(nRow1, nCol, substr(cFrame, 3, 1), nCor, 1)
    aprint(nRow1, nCol + 1, replicate(substr(cFrame, 5, 1), nComp), nCor, 1)
    aprint(nRow1, nCol1, substr(cFrame, 4, 1), nCor, 1)
    if titulo <> NIL
        aprint(nRow, nCol + 1, "", roloc(nCor), nComp)
        aprint(nRow, center, titulo, roloc(nCor), 1)
    endif
    return nil




function Nada(cString, lLimpaTela)
    LOCAL cScreen := SaveScreen()

    if( cString = NIL, cString := "INFO: Nada consta nos parametros informados.", cString )
    if lLimpaTela = NIL
        oMenu:Limpa()
    endif
    ErrorBeep()
    Alerta( cString )
    return(ResTela( cScreen ))




function AreaAnt( Arq_Ant, Ind_Ant )
    if !Empty( Arq_Ant )
        dbSelectArea( ( Arq_Ant ) )
        DbSetOrder( Ind_Ant )
    endif
    return nil




function Rep_Ok()
    LOCAL cScreen := SaveScreen()
    LOCAL cCor      := SetColor()

    if Inkey() = 27
        LETO_SET( 20, "SCREEN" )
        if Conf("Pergunta: Deseja Interromper a Tarefa ?")
            return( .F. )
        endif
        SetColor( cCor )
        ResTela( cScreen )
    endif
    return( .T. )




function Rel_Ok(cMensagem)
    LOCAL cScreen := SaveScreen()
    LOCAL nChoice := 2
    LOCAL nRow      := Prow()
    LOCAL nCol      := PCol()

    if Inkey() == 27
        LETO_SET( 23, "Off" )
        LETO_SET( 20, "SCREEN" )
        ErrorBeep()
        if Conf("Pergunta: Deseja cancelar a impressao ?")
            LETO_SET( 23, "Off" )
            LETO_SET( 24, "" )
            LETO_SET( 20, "SCREEN" )
            LETO_SET( 17, "On" )
            ResTela( cScreen )
            Break
            return .F.
        endif
        if !LptOk()
            LETO_SET( 20, "SCREEN" )
            LETO_SET( 23, "Off" )
            LETO_SET( 17, "On" )
            LETO_SET( 24, "" )
            Break
            return .F.
        endif
        ResTela( cScreen )
        LETO_SET( 23, "On" )
        LETO_SET( 20, "PRINTER" )
        SetPrc( nRow, nCol )
    else
        LETO_SET( 23, "Off" )
        LETO_SET( 20, "SCREEN" )
        if cMensagem <> Nil
            oMenu:StatReg(cMensagem)
        else
            oMenu:StatReg("REGISTRO #" + StrZero( ++oAmbiente:nRegistrosImpressos, 7))
        endif
        LETO_SET( 23, "On" )
        LETO_SET( 20, "PRINTER" )
        SetPrc( nRow, nCol )
    endif
    return( .T. )




function ContaReg(cMensagem)
    LOCAL cScreen := SaveScreen()
    LOCAL nChoice := 2

    if cMensagem <> Nil
        oMenu:StatReg(cMensagem)
    else
        oMenu:StatReg("REGISTRO#" + StrZero( ++oAmbiente:nRegistrosImpressos, 7))
    endif
    return( .T. )




function LptOk()
    LOCAL cScreen
    LOCAL nComPort := 1
    LOCAL nStatus
    LOCAL lRetorno := .T.
    STATI lMaluco  := .F.





    LOCAL aAction    := { "ERRO: IMPRESSORA FORA DE LINHA. ", "ERRO: IMPRESSORA DESLIGADA.     ", "ERRO: IMPRESSORA SEM PAPEL.     ", "ERRO: IMPRESSORA NAO CONECTADA. ", "ERRO: IMPRESSORA NAO PRONTA.    ", "OK: IMPRESSORA ONLINE NOVAMENTE."}
    LOCAL cMsg := ";;1)Verifique a impressora se ligada, cabeamento, conexoes "
            cMsg += "  e mapeamentos de rede, etc. Lembre-se que impressoras  "
            cMsg += "  mapeadas sempre estarao com status de PRONTA devido ao "
            cMsg += "  SPOOL de impressao da rede.                            "

            cMsg += ";2)Voce pode verificar status de online novamente. Escolha"
            cMsg += " (TENTAR).                                               "
            cMsg += ";3)Ao escolher a opcao (IMPRIMIR ASSIM MESMO) podera haver"
            cMsg += "   um travamento completo do sistema.                    "
            cMsg += ";4)Escolha (RETORNAR) para cancelar a impresso.          "

    if lMaluco
        return( lMaluco)
    endif

    if oAmbiente:PrintReady <= 3
        nStatus := PrintStat( oAmbiente:PrintReady )
        if !oAmbiente:Spooler
            cScreen := SaveScreen()
            oMenu:Limpa()
            WHILE !PrintReady( oAmbiente:PrintReady )
                nStatus := PrintStat( oAmbiente:PrintReady )
                if nStatus = 0
                    nStatus := Iif( PrintReady(oAmbiente:PrintReady), 6, 1)
                else
                    if nStatus = -1
                        nStatus := 5
                    endif
                endif
                ErrorBeep()
                nDecisao := Alerta( aAction[ nStatus] + cMsg, {"TENTAR", "IMPRIMIR ASSIM MESMO", "CANCELAR", "MAPEAR"} )
                if nDecisao = 3 .OR. nDecisao = 0
                    lMaluco  := .F.
                    lRetorno := .F.
                    exit
                endif
                if nDecisao = 2
                    lMaluco  := .T.
                    lRetorno := .T.
                    exit
                endif
                if nDecisao = 4
                    Scroll() ; SetPos( 0, 0 )
                    DosShell("CMD net")
                    lMaluco  := .F.
                    lRetorno := .F.
                    exit
                endif

            EndDo
            ResTela( cScreen )
        endif
    else
        nComPort := ( oAmbiente:PrintReady - 4 )
        lRetorno := ( nStatus := FT_IsPrint( nComPort ))
    endif
    return( lRetorno )




function AbreSpooler()

    iif( oAmbiente:Spooler, Set( 24, oAmbiente:cArquivo, .F. ), LETO_SET( 24, "" ))
    return NIL




function CloseSpooler()

LOCAL cScreen    := SaveScreen()
LOCAL lTemp     := oAmbiente:Spooler
LOCAL cTemp     := oAmbiente:cArquivo
LOCAL lexterno := oAmbiente:externo
LOCAL cComando
LOCAL i

LETO_SET( 24, "" )
LETO_SET( 24, "" )

if lexterno
    cComando := "firefox.exe " + cTemp
    cComando := "C:\Program Files\Mozilla Firefox\firefox.exe " + cTemp
    cComando := "chrome.exe " + cTemp
    ShellRun("NOTEPAD " + cTemp )










    oAmbiente:externo := .F.
else
    if lTemp
        oMenu:Limpa()
        oMenu:StatInf()
        oMenu:StatReg("IMPRESSO #" + StrZero( oAmbiente:nRegistrosImpressos, 7))
        M_Title( "ESC - Retorna ³Setas CIMA/BAIXO Move")
      M_View( 00, 00, MaxRow()-1, MaxCol(), cTemp, Cor())

        ResTela( cScreen )
    endif
endif

oAmbiente:Spooler  := .F.
return Nil



























































Proc GravaDisco()

    LOCAL cScreen := SaveScreen()

    oMenu:Limpa()
    Mensagem("Aguarde, Gravando em Disco." )
    DbCommitAll()
    ResTela( cScreen )
    return

function Area( cArea)

    DbSelectArea( cArea )
    return NIl


Proc Altc( cTexto )

LOCAL cScreen := SaveScreen()
LOCAL cCor      := SetColor()
SetColor("")
Scroll() ; SetPos( 0, 0 )
ErrorBeep()
if Conf("Encerrar a Execucao do Aplicativo ?")
    DbCommitAll()
    DbCloseAll()
    FT_ChDir( oAmbiente:xBase )
    Scroll() ; SetPos( 0, 0 )
    F_Fim( cTexto )
    lOk := .F.
    __Quit()
endif
SetColor( cCor )
ResTela( cScreen )
return

Proc VerRelato()

LOCAL cScreen := SaveScreen()
LOCAL Files := "*.*"
LOCAL Arquivo

M_Title( "Setas CIMA/BAIXO Move")
while( .T. )

    ShellRun("NOTEPAD " + Arquivo )
    if Empty( Arquivo )
        Tone( 1 )
        ResTela( cScreen )
        Exit

    else
        cScreen1 := SaveScreen()
      M_View( 00, 00, MaxRow(), MaxCol, Arquivo, Cor())
        ShellRun("NOTEPAD " + Arquivo )
        ResTela( cScreen1 )
  endif
EndDO
return

function Spooler()

LOCAL GetList     := {}
LOCAL cScreen     := SaveScreen()
LOCAL Arq_Ant     := Alias()
LOCAL Ind_Ant     := IndexOrd()
LOCAL Files       := "*.TXT"



LOCAL aMenuChoice := { " Enviar para Impressora ", " Enviar para Arquivo    ", " Visualizar Arquivo     ", " Escolher Impressora    "}
oMenu:Limpa()
WHILE .T.
    M_Title("SPOOLER")
    nChoice := FazMenu( 05, 50, aMenuChoice )
    Do Case
    Case nChoice = 0
        if !Empty( Arq_Ant)
            dbSelectArea( ( Arq_Ant ) )
            DbSetOrder( Ind_Ant )
        endif
        ResTela( cScreen )
        Exit

    Case nChoice = 1
        oAmbiente:cArquivo := ""
        oAmbiente:Spooler  := .F.
        ResTela( cScreen )
        Exit

    Case nChoice = 2
        oAmbiente:cArquivo := Iif( Empty( oAmbiente:cArquivo ), oAmbiente:xBaseDados + "\" +  FTempName("T*.TMP") + Space(10), oAmbiente:cArquivo )
        MaBox( 15, 10, 17 , 79 )
        SetCursor(1) ; DevPos( 16, 11 ) ; DevOut( "Arquivo de Impressao... ¯ " ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( oAmbiente:cArquivo, "oAmbiente:cArquivo", "@!",,))
        ReadModal( GetList, NIL,,,,, ) ; GetList := {} ; ( GetList )
        if LastKey() = 27
            oAmbiente:cArquivo := ""
            ResTela( cScreen )
            Exit
        endif
        oAmbiente:Spooler := .T.
      cArq              := ltrim(rtrim(oAmbiente:cArquivo))
        ResTela( cScreen )
        Exit

    Case nChoice = 3
        MaBox( 15, 10, 17 , 79 )
        SetCursor(1) ; DevPos( 16, 11 ) ; DevOut( "Arquivo a Visualizar... ¯ " ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( oAmbiente:cArquivo, "oAmbiente:cArquivo", "@!",,))
        ReadModal( GetList, NIL,,,,, ) ; GetList := {} ; ( GetList )
        if LastKey() = 27
            ResTela( cScreen )
            Exit
        endif
        if !File( oAmbiente:cArquivo )
            oMenu:Limpa()
            FT_ChDir( oAmbiente:xBaseTxt )
            LETO_SET( 7, ( oAmbiente:xBaseTxt ) )
            M_Title( "Setas CIMA/BAIXO Move")
            oAmbiente:cArquivo := Mx_PopFile( 03, 10, 15, 61, Files, Cor())
            if Empty( oAmbiente:cArquivo )
                FT_ChDir( oAmbiente:xBaseDados )
                LETO_SET( 7, ( oAmbiente:xBaseDados ) )
                ErrorBeep()
                Alerta("Erro: O Arquivo Nao Existe. ")
                return(ResTela(cScreen))
          endif
        endif
        oAmbiente:Externo := .F.
        oAmbiente:Spooler := .T.

        ShellRun("NOTEPAD " + oAmbiente:cArquivo )
        CloseSpooler()
        oAmbiente:Spooler := .F.
        ResTela( cScreen )
        Exit

    Case nChoice = 4
        Impressora()
    EndCase
EndDo
return

function Refresh()

    DbSkip(0)
    return Nil


function TravaReg( nTentativa, aRegistros )

    LOCAL cScreen := SaveScreen()
    LOCAL Restart := .T.
    LOCAL lContinua

    hb_default(@nTentativa, 2)
    lContinua  := ( nTentativa == 0 )

    while Restart
        while (!RLock() .AND. ( nTentativa > 0 .OR. lContinua ))
            Mensagem(" Travando Registro " + ltrim(rtrim(Str( Recno()))) + " no Arquivo " + Alias(), CorBox())
            if inKey(1) = 27
                exit
            endif
            nTentativa--
        enddo
        if !RLock()
            if !Conf("Registro em uso. Tentar Novamente ?" )
                ResTela( cScreen )
                return( .F. )
            endif
            ResTart    := .T.
            nTentativa := 2
        else
            ResTela( cScreen )
            return( .T. )
        endif
    EndDo


function TravaArq()

    if Flock()
        return( .T. )
    endif
    while !FLock()
        ErrorBeep()
        if !Conf("Arquivo em uso em outra Estaao. Tentar Novamente ?" )
            return( .F. )
        endif
        if FLock()
            return( .T. )
        endif
    enddo
    return( .T. )

function Incluiu()

    DbAppend()
    if !NetErr()
        return( .T. )
    endif
    while NetErr()
        ErrorBeep()
        if !Conf("Registro em uso em outra Estaao. Tentar Novamente ?")
            return( .F. )
        endif
        DbAppend()
        if !NetErr()
            return( .T. )
        endif
    EndDo
    return( .T. )

function Libera()


    DbSkip(0)
    DbGoto( Recno())
    DbUnLock()
    return Nil

function Cor( nTipo, nTemp )

    IF nTipo == NIL ; nTipo := 1 ; END

    if nTemp <> NIL
        return( nTemp )
    endif

    Switch nTipo
    Case 1
        return( oAmbiente:CorMenu    )
    Case 2
        return( oAmbiente:CorCabec )
    Case 3
        return( oAmbiente:Corfundo )
    Case 4
        return( oAmbiente:CorDesativada )
    Case 5
        return( oAmbiente:CorLightBar )
    Case 6
        return( oAmbiente:CorHotKey )
    Case 7
        return( oAmbiente:CorHKLightBar )
    Case 8
        return( oAmbiente:CorAlerta )
    Case 9
        return( oAmbiente:CorMsg )
    EndSwitch

function CorAlerta( nTipo )

if( nTipo = NIL, nTipo := 1, nTipo )
return( oAmbiente:CorAlerta )

function CorBox( nTipo )

if( nTipo = NIL, nTipo := 1, nTipo )
return( oAmbiente:CorAlerta )

function CorBoxCima( nTipo )

if( nTipo = NIL, nTipo := 1, nTipo )
return( oAmbiente:CorCima )

function SetaCor( nCor, nTipo )

LOCAL ikey
LOCAL cScreen
LOCAL CorAnt
STATIC XColor
if( nTipo = NIL, nTipo := 1, nTipo )
XColor := Cor( nTipo )
CorAnt := Cor( nTipo )


cScreen := SaveScreen()


while( .T. )
    M_Message("Cor Atual ¯¯ "+ Str( XColor ) + " - Enter Para Setar ou ESCape", Cor(nTipo))
    Ikey := Inkey( 0 )
    if ( Ikey == 24)
         XColor    := Iif( XColor  == 0, 255, --XColor  )

     elseif ( Ikey == 5)
         XColor    := Iif( XColor  == 255, 0, ++XColor  )

     elseif ( Ikey == 27)
         nCor := CorAnt
         Exit

     elseif ( Ikey == 13)
          Exit

     endif
     nCor := XColor

ENDDO


cScreen := SaveScreen( 01, 00, MaxRow()-1, MaxCol())
ResTela( cScreen )

return Nil

function Calc( cProc, nLine, cVar )

LOCAL cScreen := SaveScreen()
LOCAL cColor  := Setcolor()
LOCAL GetList := {}
LOCAL cCalc   := Chr(77)+Chr(97)+Chr(99)+Chr(114)+Chr(111)+Chr(115)+Chr(111)+Chr(102)+Chr(116)+Chr(32)+Chr(67)+Chr(65)+Chr(76)+Chr(67)
LOCAL entry
LOCAL fcode
LOCAL mcode
LOCAL calcdec
LOCAL dec
LOCAL accum
LOCAL enter
LOCAL deccnt
LOCAL calcscr
LOCAL pcount
LOCAL inkey
LOCAL code
LOCAL calcclr
LOCAL rowsave
LOCAL colsave
LOCAL procname
LOCAL cFita := Space(0)
LOCAL nPos  := 3

Mabox(nPos, 45, nPos + 19, 70 )
SetColor("BG+")
StatusInf("x = *³ö = /³", "ESC-RETORNA")
MaBox( nPos+00, 45, nPos+06, 70 )

MaBox( nPos+19, 45, nPos+21, 70 )
Write( nPos+20, 46, "MEM")
Row := nPos + 07
WHILE Row < 17 + nPos
  DispBox( Row, 45, Row + 02, 48, 1 )
  DispBox( Row, 50, Row + 02, 53, 1 )
  DispBox( Row, 54, Row + 02, 57, 1 )
  DispBox( Row, 58, Row + 02, 61, 1 )
  DispBox( Row, 63, Row + 02, 66, 1 )
  DispBox( Row, 67, Row + 02, 70, 1 )
  Row += 03
EndDo
SetColor("GR+")
DevPos( nPos + 08, 46 ) ; DevOut( "AC" )
DevPos( nPos + 08, 51 ) ; DevOut( " 7" )
DevPos( nPos + 08, 55 ) ; DevOut( " 8" )
DevPos( nPos + 08, 59 ) ; DevOut( " 9" )
DevPos( nPos + 08, 64 ) ; DevOut( " /" )
DevPos( nPos + 08, 68 ) ; DevOut( " R" )
DevPos( nPos + 11, 46 ) ; DevOut( "MR" )
DevPos( nPos + 11, 51 ) ; DevOut( " 4" )
DevPos( nPos + 11, 55 ) ; DevOut( " 5" )
DevPos( nPos + 11, 59 ) ; DevOut( " 6" )
DevPos( nPos + 11, 64 ) ; DevOut( " *" )
DevPos( nPos + 11, 68 ) ; DevOut( " %" )
DevPos( nPos + 14, 46 ) ; DevOut( "M-" )
DevPos( nPos + 14, 51 ) ; DevOut( " 1" )
DevPos( nPos + 14, 55 ) ; DevOut( " 2" )
DevPos( nPos + 14, 59 ) ; DevOut( " 3" )
DevPos( nPos + 14, 64 ) ; DevOut( " -" )
DevPos( nPos + 14, 68 ) ; DevOut( "CE" )
DevPos( nPos + 17, 46 ) ; DevOut( "M+" )
DevPos( nPos + 17, 51 ) ; DevOut( " 0" )
DevPos( nPos + 17, 55 ) ; DevOut( " ." )
DevPos( nPos + 17, 59 ) ; DevOut( " =" )
DevPos( nPos + 17, 64 ) ; DevOut( " +" )
DevPos( nPos + 17, 68 ) ; DevOut( "C " )
entry   := 0
calcdec := 0
calcacc := 0
calcmem := 0
dec     := .F.
fcode   := "+"
code    := " "
accum   := .T.
enter   := .T.
inkey   := 13
mcode   := " "
LETO_SET( 3, 4 )
while( .T. )
  SetColor("GR+/RB,gr+/rb")
  DevPos( nPos + 20, 40 + 11 ) ; DevOutPict( calcmem, "99999999999999.9999" )
  SetColor("GR+/R,N/W+")

  if accum
     DevPos( nPos + 05, 40 + 07 ) ; DevOut( "T" )
     DevPos( nPos + 05, 40 + 11 ) ; DevOutPict( calcacc, "99999999999999.9999" )

  else
     DevPos( nPos + 05, 40 + 07 ) ; DevOut( fcode )
     DevPos( nPos + 05, 40 + 11 ) ; DevOutPict( entry+calcdec, "99999999999999.9999" )
  endif

  inkey := InKey(0)
  code  := Chr(inkey)
  Do Case
   Case code >= "0" .AND. code <= "9"
        if enter .OR. fcode = " "
          calcacc := 0
          entry   := 0
          calcdec := 0
          fcode   := "+"
        endif
        accum := .F.
        if !dec
          entry := entry*10+VAL(code)
        else
          if deccnt<1000
             calcdec=calcdec+VAL(code)/deccnt
             deccnt=deccnt*10
          endif
        endif
     Case code = "." .OR. code = ","
        accum=.F.
        dec=.T.
        deccnt=10

     Case (code="+" .OR. code="-" .OR. code="/" .OR. code="*"    .OR. code="R" .OR. code="%" .OR. inkey=13) .AND. mcode=" "
        accum=.T.
        nSetColor(oAmbiente:CorMenu)
        DevPos( nPos+ 04, 51 ) ; DevOutPict( (entry+calcdec), "99999999999999.9999" )
        DevPos( nPos+ 04, 69 ) ; DevOut( iif( inkey = 13, "=", code) )
        Scroll( nPos + 01, 46, nPos + 04, 69, 1 )

        if inkey#13 .AND. enter

        else
          Do Case
             Case fcode="+"
                if code="%"
                  calcacc=calcacc+calcacc*.01*(entry+calcdec)
                else
                  calcacc=calcacc+(entry+calcdec)
                endif
             Case fcode="-"
                if code="%"
                  calcacc=calcacc-calcacc*.01*(entry+calcdec)
                else
                  calcacc=calcacc-(entry+calcdec)
                endif
             Case fcode="*"
                calcacc=calcacc*(entry+calcdec)
             Case fcode="/"
                    if (entry+calcdec) = 0
                        Accum := .F.
                        CalcAcc := CalcDec := Entry := 0
                        CalcMem := 0.00
                        Mcode=" "
                        Fcode=" "

                    else
                        Calcacc=calcacc/(entry+calcdec)

                    endif
             Case Upper( fcode ) = "R"
                calcacc = SQRT( calcacc )

         EndCase

        if inkey = 13
           nSetColor(oAmbiente:CorMenu)
           DevPos( nPos + 04, 51 ) ; DevOutPict( calcacc, "99999999999999.9999" )
            DevPos( nPos + 04, 69 ) ; DevOut( iif( inkey = 13, "T", code) )
            Scroll( nPos + 01, 46, nPos + 04, 69, 1 )
        endif

        endif
        dec=.F.
        if code="%"
          fcode=" "
        endif
        if inkey#13
          fcode=code
          entry=0
          calcdec=0
        endif
     Case Upper( code ) ="A"
        mcode="A"
     Case Upper( code ) ="M"
        mcode="M"
     Case Upper( code ) ="C" .AND. mcode = " "
        mcode="C"
     Case Upper( code ) ="C" .AND. mcode="A"
        accum=.T.
        calcacc=0
        calcdec=0
        entry=0
        calcmem=0.00
        mcode=" "
        fcode=" "
     Case Upper ( code ) ="C" .AND. Upper( mcode ) ="M"
        calcmem=0.00
        mcode=" "
     Case Upper( code ) = "E" .AND. Upper( mcode ) ="C"
        entry=0
        calcdec=0
        dec=.F.
        mcode=" "
        accum=.F.
        fcode=" "
     Case Upper( mcode ) ="C" .AND. inkey=13
        entry=0
        calcdec=0
        calcacc=0
        dec=.F.
        mcode=" "
        fcode=" "
        accum=.T.
     Case Upper( code ) ="R" .AND. Upper( mcode ) ="M"
        entry=calcmem
        accum=.F.
        dec=.F.
        mcode=" "
     Case code="-" .AND. Upper( mcode ) = "M"
        calcmem=calcmem-calcacc
        mcode=" "
        calcdec=0
        entry=0
        fcode=" "
        accum=.T.
     Case code="+" .AND. Upper( mcode ) ="M"
        calcmem=calcmem+calcacc
        mcode=" "
        calcdec=0
        entry=0
        fcode=" "
        accum=.T.
     Case Upper( code ) = "X"
         LETO_SET( 3, 2 )
         SetColor( cColor )
         ResTela( cScreen )
         __Keyboard( Chr( 25 ) + ltrim(rtrim(Str( CalcAcc ))) + Chr( 5 ) + Chr( 24 ) )
         return
     Case inkey = 27
         LETO_SET( 3, 2 )
         SetColor( cColor )
         ResTela( cScreen )
         return
     OtherWise
        ErrorBeep()
  EndCase
  enter=.F.
  if inkey=13
      enter=.T.
  endif


EndDo
LETO_SET( 3, 2 )
SetColor( cColor )
ResTela( cScreen )
return Nil

function Abre( nRow1, nCol1, nRow2, nCol2 )

LOCAL nMeio1 := Round(( nCol2 - nCol1 )  / 2,0)
LOCAL nMeio2 := Round(( nCol2 - nCol1 )  / 2,0)
SetColor("W+/B")
For _X := nMeio2 To nCol2
    Scroll( nRow1+1, nMeio1+1, nRow2-1, nMeio2, 0 )
    DispBox( nRow1, nMeio1, nRow2, nMeio2, 1 )
    nMeio1 := Iif( nMeio1 = nCol1, nMeio1, --nMeio1 )
    nMeio2 := Iif( nMeio2 = nCol2, nMeio1, ++nMeio2 )

Next
return Nil


function CabecRel( cNomefir, nTam, nPagina, cSistema, cRelatorio, cCabecalho )

Write(01 , 00, Padr( "Pagina N§ " + StrZero( nPagina, 3 ), ( nTam/2 ) ) + Padl( Time(), ( nTam/2 ) ) )
Write(02 , 00, Date() )
Write(03 , 00, Padc( cNomefir, nTam ) )
Write(04 , 00, Padc( cSistema, nTam ) )
Write(05 , 00, Padc( cRelatorio, nTam ) )
Write(06 , 00, Repl( "-", nTam ) )
Write(07 , 00, cCabecalho )
Write(08 , 00, Repl( "-", nTam ) )
return Nil

function Ascii()

LOCAL cScreen := SaveScreen()
Scroll(    01, 64, MaxRow()-4, 79 ) ; SetPos( 01, 64 )
DispBox( 01, 64, MaxRow()-4, 79, 2 )
DevPos(    01, 73 ) ; DevOut( CHR(209) )
DevPos(    02, 66 ) ; DevOut( "Numero "+CHR(179)+" Chr" )
DevPos(    03, 64 ) ; DevOut( CHR(204)+Repl(CHR(205),8)+CHR(216)+Repl(CHR(205),5)+CHR(185) )
DispBox( 04, 73, MaxRow()-5, 73, CHR(179) )
DevPos(    20, 73 ) ; DevOut( CHR(207) )
StatusInf("USE AS SETAS PARA MUDAR A TABELA ASCII", "ESC-RETORNA")
SetColor( "W,G+" )
H_T := " "
H_L := 4
H_C := 0
while H_T <> CHR(27)
    SetColor( "G+" )
    H_TEMP := H_C
    FOR H_L=4 TO 19
        DevPos( H_L, 68 ) ; DevOutPict( H_TEMP, "###" )
        DevPos( H_L, 76 ) ; DevOut( CHR(H_TEMP) )
        H_TEMP := H_TEMP+1

    NEXT
    H_L := 4
    SetColor( "W,G+" )
    H_T := " "
    WHILE AT(H_T,CHR(5)+CHR(24)+CHR(27))=0
        H_T := CHR(INKEY())

    EndDO
    Do Case
        Case H_T=CHR(05)
              H_C := H_C-16
              if H_C<0
                  H_C := 240
              endif
        Case H_T=CHR(24)
              H_C := H_C+16
              if H_C>240
                  H_C := 0
              endif
    ENDCase
ENDDO
RestScreen( cScreen )

function Calendario()

LOCAL cScreen := SaveScreen()

LOCAL Meses := {"JANEIRO","FEVEREIRO","MARO","ABRIL","MAIO","JUNHO", "JULHO","AGOSTO","SETEMBRO","OUTUBRO","NOVEMBRO","DEZEMBRO"}
LETO_SET( 4, iif( __SetCentury(), "dd/mm/yyyy", "dd/mm/yy" ) )
Scroll( 01, 51, 17, 79 ) ; SetPos( 01, 51 )
MaBox( 01, 51, 17, 79 )
Write( 03, 51, Chr( 195 ) + Repl( Chr( 196 ), 27 ) + Chr( 180 ) )
Write( 04, 52, "Dom Seg Ter Qua Qui Sex Sab" )
Write( 05, 51, Chr( 195 ) + Repl( Chr( 196 ), 27 ) + Chr( 180 ) )
StatusInf("USE AS SETAS PARA MUDAR O MES E ANO", "ESC-RETORNA")
SetColor( "W,G+" )
H_D := H_W := Date()
H_F := Chr( InKey())
WHILE H_F <> Chr( 27 )
      H_DIA := "1"
      H_NME := Month(H_D)
      H_ANO := Year(H_D)
      H_MESEX := MESES[H_NME]
      H_MESEX := H_MESEX+Space(9-Len( H_MESEX))
      DevPos( 02, 54 ) ; DevOutPict( H_DIA, "##" )
      DevPos( 02, 61 ) ; DevOut( H_MESEX )
      DevPos( 02, 74 ) ; DevOutPict( H_ANO, "####" )
      H_D := "01/"+LTRIM(STR(H_NME,2))+"/"+LTRIM(STR(H_ANO,4))
      H_D := CTOD(H_D)
      H_NSE := DOW(H_D)
      H_D := H_D-(H_NSE-1)
      H_L := 6
      H_C := 52
      FOR H_X=1 TO 42
          if Month(H_D)<>H_NME
              SetColor( "G+" )

            else
                SetColor( "W" )

            endif
            if H_D=H_W
                SetColor( "W+*" )

            endif
            DevPos( H_L, H_C ) ; DevOutPict( DAY(H_D), "###" )
            H_D := H_D+1
            H_C := H_C+4
            if H_C>78
                H_C := 52
                H_L := H_L+2

            endif
      NEXT
      H_D := "01/"+LTRIM(STR(H_NME,2))+"/"+LTRIM(STR(H_ANO,4))
      H_D := CTOD(H_D)
      SetColor( "W,G+" )
      H_F := " "
      while AT(H_F,Chr(5)+Chr(24)+Chr(19)+Chr(4)+Chr(27))=0
          H_F := Chr(INKEY())

      ENDDO
      if H_F=Chr(27)
          LOOP

      endif
      DO CASE
      CASE H_F=Chr(5)
          H_NME := H_NME+1
          if H_NME>12
              H_NME := 1
              H_ANO := H_ANO+1

          endif
          CASE H_F=Chr(24)
              H_NME := H_NME-1
              if H_NME<=0
                  H_NME := 12
                  H_ANO := H_ANO-1

              endif

          CASE H_F=Chr(19)
              H_ANO := H_ANO+1

          CASE H_F=Chr(4)
              H_ANO := H_ANO-1

          ENDCASE
          H_D := "01/"+LTRIM(STR(H_NME,2))+"/"+LTRIM(STR(H_ANO,4))
          H_D := CTOD(H_D)

      ENDDO
      RestScreen( cScreen )
      return Nil

function Ascan2( aArray, Variavel, PosElem )










_Tam := Len( aArray )
if( PosElem = NIL, PosElem := 1, PosElem )
For i := 1 To _Tam
    if aArray[ i, PosElem ] == Variavel
        return( i )
    endif
Next
return( 0 )

function Confirma( cString )

return( Alerta( cString , { " Sim ", " Nao " } ) )

function ErrorBeep(lOK)

IF lOk == NIL ; lOk := .F. ; END


if lOk
   Tone(  500, 1 )


else
   Tone(  300, 1 )


endif



return Nil

function Escolhe

Param Col1, Lin1, Col2, Nome_Campo, Cabecalho, aRotina, lExcecao, aRotinaAlteracao, aRotinaExclusao, lLimpaTela, lDbSeek
LOCAL GetList := {}
LOCAL _Atela  := SaveScreen()
LOCAL _corant := SetColor()
LOCAL Arq_Ant := Alias()
LOCAL Ind_Ant := IndexOrd()
LOCAL nMaxCol := MaxCol()
LOCAL _Tam
LOCAL Lin2
LOCAL nRecno
        cCampo  := Nome_Campo
      Col2    := if( Col2 == 22, (MaxRow()-2), Col2)
      nCol    := Col2
        nLin      := Lin1+1
PRIVA aScroll

if ValType( Nome_Campo ) <> "A"
    Cabecalho := Iif( Cabecalho = Nil, "", Cabecalho )
    if ValType( &Nome_Campo ) = "D"
        Lin2 := Lin1 + 9
    else
        nTam := Len( &Nome_Campo. )
        nCab := Len( Cabecalho )
        Lin2 := Iif( nTam >= nCab, nTam + ( Lin1 + 1 ), nCab + ( Lin1 + 1 ) )
    endif
    _Vetor1 := { Nome_Campo }
    _Vetor2 := { if ( Cabecalho = Nil, Cabecalho := .T. , Cabecalho := Upper( Cabecalho ) ) }
   if Lin2 >= nMaxCol
      Lin2 := nMaxCol
    endif
else
    _Vetor1 := Nome_Campo
    _Vetor2 := Cabecalho
    Lin2      := 70
endif
if lLimpaTela = NIL .OR. lLimpatela = .T.
    oMenu:Limpa()
endif
MaBox( Col1, Lin1,    Col2, Lin2+2, )
MaBox( Col1, Lin1+2, Col2, Lin2+2, )
Print( Col1, Lin1+2, SubStr( oAmbiente:Frame, 1, 1 ), Cor())
Print( Col2, Lin1+2, SubStr( oAmbiente:Frame, 5, 1 ), Cor())

if aRotina <> NIL
    if Alias() = "LISTA"
        if aRotinaAlteracao <> NIL
            Print( Col2, Lin1+3, "INS _Incluir³DEL _Excluir³F2 _Cod Fabr³CTRL+ENTER _Alterar", Cor( 5 ), Lin2 - (Lin1+1))
        else
            Print( Col2, Lin1+3, "INS _Incluir³DEL _Excluir³F2 _Cod Fabr", Cor( 5 ), Lin2 - (Lin1+1))
        endif
    else
        if aRotinaAlteracao <> NIL
            Print( Col2, Lin1+3, "INS _Incluir³DEL _Excluir³F2 _Filtro³CTRL+ENTER _Alterar", Cor( 5 ), Lin2 - (Lin1+1))
        else
            Print( Col2, Lin1+3, "INS _Incluir³DEL _Excluir³F2 _Filtro³", Cor( 5 ), Lin2 - (Lin1+1))
        endif
    endif
endif
if lDbSeek <> NIL
    nRecno := Recno()
endif
DbGoTop()
if Eof()
    if aRotina <> NIL
        if Conf("Arquivo Vazio. Deseja Incluir Registros ?")
            Eval( aRotina[1])
            AreaAnt( Arq_Ant, Ind_Ant )
        endif
    endif
endif
if lDbSeek <> NIL
    DbGoto( nRecno )
endif
ScrollBarDisplay( aScroll := ScrollBarNew( Col1+1, Lin1+1, Col2-1, Roloc(Cor()),1))
DbEdit((Col1+1), (Lin1+3), (Col2-1), (Lin2+1), _Vetor1, "MS_DbUser", .T., _Vetor2 )
ResTela( _Atela )
SetColor(_corant )
return( .T. )

function MS_DbUser( Modo, Ponteiro , Var)

LOCAL GetList        := {}
LOCAL cScreen        := SaveScreen()
LOCAL Key            := LastKey()
LOCAL Arq_Ant        := Alias()
LOCAL Ind_Ant        := IndexOrd()
LOCAL cN_Original := Space(15)
STATI nPosicao     := 1
LOCAL nLastrec     := Lastrec()
LOCAL Registro
LOCAL Salva_tela
LOCAL lInativos    := oIni:ReadBool("sistema", "MostrarClientesInativos", .F. )

ScrollBarUpdate( aScroll, Recno(), Lastrec(), .T. )
Do Case
    Case Key = -1
        if Alias() = "LISTA"
            oMenu:Limpa()
            MaBox( 10, 10, 12, 48 )
            SetCursor(1) ; DevPos( 11, 11 ) ; DevOut( "Codigo Fabricante..." ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( cN_Original, "cN_Original", "@!", {|| CodiOriginal( @cN_Original )},))
            ReadModal( GetList, NIL,,,,, ) ; GetList := {} ; ( GetList )
            if LastKey() = 27
                ResTela( cScreen )
                return(1)
            endif
            ResTela( cScreen )
        else
            if Alias() = "RECEBER"
                oMenu:Limpa()
                ClientesFiltro()
                ResTela( cScreen )
            endif
        endif
        AreaAnt( Arq_Ant, Ind_Ant )
        return(1)

    Case Key = 22
        if aRotina <> Nil
            if PodeIncluir()
                Eval( aRotina[1])
            else
                if lExcecao <> Nil
                    Eval( aRotina[1])
                endif
            endif
        endif
        AreaAnt( Arq_Ant, Ind_Ant )
        return(1)

    Case Key = 10
        if !(aRotinaAlteracao == NIL )
            if PodeAlterar() .OR. !(lExcecao == NIL)
               Eval( aRotinaAlteracao[1])
            endif
        endif
        AreaAnt( Arq_Ant, Ind_Ant )
        return(1)

    Case Key = 7
        if aRotina <> Nil
            if PodeExcluir()
                if aRotinaExclusao <> NIL
                    if !Eval( aRotinaExclusao[1] )
                        return(1)
                    endif
                endif
                ErrorBeep()
                if Conf("Pergunta: Excluir Registro sob o Cursor ?")
                    if TravaReg()
                        DbDelete()
                        Libera()
                      __Keyboard( Chr( 31 ) )
                    endif
                endif
            endif
        endif
        return(1)

    Case Modo < 4
        return(1)

    Case LastKey() = 27
        nPosicao := 1
        return(0)

    Case LastKey() = 13
        return(0)

    Case LastKey() >= 48 .AND. LastKey() <= 122
        if   ValType( cCampo ) = "C"
            xVar := Upper(Chr(Key))
            xVar := xVar + Space( nTam - Len( xVar))
            __Keyboard( (Chr(4)) )
            SetCursor(1) ; SetPos( nCol-1, nLin+2 ) ; AAdd( GetList, _GET_( xVar, "xVar", "@!",,))
            ReadModal( GetList, NIL,,,,, ) ; GetList := {} ; ( GetList )

        elseif ValType( cCampo ) = "N"
            if nKey < Chr(48) .OR. nKey > Chr(57)
                return(1)
            endif
            xVar := Chr(nKey)
            __Keyboard( (Chr(4)) )
            SetCursor(1) ; SetPos( nCol-1, nLin+2 ) ; AAdd( GetList, _GET_( xVar, "xVar",,,))
            ReadModal( GetList, NIL,,,,, ) ; GetList := {} ; ( GetList )

        elseif ValType( cCampo ) = "D"
            xVar := Date()
            SetCursor(1) ; SetPos( nCol-1, nLin+2 ) ; AAdd( GetList, _GET_( xVar, "xVar", "##/##/##",,))
            ReadModal( GetList, NIL,,,,, ) ; GetList := {} ; ( GetList )
        endif
        if LasTKey() = 27
            ResTela( cScreen )
            return(1)
        endif
        xVar := Iif( ValType( cCampo ) = "C", ltrim(rtrim(xVar)), xVar)
        ResTela( cScreen )
        DbSeek( xVar )
        return(1)

    OTHERWISE
        if Alias() = "RECEBER"
            if lInativos
                if Receber->Cancelada
                    Receber->(DbSkip(1))
                endif
            endif
        endif
        return(1)

ENDCASE
return(1)

function Order( Ordem )

Iif( Ordem = Nil , Ordem := 0,  Ordem )
DbSetOrder( Ordem )
DbGoTo( Recno())
return( IndexOrd())

function FPrint( cString )

return( DevOut( cString ) )

Proc WriteBox( Linha, Col, xString, nCor )

Iif( Linha     = Nil, Linha     := Row(), Linha )
Iif( Col      = Nil, Col      := Col(), Col )
Iif( xString = Nil, xString := "",    xString )
Iif( nCor     = Nil, nCor     := CorBoxCima(), nCor )
Print( Linha, Col, xString, nCor )
return


function TestaCgc( Var )

LOCAL Matriz[12]
LOCAL i
LOCAL Df1
LOCAL Df2
LOCAL Df3
LOCAL nTam := 0

if ValType( Var ) = "N"
    Var := CpfCgcIntToStr( Var )
    nTam := Len( Var )
    if nTam <= 14
        return( TestaCpf( Var ) )
    endif
endif














if !Empty( Var ) .AND. Len( Var ) < 18
     ErrorBeep()
     Alerta("CGC Incorreto... Verifique." )
     return(.F.)
endif
Var1 := StrTran( Var,  ".")
Var1 := StrTran( Var1, "/")
Var1 := StrTran( Var1, "-")
For I = 1 To 12
    Matriz[i] := Val( SubStr( Var1, I, 1))
Next




Df1 := 5 * Matriz[1] + 4 * Matriz[2] + 3 * Matriz[3] + 2 * Matriz[4] + 9 * Matriz[5] +  8 * Matriz[6] + 7 * Matriz[7] + 6 * Matriz[8] + 5 * Matriz[9] + 4 * Matriz[10] +  3 * Matriz[11] + 2 * Matriz[12]
Df2 := Df1 / 11
Df3 = Int( Df2 ) * 11
Resto1 := ( Df1- df3 )
if Resto1 = 0 .OR. Resto1 = 1
  Pridig := 0
else
  Pridig := ( 11 - Resto1 )
endif




DF1 := 6 * Matriz[1] + 5 * Matriz[2] + 4 * Matriz[3] + 3 * Matriz[4] + 2 * Matriz[5] +  9 * Matriz[6] + 8 * Matriz[7] + 7 * Matriz[8] + 6 * Matriz[9] + 5 * Matriz[10] +  4 * Matriz[11] + 3 * Matriz[12] + 2 * Pridig
Df2 := ( Df1/11 )
Df3 := Int( Df2 ) * 11
Resto2 := ( Df1 - Df3)
if Resto2 = 0 .OR. Resto2 = 1
  SegDig := 0
else
  SegDig := (11 - Resto2)
endif
if Pridig <> Val( SubStr( Var1,13,1)) .OR. SegDig <> Val( SubStr( Var1,14,1))
     ErrorBeep()
     Alerta("CGC Incorreto... Verifique." )
     return(.F.)
else
    return(.T.)
endif

function DataExtenso( dData )

LOCAL cString := ""
LOCAL nMes
LOCAL aMes
LOCAL aDia
LOCAL nDia
LOCAL aDecada
LOCAL nDecada
LOCAL aAno
LOCAL nAno
LOCAL aSeculo
LOCAL nSeculo
LOCAL nMenor
LOCAL nMaior
LOCAL aDecimal
LOCAL cAno
LOCAL cDia
LOCAL cMes
LOCAL cDecada
LOCAL cSeculo


aMes        := {"janeiro","fevereiro","marco","abril","maio","junho", "julho","agosto","setembro","outubro","novembro","dezembro" }

aDia        := {"primeiro", "segundo", "terceiro", "quarto", "quinto", "sexto", "setimo", "oitavo", "nono", "decimo"}
aDecimal := {"decimo", "vigesimo", "trigesimo" }
aSeculo    := {"um mil novecentos ", "dois mil " }
aDecada    := {"dez ","vinte ","trinta ","quarenta ","cinquenta ","sescenta ","setenta ","oitenta ","noventa "}
aAno        := {"um","dois","tres","quatro","cinco","seis","sete","oito","nove" }

nSeculo    := Val( Left( StrZero( Year( dData ), 4),1))
nDecada    := Val( SubStr( StrZero( Year( dData ), 4), 3,1))
nAno        := Val( Right( StrZero( Year( dData ), 4),1))
nDia        := Day( dData )
nMes        := Month( dData)
cAno        := StrZero( nAno, 4)
cDia        := StrZero( nDia, 2 )
nMenor    := Val( Left( cDia, 1 ))
nMaior    := Val( Right( cDia, 1 ))
cMes        := aMes[ nMes ]

if nMenor > 0
    cString := aDecimal[nMenor] + " "
endif
if nDecada = 0
    cDecada := ""
else
    cDecada := "e " + aDecada[nDecada]
endif
if nAno = 0
    cAno := ""
else
    cAno := "e " + aAno[nAno]
endif
cSeculo := aSeculo[nSeculo]
cString += Iif( nMaior = 0, "", aDia[nMaior] + " " )
cString += "dia do mes de "
cString += cMes
cString += " do ano "
cString += cSeculo
cString += cDecada
cString += cAno
return( cString )


function DataExt1( dData )

LOCAL Mes
LOCAL MesExt

if dData = NIL .OR. ValType( dData ) <> "D"
    dData := Date()
endif
Mes     := Month( dData)

MesExt := {"Janeiro","Fevereiro","Marco","Abril","Maio","Junho", "Julho","Agosto","Setembro","Outubro","Novembro","Dezembro" }
return( StrZero( Day( dData ), 2 ) + " de "+ MesExt[ Mes ] +" de "+ Str(Year( dData ),4 ))

function Mes( dData )

LOCAL Mes
LOCAL MesExt

if dData = NIL
    dData := Date()
    Mes    := Month( dData)
elseif ValType( dData ) = "D"
    Mes := Month( dData)
elseif ValType( dData ) = "N"
    Mes := dData
else
    dData := Date()
    Mes    := Month( dData)
endif

MesExt := { "Janeiro","Fevereiro","Marco","Abril","Maio","Junho",    "Julho","Agosto","Setembro","Outubro","Novembro","Dezembro" }
return( MesExt[ Mes ] )

function DataExt2( dData )

LOCAL Mes, MesExt, Dia

if dData = NIL .OR. ValType( dData ) <> "D"
    dData := Date()
endif
Mes     := Month( dData)











MesExt := { { "Janeiro"  , 07 },    { "Fevereiro", 05 },    { "Maro"    , 09 },    { "Abril"    , 09 },    { "Maio"     , 10 },    { "Junho"    , 09 },    { "Julho"    , 09 },    { "Agosto"   , 08 },    { "Setembro" , 06 },    { "Outubro"  , 07 },    { "Novembro" , 06 },    { "Dezembro" , 06 }}































Dia     := { "Primeiro ", "Dois "    , "Trs "    , "Quatro "  , "Cinco "   , "Seis "    , "Sete "    , "Oito "    , "Nove "    , "Dez "     , "Onze "    , "Doze "    , "Trez "    , "Quatorze "    , "Quinze "    , "Dezesseis "    , "Dezessete "    , "Dezoito "    , "Dezenove "    , "Vinte "    , "Vinte e um "    , "Vinte e dois "    , "Vinte e trs "    , "Vinte e quatro "    , "Vinte e cinco "    , "Vinte e seis "    , "Vinte e sete "    , "Vinte e oito "    , "Vinte e nove "    , "Trinta "    , "Trinta e um "}

return( Dia[ Day( dData ) ] + "de " + MesExt[ Mes,1 ] + " de " + Str( Year( dData ),4))

function Crontab(pH1)

LOCAL ph         := {}
LOCAL cEmpresa   := oAmbiente:_EMPRESA
LOCAL nTarefas   := oIni:ReadInteger("crontab","tarefas", 0 )
LOCAL aHoraCerta := {}
LOCAL nY         := 0
LOCAL pRow
LOCAL pCol
LOCAL cComando
LOCAL oBloco
LOCAL cMinutos
LOCAL cHoras
LOCAL cDiaMes
LOCAL cMes
LOCAL cDiaSemana
LOCAL cUsuario
LOCAL aHora
LOCAL lAtivo
STATIC nConta           := 0
STATIC lTarefaConcluida := .F.












































hb_gcAll()

aHora          := ft_elapsed(,, oAmbiente:Clock, Time())
nRetval        := aHora[4 , 2]

if nRetval >= 1
    pRow := Row()
    pCol := Col()
    write( 00 , MaxCol()-17, Dtoc(Date()) + " " + (oAmbiente:Clock := Time()), omenu:corcabec)
    DevPos( pRow, pCol)

endif

if nTarefas <= 0
   return nil
endif

if lTarefaConcluida
    return nil
endif
hb_idleState()

for nY := 1 to nTarefas
   lAtivo := oIni:ReadBool(StrZero(nY,2) + "-crontab","ativo", .T. )
    if !lAtivo
        loop
    endif

    cComando   := oIni:ReadString(StrZero(nY,2) + "-crontab","comando", NIL)
    cMinutos   := oIni:ReadString(StrZero(nY,2) + "-crontab","minutos", "0" )
    cHoras     := oIni:ReadString(StrZero(nY,2) + "-crontab","horas", "*" )
    cDiaMes    := oIni:ReadString(StrZero(nY,2) + "-crontab","diames", "*" )
    cMes       := oIni:ReadString(StrZero(nY,2) + "-crontab","mes", "*" )
    cDiaSemana := oIni:ReadString(StrZero(nY,2) + "-crontab","diasemana", "*" )
    if cComando <> NIL
       if cDiaSemana <> "*"
           nDiaSemanaAtual := Dow(Date())
            if StrZero(nDiaSemanaAtual,1) <> cDiaSemana
               Loop
            endif
        endif

        if cMes <> "*"
            nMesAtual := Month(Date())
            if StrZero(nMesAtual,2) <> StrZero(Val(cMes),2)
               Loop
            endif
        endif

        if cDiaMes <> "*"
            nDiaMesAtual := Day(Date())
            if StrZero(nDiaMesAtual,2) <> StrZero(Val(cDiaMes),2)
               Loop
            endif
        endif

        if cHoras <> "*"
            cHorasAtual := SUBSTR(TIME(), 1, 2)
            if cHorasAtual <> cHoras
               Loop
            endif
        endif
        if !cMinutos == "*"
           if Left(cMinutos, 2) == "*/"
               cFracaoMinutos := SubStr(ltrim(rtrim(cMinutos)), 3, 2)
                cTimeNow       := Time()
                aHora          := ft_elapsed(,, oAmbiente:HoraCerta[nY], cTimeNow)
                nRetval        := aHora[3 , 1]
                if nRetval < val(cFracaoMinutos)
                   loop
                endif
                oAmbiente:TarefaConcluida[nY] := .F.
                oAmbiente:HoraCerta[nY]       := Time()
            else
                cMinutoAtual := SUBSTR(TIME(), 4,5)
                if !cMinutoAtual == cMinutos + ":00"
                    Loop
                endif




            endif
        endif





        oMenu:ContaReg( "CRONTAB # " + Strzero(++nConta,7))
        oIni:WriteString(StrZero(nY,2) + "-crontab","ativo", lAtivo)
        oIni:WriteString(StrZero(nY,2) + "-crontab","dataultimatarefa", Tran(Date(), "@D"))
        oIni:WriteString(StrZero(nY,2) + "-crontab","horaultimatarefa", Time())
        Do(cComando, .T.)
    endif
next
SetCursor(1)
return nil

function Clock(row,col)

LOCAL ph1
Iif( row = Nil , row := Row(), row )
Iif( col = Nil , col := Col(), col )


return( Dtoc(Date()) + " " + Time())

function IdleCriaIndice(nHandle)

LOCAL ph1
oIndice:Compactar    := .F.
oIndice:ProgressoNtx := .F.
CriaIndice()

hb_idleDel( nHandle )
return NIL

function IdleDeletaArquivosTemporarios()

LOCAL ph1
pH1 := hb_idleAdd( {|| ExcluirTemporarios()})
hb_idleDel( pH1 )
return NIL

function F_Fim( Texto )

    LOCAL cMicrobras := oAmbiente:xProgramador
                  Texto := Iif( Texto = NIL, "MICROBRAS", Texto )

    SetColor("")
    Scroll() ; SetPos( 0, 0 )
    Alert( Texto + ";;Copyright (C)1992," + Str(Year(Date()),4) + ";" + cMicrobras + ";;Todos Direitos;Reservados", "W+/G")
    return


function StaTusInf( XNOMEFIR, Msg, Color )

    LOCAL nCol    := MaxRow()
    LOCAL Tam    := MaxCol()
    IF Msg == NIL ; Msg := "" ; END
    IF Color == NIL ; Color := Cor(2) ; END

    aPrint( nCol, 00, Msg, Color, MaxCol() )
    Pos := ( Tam - Len( XNOMEFIR ) )
    aPrint( nCol, Pos, XNOMEFIR, Color )
    return Nil


function StaTusSup( Msg, Color )
    LOCAL Tam    := MaxCol()
            Msg    := Iif( Msg = Nil, "", Msg )
            Color := Iif( Color = Nil, Cor(2), Color )
    Print( 00, 00, Padc( Msg, Tam ) , Color, Tam )
    Print( 00, (Tam-8), Clock( 00, (Tam-8), Color ), Color )
    return Nil


function Seta1( Row, Col )
    LOCAL cString := "Use as Setas " + Chr( 27 ) + Chr( 24 ) + Chr( 25 ) + Chr( 26 )
    LOCAL nLen      := Len( cString )

    Row := Iif( Row = NIL, MaxRow()-5, Row )
    Col := Iif( Col = NIL, ((MaxCol()-nLen)/2), Col )
    Write( Row, Col,    cString )
    return( nil )


function Ponto(cCampo, nTamanho)






    return(ltrim(rtrim(cCampo)) + replicate(".", nTamanho - Len(ltrim(rtrim(cCampo)))))


function Mensagem( String, Color, nLine, nCol, centralizar )
    LOCAL cScreen := SaveScreen()
    LOCAL pstrlen := len(string) + 6
    LOCAL nlinhas := GT_StrCount(";", string)
    LOCAL cFundo  := 112
    LOCAL pBack
    LOCAL Row
    LOCAL Col
    LOCAL Col2
    LOCAL nOk := .F.

    __DefaultNIL(@centralizar, .F.)
    __DefaultNIL(@color, oAmbiente:CorMsg)
    Do case
        case nLine == nil .AND. nLinhas = 0
            String := SISTEM_NA1 + ";-;" + String
            AlertaPy(string, Color, centralizar, nOK)
            return(cScreen)
        case nLine == nil .AND. nLinhas > 0
            String := SISTEM_NA1 + ";-;" + String
            AlertaPy(string, Color, centralizar, nOK)
            return( cScreen )
        case nLine <> nil .AND. nLinhas > 0
            AlertaPy(string, Color, centralizar, nOK)
            return(cScreen)
    endcase

    if oAmbiente:Visual
        MsgBox3D( String )
        return( cScreen )
    endif
    if nLine == Nil
        Row     := ((  MaxRow() + 1 ) / 2 ) - 2
        Col     := ((( MaxCol() + 1 ) - PstrLen ) ) / 2
        Col2     := ((( MaxCol() + 1 ) / 2 ) - 10 )
    else
        Row     := nLine
        if nCol == NIL
            Col     := ((( MaxCol() + 1 ) - PstrLen ) ) / 2
            Col2     := ((( MaxCol() + 1 ) / 2 ) - 10 )
        else
            Col     := nCol
            Col2     := ((( MaxCol() + 1 ) / 2 ) - 10 )
        endif
    endif
    hb_default( @color, CorAlerta())






    ColorSet( @cFundo, @PBack )
    MS_Box( Row, Col, Row+4, Col+PstrLen, M_Frame() + " ", Color )
    Print( Row + 2, Col + 4, String, Color)
    return( cScreen )


function AlertPy(string, cor, centralizar, nOK, cOk)

    AlertaPy(string, cor, centralizar, nOK, cOk)
    return nil


function AlertaPy(string, cor, centralizar, lOK, aPrompt)

    LOCAL nlinhas := GT_StrCount(";", string)
    LOCAL aString := StrSplit( string, ";", -1)
    LOCAL nLen    := amaxstrlen( aString)
    LOCAL nPv     := 0
    LOCAL nSep    := 0
    LOCAL nRow
    LOCAL nCol
    LOCAL nRow1
    LOCAL nCol1

    __DefaultNIL(@cor, 31)
    __DefaultNIL(@centralizar, .F.)
    __DefaultNIL(@lOk, .T.)





    if aPrompt == nil .OR. len(aPrompt) == 0
        aPrompt := {" Ok "}
    endif


    for x := 1 To Len(aString)
        switch aString[x]
            case ";"; nPv++ ;    exit
            case "-"; nSep++;    exit
        endswitch
    next

    if nSep == 0
        string += ";-;"
        nlinhas := GT_StrCount(";", string)
        aString := StrSplit( string, ";", -1)
        nLen    := amaxstrlen( aString)
    endif

   if nLen < 6
        nLen = 6
    endif
    row     := (maxrow() / 2) - (nlinhas / 2) - 4
    col     := (maxcol() - nLen) / 2
    cScreen := SaveScreen()
    nrow    := row
    ncol    := (col-2)
    nrow1   := (row+4+nlinhas)
    ncol1   := (col+nLen+1)

    nTamPrompt := 0
    nLenaPrompt := Len(aPrompt)
    for k := 1 to nLenaPrompt
        nTamPrompt += Len(aPrompt[k])
    next

    center  := (maxcol()/2) - (nTamPrompt/2)




    setcursor(0)
    MS_Box(nrow, ncol, nrow1, ncol1, m_frame(), Cor)
    for x := 1 To Len(aString)
         cString := aString[x]
        if centralizar
            ncol := (maxcol() - len(cString)) / 2
        else
            ncol := col
          endif
          if cString == "-"
              LinhaHorizontal(row + 1, Col - 2, Col + nlen, cor)
          else
                aprint(row + 1, ncol, cString, cor)
          endif
        row := row + 1
     next
     if lOk
        if nLenaPrompt = 1
            aprint(row + 2, center, aPrompt[1], roloc(cor))
            inkey(0)
            restela(cScreen)
            return(cScreen)
        else

            return( nRetval := aChoice( row, Col, row + 4, Col + nLen, aPrompt))
        endif
     endif
     return(cScreen)

function Mens( String, Color, nLine )

    LOCAL cScreen := SaveScreen()
    LOCAL pstrlen := len(string) + 6
    LOCAL Row
    LOCAL Col
    LOCAL Col2

    if nLine = Nil
        Row     := ((  MaxRow() + 1 ) / 2 ) - 2
        Col     := ((( MaxCol() + 1 ) - PstrLen ) ) / 2
        Col2     := ((( MaxCol() + 1 ) / 2 ) - 10 )
    else
        Row     := nLine
        Col     := ((( MaxCol() + 1 ) - PstrLen ) ) / 2
        Col2     := ((( MaxCol() + 1 ) / 2 ) - 10 )
    endif
    MsBox( Row, Col, Row+4, Col+ PstrLen, Color, .F. )
    WriteBox( Row + 2, Col + 4, String )
    return cScreen

function Senha( _Col, _Linha, _Tpalavra )

LOCAL GetList := {}
LOCAL Letras  := Array( _Tpalavra )
LOCAL Pass
LOCAL nTecla
LOCAL T
LOCAL P

Afill( Letras, Space( 1 ) )
DevPos( _col, _linha ) ; DevOut( Space(_Tpalavra ) )
P := 1
while( .T. )
    DevPos( _Col, ( (_Linha -1 ) + P ) ) ; DevOut( "" )
    nTecla := Inkey(0)
    if nTecla = 0
        Loop

    elseif nTecla = 8 .AND. P > 1
        P--
        Letras[ P ] := Space( 1 )
        DevPos( _Col, ( ( _Linha - 1 ) + P ) ) ; DevOut( " " )
        Loop

    elseif nTecla = 13
        Exit

    elseif nTecla = 27
        Exit

    else
        Letras[ P ] := Upper( Chr( nTecla ) )
        DevPos( _Col,( ( _Linha -1 ) + P ) ) ; DevOut( "þ" )
        P++
        if P = _Tpalavra
            Exit

        endif

    endif
EndDo
Pass := ""
For T := 1 To _Tpalavra
  Pass := Pass + Letras[ T ]
Next
return pass

function Dc_Explode( _Srow, _Scol, _Erow, _Ecol, _Title, _Rodape, lInverterCor, _Slider, _Tone )

LOCAL _TsRow, _TsCol, _TeRow,  _TeCol, _xscrn, _a, _row, _step, _ccol,  _crow,  _buffer, _col

hb_default(@_Srow, 0)
hb_default(@_Scol, 0)
hb_default(@_Erow, MaxRow())
hb_default(@_ECol, MaxCol())
hb_default(@_Title, "")
hb_default(@_Rodape, "")
hb_default(@lInverterCor, .F.)
hb_default(@_Slider, 5)
hb_default(@_Tone, .F.)

_TsRow := _Srow + (_Erow-_Srow ) / 2
_TsCol := _Scol + (_Ecol-_Scol ) / 2
_TeRow := _TsRow
_TeCol := _TsCol



if _Slider > 0
  _Crow := Row()
  _Ccol := Col()
  _Step := Iif(_Crow > _TsRow, -1, 1 )
  For _Row := _Crow To _TsRow Step _Step
     _xScrn := SaveScreen()
     MaBox( _Row, _Ccol, _Row + 1, _Ccol + 3,,,lInverterCor )
     For _a := 1 To _Slider
     Next
     RestScreen(,,,, _xScrn)

  Next
  _Step := Iif( _Ccol > _TsCol, -5, 5 )
  For _Col := _Ccol To _TsCol STEP _Step
      _xScrn := SaveScreen()
      MaBox( _Row, _Col, _Row+1, _Col+3,,, lInverterCor )
     For _a := 1 TO _Slider * 2
     Next
     RestScreen(,,,, _xScrn )

  Next
endif



if _Erow < 24 .AND. _Scol > 1
  _xScrn := SaveScreen( _Srow, _Scol-2, _Erow+1, _Ecol )

else
  _xScrn := SaveScreen( _sRow,_sCol, _eRow, _eCol )

endif
if _Tone
  ErrorBeep()

endif
WHILE _TsCol > _Scol
  MaBox( _TsRow,_TsCol, _TeRow, _TeCol,,, lInverterCor )
  _TsCol -= 4
  _TeCol += 4
  _TsRow--
  _TeRow++
  if _TsRow < _Srow
     _TsRow := _Srow
     _TeRow := _Erow

  endif
  if _TsCol < _Scol
     _TsCol := _Scol
     _TeCol := _Ecol

  endif
EndDo
if _Tone
  ErrorBeep()

endif
if !Empty(_Title )
    MaBox( _Srow, _Scol, _Erow, _Ecol, _Title, _Rodape, lInverterCor )
else
  MaBox( _Srow, _Scol, _Erow, _Ecol,,, lInverterCor )
endif
return NIl

function TestaCpf( cCpf )

LOCAL cDig
LOCAL nNumero
LOCAL nMult
LOCAL nSoma
LOCAL nProd
LOCAL nNum
LOCAL nDig
LOCAL Digito
LOCAL Var1
LOCAL Var2
LOCAL Numero
LOCAL d1
LOCAL Dig
LOCAL Soma
LOCAL Num
LOCAL Mult
LOCAL Prod
LOCAL Conta

if !Empty( cCpf ) .AND. Len( cCpf ) < 14
     ErrorBeep()
     Alerta("Erro: CPF incorreto." )
     return(.F.)
endif
cCpf      := ltrim(rtrim(cCpf))
Digito  := Right( cCpf, 2 )
Var1      := StrTran( cCpf, "." )
Var2      := StrTran( Var1, "-" )
Numero  := Left( Var2, 9 )

Mult     := 1
Soma     := 0
Prod     := 0
Num     := 0
Dig     := 0
cDig     := ""
For Conta := Len( Numero ) To 1 Step -1
    Num := Val( SubStr( Numero, Conta, 1 ) )
    Mult++
    Soma += ( Num * Mult )
next
Dig := Mod( ( Soma * 10), 11 )
if Dig >= 10
    Dig := 0
endif
d1 := Dig
Numero = Left( Var2, 10 )
Mult     := 1
Soma     := 0
Dig     := 0
Prod     := 0
Num     := 0
For Conta := Len( Numero ) To 1 Step -1
    Num := Val( SubStr( Numero, Conta, 1 ) )
    Mult++
    Soma += ( Num * Mult )
next
Dig := Mod( ( Soma * 10), 11 )
if Dig >= 10
    Dig := 0
endif

if Val( Left( Digito, 1 ) ) <> d1 .OR. Val( Right( Digito, 1 ) ) <> Dig
    ErrorBeep()
    Alerta( "Erro: CPF invalido.")
    return(.F.)
endif
return(.T.)

function TamPagina( nTamanho )

    if XIMPRESSORA = 9 .OR. XIMPRESSORA = 10 .OR. XIMPRESSORA = 11
        return( Chr(27) + "&l" + StrZero( nTamanho, 3) + "P" )
    else
        return( Chr( 27 ) + "C" + Chr( nTamanho ) )
    endif


function EncerraDbf( cCampo, cName, nLine )

    SetColor("")
    Scroll() ; SetPos( 0, 0 )
    ErrorBeep()
    if cCampo = NIL
        Alert( "Erro #11: Configuracao de SCI.DBF alterada.;" + cName + ":" + StrZero( nLine, 6 ))
    else
        Alert( "Erro #11: Configuracao de SCI.DBF alterada.; Campo : " + cCampo )
    endif
    __Quit()
    return nil


function VerExe()

    LOCAL cExe := Upper(NomePrograma())

    if !( XNOME_EXE $ cExe)
        if (cExe == "SCI64.EXE")
            return nil
        endif
        SetColor("")
        Scroll() ; SetPos( 0, 0 )
        ErrorBeep()
        alert( "Erro #9: Favor renomear este aplicativo para : " + XNOME_EXE )
        __Quit()
    endif
    return nil


function NomePrograma()

    LOCAL cPrograma := HB_ProgName()
    LOCAL nPos      := Rat("\", cPrograma)
    LOCAL nLen      := Len( cPrograma)-nPos
    LOCAL cStr      := SubStr(cPrograma, nPos+1)
return(cStr)

function Hard( nPos, ProcName, ProcLine )

LOCAL cScreen := SaveScreen()
LOCAL cCodigo
LOCAL cSenha
LOCAL nCrc
LOCAL cCrc
LOCAL cData
LOCAL dData
LOCAL nSpaco
LOCAL nTemp
LOCAL cMens             := "Foi detectado um problema, Verifique as opcoes:"
LOCAL aMensagem        := Array(3,5)
        aMensagem[1,1] := "[Limite de Codigo de Acesso Vencido]"
        aMensagem[1,2] := "1 - A data do Sistema Operacional esta correta ?"
        aMensagem[1,3] := "2 - Caso Positivo, solicite novo Codigo de Acesso."
        aMensagem[1,4] := ""
        aMensagem[1,5] := ""

        aMensagem[2,1] := "[Verificacao de Copia Original]"
        aMensagem[2,2] := "1 - O SCI esta sendo instalado pela 1¦ vez ?"
        aMensagem[2,3] := "2 - Esta atualizando a versao do SCI ?"
        aMensagem[2,4] := "3 - Esta instalando um novo terminal ?"
        aMensagem[2,5] := "4 - Caso Positivo, solicite Codigo de Acesso."

        aMensagem[3,1] := "[Renovacao de Codigo de Acesso]"
        aMensagem[3,2] := "1 - Informe ao nosso suporte tecnico que est  sendo"
        aMensagem[3,3] := "    um pedido antecipado de codigo de acesso, e que"
        aMensagem[3,4] := "    o mesmo  de seu conhecimento.                 "
        aMensagem[3,5] := ""

if ProcName <> NIL
    cMens := ProcName + "(" + StrZero( ProcLine, 5 ) + "): " + cMens
endif
LETO_SET( 27, "On" )
oMenu:Limpa()
BoxConf( 00, 05, 24, 75 )
CenturyOn()
WHILE .T.
    nTemp := Val( StrTran( Time(), ":"))

    cCodigo := ""
    For nX := 1 To 5
        nNumero := Random()
        nNumero := ltrim(rtrim(Str( nNumero )))
        cCodigo += Left( nNumero, 2)
    Next
    ErrorBeep()
    SetColor("R/W")
    Write( 01, 06, cMens )
    SetColor("B/W")
    Write( 03, 06, aMensagem[nPos,1])
    SetColor("GR+/W")
    Write( 04, 06, aMensagem[nPos,2])
    Write( 05, 06, aMensagem[nPos,3])
    Write( 06, 06, aMensagem[nPos,4])
    Write( 07, 06, aMensagem[nPos,5])
    SetColor("N/W")
    Write( 09, 06, "Sr. Usuario, ligue para o Depto. de Suporte ao Usuario atraves do" )
    Write( 10, 06, "Tel (69)3451-3085 e informe os dados apresentados abaixo:")
    cInterno := Left( cCodigo,3 ) + "." + SubStr( cCodigo, 4, 3 ) + "." + Right( cCodigo, 4 )
    Write( 12, 06, "Nome do Registro....: " + XNOMEFIR )
    Write( 13, 06, "Nome do Aplicativo..: " + SISTEM_NA1 )
    Write( 14, 06, "Versao..............: " + SISTEM_VERSAO )
    Write( 15, 06, "Codigo Interno......: " )
    DevPos( 15, 28 ) ; DevOut( cInterno, "R/W" )

    Write( 17, 06, "O Depto. de Suporte ira lhe informar um codigo de acesso para libe-")
    Write( 18, 06, "racao imediata do sistema, o qual devera ser digitado abaixo:")


    DevPos( 22, 06 ) ; DevOut( "IMPORTANTE: Nao tecle ENTER ou saia antes de ter o codigo de acesso,", "R/W" )
    DevPos( 23, 06 ) ; DevOut( "pois o codigo interno se modificara novamente.", "R/W" )

    LETO_SET( 4, iif( __SetCentury(), "dd/mm/yyyy", "dd/mm/yy" ) )
    dDatados := Date()
    cSenha    := Space(13)
    SetCursor(1) ; DevPos( 20, 06 ) ; DevOut( "Codigo de Acesso...:" ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( cSenha, "cSenha", "@R 999.999.999.999.9", {|| Right( cSenha, 3) <> "000"},))
    SetCursor(1) ; DevPos( 20, 45 ) ; DevOut( "Data Atual..:" ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( dDatados, "dDatados", "##/##/##",,))
    ReadModal( GetList, NIL,,,,, ) ; GetList := {} ; ( GetList )

    if LastKey() = 27
        if nPos <> 3
            Scroll() ; SetPos( 0, 0 )
            __Quit()
        else
            CenturyOff()
            return
        endif
    endif
    nCrc := 0
    For nX := 1 To 10
        nCrc += Val( SubStr( cSenha, nX,1)) * Val( SubStr( cSenha, nX, 1)) + Val( SubStr( cCodigo, nX,1))
    Next
    cCrc := Right(StrZero( nCrc, 10),3)
    if cCrc <> Right( cSenha, 3 )
        ErrorBeep()
        Alert("Erro : O Codigo de Acesso inv lido. Solicite Novamente.")
        Loop
    endif
    LETO_SET( 4, iif( __SetCentury(), "mm-dd-yyyy", "mm-dd-yy" ) )
    cDataDos := Dtoc( dDataDos )
    cData     := SubStr( cSenha, 3, 2 ) + "/" + Left( cSenha, 2) + "/" + SubStr( cSenha, 5, 2 )
    dData     := Dtoc( Ctod( cData ))
    LETO_SET( 7, ( oAmbiente:xBase ) )
    if !File( "SCI.DBF" )
        SetColor("")
        Scroll() ; SetPos( 0, 0 )
        ErrorBeep()
        Alert( oAmbiente:xBase )
        Alert( "Erro: Arquivo SCI.DBF nao localizado.")
        __Quit()
    endif
    if !NetUse( "SCI.DBF", .T. )
        SetColor("")
        Scroll() ; SetPos( 0, 0 )
        ErrorBeep()
        Alert("Erro: Impossivel abrir SCI.DBF.")
        __Quit()
    endif

    oAmbiente:xDataCodigo := dData
    cDia := SubStr( oAmbiente:xDataCodigo, 4, 2 )
    cMes := Left(    oAmbiente:xDataCodigo, 2 )
    cAno := Right( oAmbiente:xDataCodigo, 4 )
    oAmbiente:xDataCodigo := cDia + "/" + cMes + "/" + cAno
    CopyCria()
    if Sci->(TravaArq())
        Sci->Limite   := MsEncrypt( dData )
        Sci->(Libera())
        Sci->(DbCloseArea())
    else
        if nPos <> 3
            Scroll() ; SetPos( 0, 0 )
            __Quit()
        endif
    endif
    LETO_SET( 7, ( oAmbiente:xBaseDados ) )
    ResTela( cScreen )
    Exit
EndDo
CenturyOff()
LETO_SET( 27, "Off" )
return

function Cod_Acesso( cCodigo, GetList )

LOCAL Data_Limite
LOCAL cExecucoes

    CenturyOff()

    cExecucoes     := Right( StrTran( Time(), ":"),2)
    cExecucoes     += Right( StrTran( Time(), ":"),2)
    cData_Limite := StrTran( Dtoc( Date()+15), "/" )
    cSenha         := cData_Limite + cExecucoes


    nCrc := 0
    nX   := 0
    For nX := 1 To 10


        nCrc += Val( SubStr( cSenha,    nX, 1 )) *  Val( SubStr( cSenha,    nX, 1 )) +  Val( SubStr( cCodigo, nX, 1 ))
    Next
    cCrc     := Right( StrZero( nCrc, 10),3)
    cSenha += cCrc
    cSenha := Tran( cSenha, "@R 999.999.999.999.9")
    Getlist[1]:buffer  := cSenha
    Getlist[1]:Changed := .T.
    Getlist[1]:Assign()
    Getlist[1]:Reset()
    Getlist[1]:Display()
    Getlist[1]:ExitState := 5
    CenturyOn()
    return

function HoraSaida( HR_ENTRADA, HR_SAIDA )

LOCAL cStartTime := HR_ENTRADA
LOCAL cTempo      := StrTran( TimeDiff( cStartTime, Time()), ":")

if !NetUse("SCI", .T. )
    EncerraDbf(, ProcName(), ProcLine())
endif
if Sci->(TravaReg())
    Sci->Time += Val( cTempo )
    Sci->(Libera())
    Sci->(DbCloseArea())
else
    Scroll() ; SetPos( 0, 0 )
    __Quit()
endif



















function ScrollBarNew( nTopRow, nTopColumn, nBottomRow, cColorString, nInitPosition )

    LOCAL aScrollBar := ARRAY( 6 )

    aScrollBar[ 1 ]     := nTopRow
    aScrollBar[ 2 ]     := nTopColumn
    aScrollBar[ 3 ] := nBottomRow
    aScrollBar[ 4 ] := nTopColumn

    if cColorString == NIL
        cColorString := "W/N"
    endif
    aScrollBar[ 5 ] := cColorString

    if nInitPosition == NIL
        nInitPosition := 1
    endif
    aScrollBar[ 6 ] := nInitPosition

    return ( aScrollBar )

function ScrollBarDisplay( aScrollBar )

LOCAL cOldColor
LOCAL nRow

cOldColor := SETCOLOR( aScrollBar[ 5 ] )
DevPos( aScrollBar[ 1 ], aScrollBar[ 2 ] ) ; DevOut( CHR(  24 ) )
DevPos( aScrollBar[ 3 ], aScrollBar[ 4 ] ) ; DevOut( CHR(  25 ) )

FOR nRow := (aScrollBar[ 1 ] + 1) TO (aScrollBar[ 3 ] - 1)
    DevPos( nRow, aScrollBar[ 2 ] ) ; DevOut( CHR( 176 ) )
NEXT
SETCOLOR( cOldColor )
return ( aScrollBar )

function ScrollBarUpdate( aScrollBar, nCurrent, nTotal, lForceUpdate )

LOCAL cOldColor
LOCAL nNewPosition
LOCAL nScrollHeight := ( aScrollBar[3] - 1 ) - ( aScrollBar[1] )

if nTotal < 1
    nTotal := 1
endif

if nCurrent < 1
    nCurrent := 1
endif

if nCurrent > nTotal
    nCurrent := nTotal
endif

if lForceUpdate == NIL
    lForceUpdate := .F.
endif

cOldColor := SETCOLOR( aScrollBar[ 5 ] )

nNewPosition := ROUND( (nCurrent / nTotal) * nScrollHeight, 0 )

nNewPosition := Iif( nNewPosition < 1, 1, nNewPosition )
nNewPosition := Iif( nCurrent == 1, 1, nNewPosition )
nNewPosition := Iif( nCurrent >= nTotal, nScrollHeight, nNewPosition )

if nNewPosition <> aScrollBar[ 6 ] .OR. lForceUpdate
    DevPos( (aScrollBar[ 6 ] + aScrollBar[ 1 ]), aScrollBar[ 2 ] ) ; DevOut( CHR( 176 ) )
    DevPos( (nNewPosition + aScrollBar[ 1 ]), aScrollBar[ 2 ] ) ; DevOut( CHR( 178 ) )
    aScrollBar[ 6 ] := nNewPosition
endif
SETCOLOR( cOldColor )
return ( aScrollBar )

function Criptar( Pal )

LOCAL Fra, X, L
Fra := ""
Tam := Len( Pal )
FOR X := 1 TO Tam
     L := SubStr(Pal, X, 1)
     Fra += Chr(Asc(L) + 61 - 2 * X + 3 * x )
NEXT
return Fra

function DCriptar( Pal )

LOCAL Fra, X, L, Tam
Fra := ""
Tam := Len( Pal )
FOR X := 1 TO Tam
     L := SubStr(Pal, X, 1)
     Fra += Chr(Asc(L) - 61 + 2 * X - 3 * x )
NEXT
return Fra

function M_Menu( ativo, Arg2, Arg3, Arg4, aMensagem )

LOCAL Local1[Len(Arg2)]
LOCAL Local2[Len(Arg2)]
LOCAL Local3[Len(Arg2)]
LOCAL Local4  := {}
LOCAL Local5  := {}
LOCAL Local6  := {}
LOCAL Local7  := 1
LOCAL Local8  := 1
LOCAL Local9  := 2
LOCAL Local10 := .F.
LOCAL Local11 := M_Frame()
LOCAL x
LOCAL nLenArray
LOCAL Local14
LOCAL Local15
LOCAL Local16
LOCAL Local17
LOCAL Local18

Arg4        := Iif( Arg4 = Nil, 0, Arg4 )
Local17   := Int(ativo)
Local18   := Iif( Arg3 == Nil, ColorStandard(), Arg3 )
nLenArray := Len(Arg2)
Afill(Local2, Arg4)
Local3[ 1 ] := 1


Aprint(Arg4, 0, "", Local18, MaxCol() + 1)
Local1[ 1 ] := Strextract(Arg2[ 1 ], ":", 1)
Aprint(Arg4, 1, Local1[ 1 ], Local18)
FOR x := 2 TO nLenArray
     Local1[ x ] := Strextract(Arg2[ x ], ":", 1)
     Local3[ x ] := Local3[ x - 1 ] + ( Aprintlen(Local1[ x - 1 ]) + 1 )
     Aprint(Arg4, Local3[ x ], Local1[ x ], Local18)
NEXT
Local9 := Aprintlen(Local1[ x - 1 ])

WHILE ( .T. )
     Local7 := M_Aprompt(.F., Local17, Local2, Local3, Local1, Local18, aMensagem)
     if ( Local7 = 0 )
          return 0.0
     endif

     Local14 := GT_StrCount(":", Arg2[ Local7 ])
     Local17 := Local7
     if ( Local14 < 1 )
          if ( !Local10 )
                return Local7 + 0.0
          else
                Local10 := .F.
                LOOP
          endif
     endif
     if ( Local14 > MaxRow() - 1 )
          Local14 := MaxRow() - 1
     endif
     Asize(Local4, Local14)
     Asize(Local5, Local14)
     Asize(Local6, Local14)
     FOR Local12 := 1 TO Local14
          Local4[ x ] := "  " + Strextract(Arg2[ Local7 ], ":", x + 1)
          Local5[ x ] := x + 1 + Arg4
     NEXT
     Local9 := Amaxstrlen(Local4) + 2
     if ( Local3[ Local7 ] + Local9 + 3 > MaxCol() + 1 )
          Local15 := MaxCol() + 1 - ( Local9 + 3 )
     else
          Local15 := Local3[ Local7 ] + 1
     endif
     Afill(Local6, Local15)
     FOR x := 1 TO Local14
          Local4[ x ] := Untrim(Local4[ x ], Local9)
     NEXT


     Local16 := SaveScreen()
     MS_Box(Arg4 + 1, Local15 - 1, Local14 + 2 + Arg4, Local15 + Local9, Local11 + " ", Local18)

     if ( Local8 <= 0 )
          Local8 := 1
     endif
     Local8 := M_Aprompt(.T., Local8, Local5, Local6, Local4, Local18, aMensagem )



     ResTela( Local16 )

     if ( Local8 < -1 )
          if ( Local8 = -3 )
                Local17 := Iif( Local17 = Local13, 1, Local17 + 1 )

                HB_KeyPut(13)
          endif
          if ( Local8 = -2 )
                Local17 := Iif( Local17 = 1, Local13, Local17 - 1 )

               HB_KeyPut(13)
          endif
          Local10 := .T.
          LOOP
     elseif ( Local8 > 0 )
          return Local7 + Local8 / 100
     endif
     Local10 := .F.
END

function M_Aprompt( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, aMensagem )

LOCAL Local1 := .F.
LOCAL Local2 := 0
LOCAL Local3 := 0
LOCAL Local4 := {}
LOCAL Local5 := .F.
LOCAL Local6 := MaxCol() + 1
LOCAL Local7
LOCAL Local8 := Len( Arg5 )
LOCAL Local9
LOCAL Local10
LOCAL Local11 := Arg6
LOCAL x
LOCAL Local13

Colorset(@Local11, @Local7)
if ( Arg2 < 0 )
     Local10 := 1
elseif ( Arg2 > Local8 )
     Local10 := Local8
else
     Local10 := Arg2
endif
Local9 := Local10
Local7 := Local7 + 256
Local4 := Array(Local8)

FOR x := 1 TO Local8
     Aprint(Arg3[ x ], Arg4[ x ], Arg5[ x ], Local11)
     Local4[ x ] := Aprintlen(Arg5[ x ]) + Arg4[ x ] - 1
NEXT
Aprint(Arg3[ Local10 ], Arg4[ Local10 ], Arg5[ Local10 ], Local7)
if ( Arg7 <> Nil )
     Aprint(Arg8, 0, "", Local11, Local6)
     Aprint(Arg8, Shr(Local6 - Aprintlen(Arg7[ Local10 ]), 1), Arg7[ Local10 ], Local11)
endif

WHILE ( .T. )
     WHILE ( .T. )
          WHILE ( .T. )
                Local2 := InKey()



                if ( Local2 <> 0 )
                     Local13 := SetKey(Local2)
                     if ( Local13 <> Nil )
                          Eval(Local13, Procname(2), Procline(2))
                          LOOP
                     else
                          EXIT
                     endif
                endif
          END
          Local9 := Local10
          if ( Local5 )

                if ( Local3 > 0 )
























                elseif ( Arg1 .AND. !Local1 .AND. Local5 )
                     return -1
                else
                     LOOP
                endif
          endif
          DO CASE
          CASE ( Local2 == 27 )
                return 0
          CASE ( Local2 == 5 .OR. Local2 == 19 )
                Local10 := Iif( Local10 == 1, Local8, Local10 - 1 )
                EXIT
          CASE ( Local2 == 4 .OR. Local2 == 24 )
                Local10 := Iif( Local10 == Local8, 1, Local10 + 1 )
                EXIT
          CASE ( Local2 == 1 )
                Local10 := 1
                EXIT
          CASE ( Local2 == 6 )
                Local10 := Local8
                EXIT
          CASE ( Local2 < 128 .AND. Local2 > 32 )
                Local3 := Achartest(Chr(Local2), "", Arg5)
                if ( Local3 > 0 )
                     Local10 := Local3
                     Local1 := .T.
                     EXIT
                endif
          CASE ( Local2 == 13 .OR. Local2 == 18 .OR. Local2 == 3  .OR. Local2 == 32)
                return Local10
          OTHERWISE
                LOOP
          ENDCASE
     END
     if ( Local9 <> Local10 )

          Aprint(Arg3[ Local9 ], Arg4[ Local9 ], Arg5[ Local9 ], Local11)
          Aprint(Arg3[ Local10 ], Arg4[ Local10 ], Arg5[ Local10 ], Local7)
          if ( Arg7 <> Nil )
                Aprint(Arg8, 0, "", Local11, Local6)
                Aprint(Arg8, Shr(Local6 - Aprintlen(Arg7[ Local10 ]), 1), Arg7[ Local10 ], Local11)
          endif

     endif
     if ( Arg1 .AND. Local2 == 19 )
          return -2
     endif
     if ( Arg1 .AND. Local2 == 4 )
          return -3
     endif
     if ( Local1 )
          return Local10
     endif
END

function ColorSet( pfore, pback, pUns )

    if pfore == nil
         pfore := ColorStandard()
         pback := ColorEnhanced()
         puns  := ColorUnselected()

    elseif pfore < 0
         pfore := ColorStandard()
         pback := ColorEnhanced()
         puns  := ColorUnselected()
    else
         pback := Roloc(pfore)
    endif
    return( nil )

function CTBA( Lin, Col )

STATIC nColor := 31
       nColor++

if nColor >= 256
   nColor := 31
endif


Print( Lin,       Col, " ÚÄÄÄÄÄ¿    ÚÄÄÄÄÄ¿  ÚÄ¿",nColor)
Print( Lin+01, Col, " ßßßßßßÀ¿   ßßßßßßÀ¿ ßß³",nColor)
Print( Lin+02, Col, "ßßßßßßßß³  ßßßßßßßß³ ßß³",nColor)
Print( Lin+03, Col, "ßß³   ßßÙ  ßß³   ßßÙ ßß³",nColor)
Print( Lin+04, Col, "ßßÀÄÄÄÄ¿   ßß³       ßß³",nColor)
Print( Lin+05, Col, "ßßßßßßßÀ¿  ßß³       ßß³",nColor)
Print( Lin+06, Col, " ßßßßßßß³  ßß³       ßß³",nColor)
Print( Lin+07, Col, "      ßß³  ßß³       ßß³",nColor)
Print( Lin+08, Col, "ßßÄÄÄÄßß³  ßßÀÄÄÄßß³ ßß³",nColor)
Print( Lin+09, Col, "ßßßßßßßßÙ  ßßßßßßßßÙ ßß³",nColor)
Print( Lin+10, Col, " ßßßßßßÙ    ßßßßßßÙ  ßßÙ",nColor)
if ( InKey(0.05) <> 0 )
    return(.T.)
endif
return(.F.)

function Protela()

LOCAL nY
LOCAL nX
LOCAL LOCAL5  := Setcursor()
LOCAL row     := Row()
LOCAL col     := Col()
LOCAL cScreen := SaveScreen()
LOCAL nMaxCol := MaxCol()-24
LOCAL nMaxRow := MaxRow()-11
LOCAL nColor  := 31
LOCAL cNewScreen


nSetColor( nColor, Roloc(nColor))
cSetColor( SetColor())
Scroll() ; SetPos( 0, 0 )
cNewScreen := SaveScreen()
Setcursor(0)

WHILE .T.
   For nX := 0 To nMaxCol

        if Ctba(0, nX)
           ResTela(cScreen)
            DevPos(row,col)
            SetCursor(1)
            return nil
      endif
     Next
     For nY := 0 To nMaxRow

          if Ctba(nY, nMaxCol )
            ResTela(cScreen)
                SetCursor(1)
              DevPos(row,col)
              return nil
          endif
     Next
     For nX := nMaxCol To 0 Step -1

          if Ctba(nMaxRow, nX)
              ResTela(cScreen)
                SetCursor(1)
                DevPos(row,col)
                return nil
          endif
     Next
     For nY := nMaxRow To 0 Step -1

          if ctba(nY, 0)
                ResTela(cScreen)
                SetCursor(1)
                DevPos(row,col)
                return nil
          endif
     Next
End
ResTela(cScreen)
SetCursor(1)
DevPos(row,col)
return nil

function MsBox( nCol, nRow, nCol1, nRow1, nCor, lRelevo, cTexto )

    LOCAL cFrame  := oAmbiente:Frame
    LOCAL nRetVal
    LOCAL PBack
    LOCAL aCor
    LOCAL aFundo
    LOCAL aCima
    LOCAL cCor
    if lRelevo
      aCor      := { 16,32,48,64,64,80,096,112,128,144,160,176,192,208,224 }
      aFundo   := { 16,32,48,64,64,80,096,112,128,144,160,176,192,208,224 }
      aCima      := { 25,47,53,76,64,86,101,117,143,149,165,181,207,213,239 }
    else
      aCor      := { 25,47,53,76,64,86,101,117,143,149,165,181,207,213,239 }
      aFundo   := { 25,47,53,76,64,86,101,117,143,149,165,181,207,213,239 }
      aCima      := { 16,32,48,64,64,80,096,112,128,144,160,176,192,208,224 }
    endif
    if nCor = NIL
        nCor     := CorBox()
    endif
    cCor                    := aCor[nCor]
    oAmbiente:CorCima := aCima[ nCor ]
    nComp                 := ( nRow1 - nRow )-1
    ColorSet( @cCor, @PBack )
    M_Frame( cFrame )
    MS_Box( nCol, nRow, nCol1, nRow1, M_Frame() + " ", aFundo[ nCor], 1, 8 )
    cFrame1 := Left( cFrame, 1 )
    cFrame2 := SubStr( cFrame, 2, 1 )
    cFrame8 := SubStr( cFrame, 8, 1 )
    cFrame7 := SubStr( cFrame, 7, 1 )
    Print( nCol, nRow, cFrame1, aCima[nCor], 1 )
    Print( nCol, nRow+1, Repl( cFrame2, nComp), aCima[nCor] )
    For x := nCol+1 To nCol1-1
        Print( x, nRow, cFrame8, aCima[nCor], 1 )
    Next
    Print( nCol1, nRow, cFrame7,    aCima[nCor],1 )
    if cTexto <> NIL
        Print( nCol+1, nRow+1, Padc( cTexto, nRow1-nRow-1), aCima[nCor] )
    endif
    cSetColor( SetColor())
    nSetColor( cCor, Roloc( cCor ))
    return NIL

function MsAlerta( Texto, aArray, PosVertical, lRelevo )

    LOCAL nRetVal
    LOCAL PBack
    LOCAL Telavelha     := SaveScreen()
    LOCAL nCor             := CorBox()
    LOCAL Exceto         := .F.
    LOCAL Ativo          :=  1
    LOCAL cFrame         := "ÚÄ¿³ÙÄÀ³"
    LOCAL TamanhoTexto := Len( Texto ) + 2
    LOCAL aCor
    LOCAL aFundo
    LOCAL cCor
    LOCAL aCima
    LOCAL nTam             := 0
    LOCAL aCol             := {}
    LOCAL aRow             := {}
    LOCAL nLenArray

    if oAmbiente:Visual
        return( Alerta( Texto, aArray ))
    else
        lRelevo         := Iif( lRelevo = NIL, .F., lRelevo )
        if lRelevo
          aCor      := { 16,32,48,64,64,80,096,112,128,144,160,176,192,208,224 }
          aFundo   := { 16,32,48,64,64,80,096,112,128,144,160,176,192,208,224 }
          aCima      := { 25,47,53,76,69,91,101,117,133,149,165,181,207,213,239 }
        else
          aCor      := { 25,47,53,76,69,91,101,117,133,149,165,181,207,213,239 }
          aFundo   := { 25,47,53,76,69,91,101,117,133,149,165,181,207,213,239 }
          aCima      := { 16,32,48,64,64,80,096,112,128,144,160,176,192,208,224 }
        endif
        aArray      := Iif( aArray = NIL, { " ÄÙ Okay " }, aArray )
        nLenArray  := Len( aArray )
        For nX  := 1 To nLenArray
            nTam += Len( aArray[nX] ) + 1
        Next
        cCor             := aCor[nCor]
        TamanhoTexto := Iif( TamanhoTexto < nTam, nTam, TamanhoTexto )
        TamanhoTexto := Iif( TamanhoTexto < 16, 16, TamanhoTexto )
        PosVertical  := Iif( PosVertical = Nil .OR. PosVertical = 0, 11, PosVertical )
        nEsquerda     := (80-TamanhoTexto)/2
        nComprimento := nEsquerda + TamanhoTexto
        nTexto         := Len( Texto )
        nPosTexto     := nEsquerda + ((TamanhoTexto - nTexto) / 2) + 1
        nCima          := PosVertical - 2
        nBaixo         := PosVertical + 2
        nDireita      := nComprimento
        nLen             := 1
        nSobra         := ( TamanhoTexto - nTam ) / nLenArray
        For nX  := 1 To nLenArray
            Aadd( aRow, nBaixo-1 )
            Aadd( aCol, (nEsquerda+nSobra+nLen))
            nLen += Len(aArray[nX])+1
        Next
        Coluna         := (TamanhoTexto - 9 ) / 2
        nRow             := PosVertical + 2
        nCol             := nEsquerda + Coluna
        nBot             := PosVertical + 3
        nComp          := ( nComprimento - nEsquerda )-1

        ColorSet( @cCor, @PBack )
        M_Frame( cFrame )
        MS_Box( nCima, nEsquerda, nBaixo, nDireita, M_Frame() + " ", aFundo[ nCor], 1, 8 )
        Print( nCima, nEsquerda, "Ú", aCima[ nCor ], 1 )
        Print( nCima, nEsquerda+1, Repl("Ä",nComp), aCima[nCor] )
        For x := nCima+1 To nBaixo
            Print( x, nEsquerda, "³", aCima[nCor], 1 )
        Next
        Print( nBaixo, nEsquerda, "À",  aCima[nCor],1 )
        aPrint( nCima + 1, nPosTexto, Texto, aCima[nCor])
        nRetVal := M_Prompt( Exceto, Ativo, aRow, aCol, aArray, aFundo[nCor] )
        ResTela( TelaVelha )
        return( nRetVal )
    endif

function EXPLODE( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 )

Local Local1, Local2, Local3, Local4, Local5
Local2 := Arg4 - Arg2 + 1
Local2 := Int((Local2 - 2) / 2)
Arg2     := Arg2 + Local2
Arg4     := Arg4 - Local2

For Local3 := 1 To Local2
    Local5  := 0
    For Local4 := 1 To 100
        Local5++
    Next
    MS_Box( Arg1, Arg2 - Local3, Arg3, Arg4 + Local3, Arg5, Arg6 )
Next
return Nil

function AddButton(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9)

Local Local1
Arg5     := Iif(At("&", Arg5) == 0, "&" + Arg5, Arg5)
Arg7     := Iif(( Arg7 == NIL ), .F., Arg7)
Arg8     := Iif(( Arg8 == NIL ), { || nret() }, Arg8)
Arg9     := Iif(( Arg9 == NIL ), .T., Arg9)
Local1 := SubStr(Arg5, At("&", Arg5) + 1, 1)
AAdd(Arg1, {Arg5, Arg6, Arg8, Arg9, Arg7, Arg2, Arg3, Local1, Arg4})
return Nil


function NINKEY(Arg1)

    Local Local1, Local2, Local3
    while (.T.)
        Local1:= .F.
        if (Arg1 = Nil)
            Local2:= InKey()
        else
            Local2:= InKey(Arg1)
        endif
        if (Local2 <> 0 .AND. (Local3:= SetKey(Local2)) <> Nil)
            eval(Local3, procname(2), procline(2), "")
            Local1:= .T.
        endif
        if (!Local1)
            Exit
        endif
    EndDo
    return Local2

function NRET

    return Nil

function VISUALCLOCK

    Local Local1, Local2
    Local2:= 0
    setcursor(0)

    Local1:= win(10, 28, 13, 51, "Rel¢gio - " + DToC(Date()),     "W+*/B", "B+*/W")
    while (Local2 == 0)
        DevPos( 12, 36 ) ; DevOut( Time(), "N*/W" )
        Local2:= InKey(1)
    EndDo
    rstenv(Local1)
    return Nil

function CHKPRN

    Local Local1
    Local1:= .T.
    while (!FT_IsPrint())
        if (msgbox2("Impressora no preparada. Continuar ?") == 2)
            Local1:= .F.
            Exit
        endif
    EndDo
    return Local1


Procedure NSCREEN


function THE_END

    Local Local1, Local2







    Local1:= {padc("Analyze Tecnologia em Sistemas Ltda", 54),     Replicate(" ", 54),     padc("Rua Sophie Delamain, 114 - Belvedere", 54),     padc("CEP: 13.600-000  Araras (SP)", 54), Replicate(" ", 54),     padc("Fone: (0195) 41-6760 - Fax: (0195) 41-7606", 54),     Replicate(" ", 54), padc("Todos os direitos reservados", 54),     Replicate(" ", 54), Replicate(" ", 54), Replicate(" ", 54),     Replicate(" ", 54), Replicate(" ", 54), Replicate(" ", 54)}
    Local2:= t:= x:= 0
    SetColor( "N/W" )
    Scroll() ; SetPos( 0, 0 )
    deskbox(0, 2, 24, 77, 2)
    deskbox(2, 7, 22, 72, 1)
    frame(4, 10, 6, 69, Nil, Nil, 2)
    frame(7, 10, 15, 69, Nil, Nil, 2)
    frame(16, 10, 20, 69, Nil, Nil, 2)


    DevPos( 5, 13 ) ; DevOut( padc("Visual Lib - Biblioteca para design de interface", 54), "B/W" )
    linbutton1(.F., 1, 18)
    while (.T.)
        if (Local2 == 14)

        else
            ++Local2
        endif
        Local2:= Nil
        Scroll(8, 12, 14, 68, 1)

        DevPos( 14, 13 ) ; DevOut( Local1[Local2], Iif(Local2 == 1 .OR. Local2     == 8, "R/W", "N/W") )
        InKey(0.5)
        t:= LastKey()
        if (t == 13 .OR. t == 27 .OR. Upper(Chr(t)) == "O")
            Exit
        endif
    EndDo
    __Keyboard( Chr(13) )
    linbutton1(.T., 1, 18)
    setblink(.T.)
    SetColor( "" )
    setmode(25, 80)
    Scroll() ; SetPos( 0, 0 )
    dbCloseAll()
    __Quit()
    return Nil

Procedure NBUTTON


function NewButton()

    return {}

function SHOWBUTTON(Arg1, Arg2)

    aeval(Arg1, { |_1| drawbutton(_1, Arg2) })
    return Nil

Procedure NMISC2


function DRAWBUTTON(Arg1, Arg2, Arg3, Arg4, Arg5)



    Local Local1, Local2, Local3, Local4, Local5, Local6, Local7,     Local8, Local9, Local10, Local11, Local12, Local13, Local14,     Local15, Local16, Local17, Local18, Local19, Local20, Local21
    Arg3:= Iif(( Arg3 == NIL ), 1, Arg3)
    Arg4:= Iif(( Arg4 == NIL ), .T., Arg4)
    Arg5:= Iif(( Arg5 == NIL ), .T., Arg5)
    Local10:= textbutton(Arg1[1])
    if (Arg2 == 1)
        Local1:= "N/W"
        Local2:= Iif(Arg5, "W*/N", "N*/N")
        Local3:= "W+*/N"
        Local4:= "W*/N"
        Local6:= "W+*/N"
        Local7:= "N+*/N"
        Local9:= Iif(Arg1[4], "GR+*/N", "W*/N")
    elseif (Arg2 == 2)
        Local1:= "N*/W"
        Local2:= Iif(Arg5, "W+/W", "N+/W")
        Local3:= "N/W"
        Local4:= "N+/W"
        Local6:= "N/W"
        Local7:= "W/W"
        Local9:= Iif(Arg1[4], "W+/W", "N+/W")
    endif
    if (Arg3 == 1)
        Local10:= padc(Local10, Arg1[9] - 3)
        Local11:= At(Upper(Arg1[8]), Upper(Local10)) - 1
        Local5:= Iif(Arg1[4], Local3, Local4)
        Local8:= Local7
    elseif (Arg3 == 2)
        Local10:= padc(Local10, Arg1[9] - 3)
        Local11:= At(Upper(Arg1[8]), Upper(Local10)) - 1
        Local5:= Iif(Arg1[4], Local3, Local4)
        Local8:= Local6
    elseif (Arg3 == 3)
        Local10:= " " + Left(padc(Local10, Arg1[9] - 3), Arg1[9] - 4)
        Local11:= At(Upper(Arg1[8]), Upper(Local10)) - 1
        Local5:= Iif(Arg1[4], Local3, Local4)
        Local8:= Local6
    endif
    Local20:= At(ltrim(rtrim(Local10)), Local10) - 1
    Local21:= Local20 + Len(Arg1[1]) + 2
    if (Arg4)
        Local12:= "Õ"
        Local13:= Iif(Arg5, "Ò", "×")
        Local14:= "·"
        Local15:= "¶"
        Local16:= "½"
        Local17:= "Ð"
        Local18:= "Ó"
        Local19:= "Ç"
    else
        Local12:= "Ö"
        Local13:= Iif(Arg5, "Ñ", "Ø")
        Local14:= "¸"
        Local15:= "µ"
        Local16:= "¾"
        Local17:= "Ï"
        Local18:= "Ô"
        Local19:= "Æ"
    endif
    DevPos( Arg1[6] - 1, Arg1[7] ) ; DevOut( Local12 + Replicate(Local13, Arg1[9] - 2) + Local14, Local1 )
    DevPos( Arg1[6], Arg1[7] ) ; DevOut( Local19, Local1 )
    DevPos( Arg1[6], Arg1[7] + 1 ) ; DevOut( "¶", Local2 )
    DevPos( Arg1[6], Arg1[7] + 2 ) ; DevOut( Local10, Local5 )
    DevPos( Arg1[6], Arg1[7] + 2 + Local11 ) ; DevOut( Arg1[8], Local9 )
    DevPos( Arg1[6], Arg1[7] + Arg1[9] - 1 ) ; DevOut( Local15, Local1 )
    DevPos( Arg1[6] + 1, Arg1[7] ) ; DevOut( Local18 + Replicate(Local17, Arg1[9] - 2) + Local16, Local1 )
    DevPos( Arg1[6], Arg1[7] + Local20 ) ; DevOut( "ò", Local8 )
    DevPos( Arg1[6], Arg1[7] + Local21 ) ; DevOut( "ó", Local8 )
    return Nil


function SAVENV(Arg1, Arg2, Arg3, Arg4)

    Local Local1
    Local1:= {}
    AAdd(Local1, Arg1)
    AAdd(Local1, Arg2)
    AAdd(Local1, Arg3)
    AAdd(Local1, Arg4)
    AAdd(Local1, SaveScreen(Arg1, Arg2, Arg3, Arg4))
    AAdd(Local1, SetColor())
    AAdd(Local1, setcursor())
    return Local1

function RSTENV(Arg1)

    RestScreen(Arg1[1], Arg1[2], Arg1[3], Arg1[4], Arg1[5])
    SetColor( Arg1[6] )
    setcursor(Arg1[7])
    return Nil

function DWNMSG(Arg1)


    DevPos( 23, 1 ) ; DevOut( padc(Arg1, 78), "R*/W" )
    return .T.

function QEXIT(Arg1, Arg2, Arg3, Arg4)

    Local Local1
    Local1:= savenv(33, 0, 33, 79)
    Arg4:= Iif(( Arg4 == NIL ), .T., Arg4)
    if (!Arg4)
        dbCloseAll()
        setblink(.T.)
        setmode(25, 80)
        SetColor( "" )
        Scroll() ; SetPos( 0, 0 )
        __Quit()

    elseif (msgbox2("Confirma o encerramento ?", "Sa¡da", Nil, Nil,     Nil, Nil, 2) == 1)
        dbCloseAll()
        setblink(.T.)
        setmode(25, 80)
        SetColor( "" )
        Scroll() ; SetPos( 0, 0 )
        __Quit()
    endif
    rstenv(Local1)
    return Nil

function GINS

    readinsert(.T.)
    setcursor(2)

    SetKey(22, { || (Iif(readinsert(), setcursor(1),     setcursor(2)), readinsert(!readinsert())) })
    return Nil

function DRAWFN( nTipo, cString, nRow, nCol, cColor )

    LOCAL aFuncao := { 1, 9, 17, 25, 33, 41, 49, 57, 65, 73 }
    cColor := Iif(( cColor == NIL ), Cor(2), cColor )
    nRow     := Iif(( nRow == NIL ), 24,      nRow )
    nCol     := Iif(( nCol == NIL ), aFuncao[nTipo]-1, nCol )
    DevPos( nRow, nCol+1 ) ; DevOut( Left( cString, 7 ), AttrToa( cColor ) )
    DevPos( nRow, nCol ) ; DevOut( Chr(223 + nTipo ), AttrToa( cColor ) )
    return Nil

function PROCBUTTON( Arg1, Arg2, Arg3)

    Local Local1:= 0, Local2:= setcursor(0), Local3:= 0
    Arg2:= Iif(( Arg2 == NIL ), 1, Arg2)
    Arg3:= Iif(( Arg3 == NIL ), 1, Arg3)
    showbutton(Arg1, Arg2)
    while (!Arg1[Arg3][4])
        Arg3:= Iif(++Arg3 > Len(Arg1), 1, Arg3)
    EndDo
    while (.T.)
        drawbutton(Arg1[Arg3], Arg2, 2, .F.)
        if (Arg1[Arg3][2] <> Nil .OR. Arg1[Arg3][2] <> "")
            dwnmsg(Arg1[Arg3][2])
        endif
        if (Local1 == 13 .OR. Local1 = 32)
            InKey(0.1)
            drawbutton(Arg1[Arg3], Arg2, 1, .T.)
            Exit
        else
            Local1:= ninkey(0)
        endif
        if (Local1 == 27 )
            return( 0 )
        elseif ((Local3 := Ascan(Arg1, { |_1| Upper(Chr(Local1)) == Upper(_1[8]) })) <> 0 .AND. Arg1[Local3][4])
            drawbutton(Arg1[Arg3], Arg2, 1)
            Arg3 := Local3
            __Keyboard( Chr(13) )
        elseif (Local1 == 27 .AND. ( Local3 := ascan(Arg1, { |_1| _1[5] == .T. })) <> 0 .AND. Arg1[Local3][4])
            drawbutton(Arg1[Arg3], Arg2, 1)
            Arg3 := Local3
            __Keyboard( Chr(13) )
        endif
        if (Local1 == 5 .OR. Local1 == 19 .OR. Local1 == 271)
            drawbutton(Arg1[Arg3], Arg2, 1)
            Arg3:= Iif(--Arg3 == 0, Len(Arg1), Arg3)
            while (!Arg1[Arg3][4])
                Arg3:= Iif(--Arg3 == 0, Len(Arg1), Arg3)
            EndDo
        elseif (Local1 == 24 .OR. Local1 == 4 .OR. Local1 == 9)
            drawbutton(Arg1[Arg3], Arg2, 1)
            Arg3:= Iif(++Arg3 > Len(Arg1), 1, Arg3)
            while (!Arg1[Arg3][4])
                Arg3:= Iif(++Arg3 > Len(Arg1), 1, Arg3)
            EndDo
        elseif (Local1 == 13 .OR. Local1 = 32 )
            drawbutton(Arg1[Arg3], Arg2, 3, .F., .F.)
            InKey(0.1)
            drawbutton(Arg1[Arg3], Arg2, 2, .F.)
            eval(Arg1[Arg3][3])
        endif
    EndDo
    setcursor(Local2)
    return Arg3

function TEXTBUTTON(Arg1)

    Local Local1, Local2, Local3, Local4
    Local1:= ""
    Local2:= At("&", Arg1)
    Local3:= SubStr(Arg1, 1, Local2 - 1)
    Local4:= SubStr(Arg1, Local2 + 1)
    return Iif(Local2 <> 0, Local3 + Local4, Arg1)

function SETBUTTON(Arg1, Arg2, Arg3)

    Local Local1
    Local1:= Arg1[Arg2][4]
    if (Arg3 <> Nil)
        Arg1[Arg2][4]:= Arg3
    endif
    return Local1

function DESKTOP(Arg1, Arg2)


    Arg1:= Iif(( Arg1 == NIL ),     "Analyze Tecnologia em Sistemas - Visual Lib", Arg1)
    Arg2:= Iif(( Arg2 == NIL ), "W+/BG", Arg2)
    setblink(.F.)
    SetColor( "W+/W" )

    Scroll() ; SetPos( 0, 0 )
    DevPos( 0, 0 ) ; DevOut( padc(Arg1, 80), Arg2 )
    DevPos( 24, 0 ) ; DevOut( padc(" ", 80), Arg2 )
    DevPos( 1, 0 ) ; DevOut( padc(" ", 80), "N*/W" )
    DevPos( 23, 0 ) ; DevOut( padc(" ", 80), "N*/W" )
    return Nil

function NBOX(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6)

    Local Local1
    Local1 := savenv(Arg1, Arg2, Arg3 + 1, Arg4 + 2)
    Arg5     := Iif(( Arg5 == NIL ), "N*/W", Arg5)
    Arg6     := Iif(( Arg6 == NIL ), .T., Arg6)
    DispBox( Arg1, Arg2, Arg3, Arg4, "ÉÐËÇÊÌÈ¶ ", Arg5 )
    if (Arg6)
        Sombra( Arg1, Arg2, Arg3, Arg4)
    endif
    return Local1

function WIN(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7)

    Local Local1
    Arg5     := Iif(( Arg5 == NIL ), "", Arg5)
    Arg6     := Iif(( Arg6 == NIL ), "W+/B", Arg6)
    Arg7     := Iif(( Arg7 == NIL ), "B*/W", Arg7)
    Local1 := nBox( Arg1, Arg2, Arg3, Arg4, Arg7)
    DevPos( Arg1, Arg2 ) ; DevOut( Padc(Arg5, Arg4 - Arg2 + 1), Arg6 )
    return Local1


function SOMBRA(Arg1, Arg2, Arg3, Arg4)


    Local Local1, Local2, Local3, Local4
    Local3:= SaveScreen(Arg1 + 1, Arg4 + 1, Arg3 + 1, Arg4 + 2)
    Local4:= SaveScreen(Arg3 + 1, Arg2 + 2, Arg3 + 1, Arg4 + 2)
    For Local1:= 2 To Len(Local3) Step 2
        Local2:= FT_shadow(Asc(SubStr(Local3, Local1, 1)))
        Local3:= stuff(Local3, Local1, 1, Local2)
    Next
    For Local1:= 2 To Len(Local4) Step 2
        Local2:= FT_shadow(Asc(SubStr(Local4, Local1, 1)))
        Local4:= stuff(Local4, Local1, 1, Local2)
    Next
    RestScreen(Arg1 + 1, Arg4 + 1, Arg3 + 1, Arg4 + 2, Local3)
    RestScreen(Arg3 + 1, Arg2 + 2, Arg3 + 1, Arg4 + 2, Local4)
    return Nil


function SHADOW(Arg1)

    Local Local1, Local2, Local3
    Local1:= Arg1 % 16
    Local2:= (Arg1 - Local1) / 16
    Local3:= {0, 0, 8, 8, 0, 8, 0, 8, 0, 1, 2, 3, 4, 5, 6, 7}
    Local1:= Local3[Local1 + 1]
    Local2:= Local3[Local2 + 1]
    return Chr(16 * Local2 + Local1)


function MSGBOX3D1(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7)

    Local Local1, Local2, Local3, Local4
    Arg4:= Iif(( Arg4 == NIL ), "&OK", Arg4)
    Arg1:= Iif(( Arg1 == NIL ), "", Arg1)
    Arg2:= Iif(( Arg2 == NIL ), "Ateno!", Arg2)
    Local1:= Iif(HB_ISARRAY( Arg1 ), Len(Arg1), 1)
    Arg3:= Iif(( Arg3 == NIL ), 12 - (Local1 + 8) / 2, Arg3)
    Arg5:= Iif(( Arg5 == NIL ), "W+/N", Arg5)
    Arg6:= Iif(( Arg6 == NIL ), "N/W", Arg6)
    Arg7:= Iif(( Arg7 == NIL ), "N/W", Arg7)
    Local3:= newbutton()
    addbutton(Local3, Arg3 + 5 + Local1, 31, 18, Arg4, Nil, .T.)
    Local2:= win(Arg3, 10, Arg3 + 8 + Local1, 69, Arg2, Arg5, Arg6)
    DispBox( Arg3 + 2, 11, Arg3 + 7 + Local1, 11, "ÇÇÇÇÇÇÇÇÇ", "W+/W" )
    DispBox( Arg3 + 2, 68, Arg3 + 7 + Local1, 68, "¶¶¶¶¶¶¶¶¶", "N+/W" )
    DevPos( Arg3 + 2, 12 ) ; DevOut( Replicate("Ð", 56), "W+/W" )
    DevPos( Arg3 + 7 + Local1, 12 ) ; DevOut( Replicate("Ì", 56), "N+/W" )
    if (HB_ISARRAY( Arg1 ))
        For Local4:= 1 To Local1
            DevPos( Arg3 + 2 + Local4, 13 ) ; DevOut( padc(Arg1[Local4], 54), Arg7 )
        Next
    else
        DevPos( Arg3 + 3, 13 ) ; DevOut( padc(Arg1, 54), Arg7 )
    endif
    setcursor(0)
    procbutton(Local3, 1, 1)
    rstenv(Local2)
    return Nil



function MSGBOX3D2(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8,     Arg9, Arg10)

    Local Local1, Local2, Local3, Local4
    Arg4:= Iif(( Arg4 == NIL ), "&Sim", Arg4)
    Arg5:= Iif(( Arg5 == NIL ), "&No", Arg5)
    Arg6:= Iif(( Arg6 == NIL ), 1, Arg6)
    Arg7:= Iif(( Arg7 == NIL ), 2, Arg7)
    Arg1:= Iif(( Arg1 == NIL ), "", Arg1)
    Arg2:= Iif(( Arg2 == NIL ), "Ateno!", Arg2)
    Local1:= Iif(HB_ISARRAY( Arg1 ), Len(Arg1), 1)
    Arg3:= Iif(( Arg3 == NIL ), 12 - (Local1 + 8) / 2, Arg3)
    Arg8:= Iif(( Arg8 == NIL ), "W+/N", Arg8)
    Arg9:= Iif(( Arg9 == NIL ), "N/W", Arg9)
    Arg10:= Iif(( Arg10 == NIL ), "N/W", Arg10)
    Local3:= newbutton()

    addbutton(Local3, Arg3 + 5 + Local1, 21, 18, Arg4, Nil, Iif(Arg7     == 1, .T., .F.))

    addbutton(Local3, Arg3 + 5 + Local1, 41, 18, Arg5, Nil, Iif(Arg7     == 2, .T., .F.))
    Local2:= win(Arg3, 10, Arg3 + 8 + Local1, 69, Arg2, Arg8, Arg9)
    DispBox( Arg3 + 2, 11, Arg3 + 7 + Local1, 11, "ÇÇÇÇÇÇÇÇÇ", "W+/W" )
    DispBox( Arg3 + 2, 68, Arg3 + 7 + Local1, 68, "¶¶¶¶¶¶¶¶¶", "N+/W" )
    DevPos( Arg3 + 2, 12 ) ; DevOut( Replicate("Ð", 56), "W+/W" )
    DevPos( Arg3 + 7 + Local1, 12 ) ; DevOut( Replicate("Ì", 56), "N+/W" )
    if (HB_ISARRAY( Arg1 ))
        For Local4:= 1 To Local1

            DevPos( Arg3 + 2 + Local4, 13 ) ; DevOut( padc(Arg1[Local4], 54), Arg10 )
        Next
    else
        DevPos( Arg3 + 3, 13 ) ; DevOut( padc(Arg1, 54), Arg10 )
    endif
    setcursor(0)
    Local4:= procbutton(Local3, 1, Iif(Arg6 < 3, Arg6, 2))
    rstenv(Local2)
    return Local4

function LinButton1( lProcessaOuExibe, nCor, nRow, cString, cMensagem )

LOCAL xButton      := NewButton()
lProcessaOuExibe := Iif(( lProcessaOuExibe == NIL ), .T., lProcessaOuExibe )
nCor                  := Iif(( nCor == NIL ), 1, nCor )
nRow                  := Iif(( nRow == NIL ), 21, nRow )
cString              := Iif(( cString == NIL ), "&OK", cString )
AddButton( xButton, nRow, 31, (MaxCol()-61), cString,  cMensagem, .T. )
if ( lProcessaOuExibe )
    nRow := ProcButton( xButton, nCor )
else
    ShowButton( xButton, nCor )
endif
return(    nRow )



function MSGBOX3D3(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8,     Arg9, Arg10, Arg11)

    Local Local1, Local2, Local3, Local4
    Arg4:= Iif(( Arg4 == NIL ), "&Sim", Arg4)
    Arg5:= Iif(( Arg5 == NIL ), "&No", Arg5)
    Arg6:= Iif(( Arg6 == NIL ), "&Cancelar", Arg6)
    Arg7:= Iif(( Arg7 == NIL ), 1, Arg7)
    Arg8:= Iif(( Arg8 == NIL ), 3, Arg8)
    Arg1:= Iif(( Arg1 == NIL ), "", Arg1)
    Arg2:= Iif(( Arg2 == NIL ), "Ateno!", Arg2)
    Local1:= Iif(HB_ISARRAY( Arg1 ), Len(Arg1), 1)
    Arg3:= Iif(( Arg3 == NIL ), 12 - (Local1 + 8) / 2, Arg3)
    Arg9:= Iif(( Arg9 == NIL ), "W+/N", Arg9)
    Arg10:= Iif(( Arg10 == NIL ), "N/W", Arg10)
    Arg11:= Iif(( Arg11 == NIL ), "N/W", Arg11)
    Local3:= newbutton()

    addbutton(Local3, Arg3 + 5 + Local1, 13, 18, Arg4, Nil, Iif(Arg8     == 1, .T., .F.))

    addbutton(Local3, Arg3 + 5 + Local1, 31, 18, Arg5, Nil, Iif(Arg8     == 2, .T., .F.))

    addbutton(Local3, Arg3 + 5 + Local1, 49, 18, Arg6, Nil, Iif(Arg8     == 3, .T., .F.))
    Local2:= win(Arg3, 10, Arg3 + 8 + Local1, 69, Arg2, Arg9, Arg10)
    DispBox( Arg3 + 2, 11, Arg3 + 7 + Local1, 11, "ÇÇÇÇÇÇÇÇÇ", "W+/W" )
    DispBox( Arg3 + 2, 68, Arg3 + 7 + Local1, 68, "¶¶¶¶¶¶¶¶¶", "N+/W" )
    DevPos( Arg3 + 2, 12 ) ; DevOut( Replicate("Ð", 56), "W+/W" )
    DevPos( Arg3 + 7 + Local1, 12 ) ; DevOut( Replicate("Ì", 56), "N+/W" )
    if (HB_ISARRAY( Arg1 ))
        For Local4:= 1 To Local1

            DevPos( Arg3 + 2 + Local4, 13 ) ; DevOut( padc(Arg1[Local4], 54), Arg11 )
        Next
    else
        DevPos( Arg3 + 3, 13 ) ; DevOut( padc(Arg1, 54), Arg11 )
    endif
    setcursor(0)
    Local4:= procbutton(Local3, 1, Iif(Arg7 < 4, Arg7, 3))
    rstenv(Local2)
    return Local4


function CLRTED(Arg1, Arg2)

    Local Local1
    Local1:= SetColor()
    SetColor( "N/W" )
    Arg1:= Iif(( Arg1 == NIL ), 2, Arg1)
    Arg2:= Iif(( Arg2 == NIL ), 22, Arg2)
    Scroll(Arg1, 0, Arg2, 79)
    SetColor( Local1 )
    return Nil

function MSGBOX1(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7)

Local Local1, Local2, Local3, Local4
LOCAL nTamanhoButton := MaxCol()-61
Arg4     := Iif(( Arg4 == NIL ), "&OK", Arg4)
Arg1     := Iif(( Arg1 == NIL ), "", Arg1)
Arg2     := Iif(( Arg2 == NIL ), "Ateno!", Arg2)
Local1 := Iif(HB_ISARRAY( Arg1 ), Len(Arg1), 1)
Arg3     := Iif(( Arg3 == NIL ), 12 - (Local1 + 5) / 2, Arg3)
Arg5     := Iif(( Arg5 == NIL ), "W+*/R", Arg5)
Arg6     := Iif(( Arg6 == NIL ), "R+*/W", Arg6)
Arg7     := Iif(( Arg7 == NIL ), "N*/W", Arg7)
Local3 := NewButton()
addbutton( Local3, Arg3+ 3 + Local1, 31, nTamanhoButton, Arg4, Nil, .T.)
Local2 := Win( Arg3, 10, Arg3 + 5 + Local1, (MaxCol()-10), Arg2, Arg5, Arg6)
if (HB_ISARRAY( Arg1 ))
    For Local4 := 1 To Local1
        DevPos( Arg3 + 1 + Local4, 12 ) ; DevOut( padc( Arg1[ Local4 ], (MaxCol()-23) ), Arg7 )
    Next
else
    DevPos( Arg3 + 2, 12 ) ; DevOut( padc(Arg1, (MaxCol()-23) ), Arg7 )
endif
setcursor(0)
nButton := ProcButton( Local3, 2, 1)
RsTenv( Local2 )
return( nButton )

function LINBUTTON3(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11)

    Local Local1
    Local1:= newbutton()
    Arg1:= Iif(( Arg1 == NIL ), .T., Arg1)
    Arg2:= Iif(( Arg2 == NIL ), 1, Arg2)
    Arg3:= Iif(( Arg3 == NIL ), 21, Arg3)
    Arg4:= Iif(( Arg4 == NIL ), 1, Arg4)
    Arg5:= Iif(( Arg5 == NIL ), 3, Arg5)
    Arg6:= Iif(( Arg6 == NIL ), "&OK", Arg6)
    Arg8:= Iif(( Arg8 == NIL ), "&Alterar", Arg8)
    Arg10:= Iif(( Arg10 == NIL ), "&Cancelar", Arg10)

    addbutton(Local1, Arg3, 11, 18, Arg6, Arg7, Iif(Arg5 == 1, .T.,     .F.))

    addbutton(Local1, Arg3, 31, 18, Arg8, Arg9, Iif(Arg5 == 2, .T.,     .F.))

    addbutton(Local1, Arg3, 51, 18, Arg10, Arg11, Iif(Arg5 == 3, .T.,     .F.))
    if (Arg1)
        Arg3:= procbutton(Local1, Arg2, Iif(Arg4 < 4, Arg4, 3))
    else
        showbutton(Local1, Arg2)
    endif
    return Arg3

function MSGBOX2(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10)

    Local Local1, Local2, Local3, Local4
    Arg4     := Iif(( Arg4 == NIL ), "&Sim", Arg4)
    Arg5     := Iif(( Arg5 == NIL ), "&No", Arg5)
    Arg6     := Iif(( Arg6 == NIL ), 1, Arg6)
    Arg7     := Iif(( Arg7 == NIL ), 2, Arg7)
    Arg1     := Iif(( Arg1 == NIL ), "", Arg1)
    Arg2     := Iif(( Arg2 == NIL ), "Ateno!", Arg2)
    Local1 := Iif(HB_ISARRAY( Arg1 ), Len(Arg1), 1)
    Arg3     := Iif(( Arg3 == NIL ), 12 - (Local1 + 7) / 2, Arg3)
    Arg8     := Iif(( Arg8 == NIL ), "W+*/R", Arg8)
    Arg9     := Iif(( Arg9 == NIL ), "R+*/W", Arg9)
    Arg10  := Iif(( Arg10 == NIL ), "N*/W", Arg10)
    Local3 := newbutton()
    addbutton(Local3, Arg3 + 3 + Local1, 21, 18, Arg4, Nil, Iif(Arg7 == 1, .T., .F.))
    addbutton(Local3, Arg3 + 3 + Local1, 41, 18, Arg5, Nil, Iif(Arg7 == 2, .T., .F.))
    Local2 := Win( Arg3, 10, Arg3 + 5 + Local1, MaxCol()-10, Arg2, Arg8, Arg9)
    if (HB_ISARRAY( Arg1 ))
        For Local4:= 1 To Local1
            DevPos( Arg3 + 1 + Local4, 13 ) ; DevOut( padc(Arg1[Local4], MaxCol()-25), Arg10 )
        Next
    else
        DevPos( Arg3 + 2, 13 ) ; DevOut( padc(Arg1, MaxCol()-25), Arg10 )
    endif
    setcursor(0)
    nButton := procbutton(Local3, 2, Iif(Arg6 < 3, Arg6, 2))
    rstenv(Local2)
    return( nButton )


function LINBUTTON2(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9)

    Local Local1
    Local1:= newbutton()
    Arg1:= Iif(( Arg1 == NIL ), .T., Arg1)
    Arg2:= Iif(( Arg2 == NIL ), 1, Arg2)
    Arg3:= Iif(( Arg3 == NIL ), 21, Arg3)
    Arg4:= Iif(( Arg4 == NIL ), 1, Arg4)
    Arg5:= Iif(( Arg5 == NIL ), 2, Arg5)
    Arg6:= Iif(( Arg6 == NIL ), "&OK", Arg6)
    Arg8:= Iif(( Arg8 == NIL ), "&Cancelar", Arg8)

    addbutton(Local1, Arg3, 21, 18, Arg6, Arg7, Iif(Arg5 == 1, .T.,     .F.))

    addbutton(Local1, Arg3, 41, 18, Arg8, Arg9, Iif(Arg5 == 2, .T.,     .F.))
    if (Arg1)
        Arg3:= procbutton(Local1, Arg2, Iif(Arg4 < 3, Arg4, 2))
    else
        showbutton(Local1, Arg2)
    endif
    return Arg3


function MSGBOX3(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11)

    Local Local1, Local2, Local3, Local4
    Arg4:= Iif(( Arg4 == NIL ), "&Sim", Arg4)
    Arg5:= Iif(( Arg5 == NIL ), "&No", Arg5)
    Arg6:= Iif(( Arg6 == NIL ), "&Cancelar", Arg6)
    Arg7:= Iif(( Arg7 == NIL ), 1, Arg7)
    Arg8:= Iif(( Arg8 == NIL ), 3, Arg8)
    Arg1:= Iif(( Arg1 == NIL ), "", Arg1)
    Arg2:= Iif(( Arg2 == NIL ), "Ateno!", Arg2)
    Local1:= Iif(HB_ISARRAY( Arg1 ), Len(Arg1), 1)
    Arg3:= Iif(( Arg3 == NIL ), 12 - (Local1 + 7) / 2, Arg3)
    Arg9:= Iif(( Arg9 == NIL ), "W+*/R", Arg9)
    Arg10:= Iif(( Arg10 == NIL ), "R+*/W", Arg10)
    Arg11:= Iif(( Arg11 == NIL ), "N*/W", Arg11)
    Local3:= newbutton()

    addbutton(Local3, Arg3 + 3 + Local1, 13, 18, Arg4, Nil, Iif(Arg8     == 1, .T., .F.))

    addbutton(Local3, Arg3 + 3 + Local1, 31, 18, Arg5, Nil, Iif(Arg8     == 2, .T., .F.))

    addbutton(Local3, Arg3 + 3 + Local1, 49, 18, Arg6, Nil, Iif(Arg8     == 3, .T., .F.))
    Local2:= win(Arg3, 10, Arg3 + 5 + Local1, MaxCol()-10, Arg2, Arg9, Arg10)
    if (HB_ISARRAY( Arg1 ))
        For Local4:= 1 To Local1

            DevPos( Arg3 + 1 + Local4, 13 ) ; DevOut( padc(Arg1[Local4], MaxCol()-25), Arg11 )
        Next
    else
        DevPos( Arg3 + 2, 13 ) ; DevOut( padc(Arg1, 54), Arg11 )
    endif
    setcursor(0)
    nButton := procbutton(Local3, 2, Iif(Arg7 < 3, Arg7, 2))
    rstenv(Local2)
    return( nButton )


function DESKBOX( Arg1, Arg2, Arg3, Arg4, Arg5)

LOCAL Local1 := "N+/W", Local2 := "W+/W"

Arg5        := Iif(( Arg5 == NIL ), 1, Arg5)
if (Arg5 == 2)
    Local1 := "W+/W"
    Local2 := "N+/W"
endif
DispBox( Arg1, Arg2, Arg3, Arg2, "¶¶¶¶¶¶¶¶¶", Local1 )
DispBox( Arg1, Arg4, Arg3, Arg4, "ÇÇÇÇÇÇÇÇÇ", Local2 )
DevPos( Arg1, Arg2 ) ; DevOut( Replicate("Ì", Arg4 - Arg2 + 1), Local1 )
DevPos( Arg3, Arg2 ) ; DevOut( Replicate("Ð", Arg4 - Arg2 + 1), Local2 )
return Nil

function MSGBOX3D(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6)

LOCAL Local1, Local2, Local3
LOCAL nTam     := MaxCol()
Arg1:= Iif(( Arg1 == NIL ), "", Arg1)
Arg2:= Iif(( Arg2 == NIL ), "Aguarde", Arg2)
Local1:= Iif(HB_ISARRAY( Arg1 ), Len(Arg1), 1)
Arg3:= Iif(( Arg3 == NIL ), 12 - (Local1 + 6) / 2, Arg3)
Arg4:= Iif(( Arg4 == NIL ), "W+/N", Arg4)
Arg5:= Iif(( Arg5 == NIL ), "N/W", Arg5)
Arg6:= Iif(( Arg6 == NIL ), "N/W", Arg6)
Local2 := win(Arg3, 16, Arg3 + 6 + Local1, (nTam-16), Arg2, Arg4, Arg5)
DispBox( Arg3 + 2, 17, Arg3 + 5 + Local1, 17, "ÇÇÇÇÇÇÇÇÇ", "W+/W" )
DispBox( Arg3 + 2, (nTam-17), Arg3 + 5 + Local1, (nTam-17), "¶¶¶¶¶¶¶¶¶", "N+/W" )
DevPos( Arg3 + 2, 18 ) ; DevOut( Replicate("Ð", (nTam-35)), "W+/W" )
DevPos( Arg3 + 5 + Local1, 18 ) ; DevOut( Replicate("Ì", (nTam-35)), "N+/W" )
if (HB_ISARRAY( Arg1 ))
    For Local3:= 1 To Local1
        DevPos( Arg3 + 3 + Local3, 19 ) ; DevOut( padc(Arg1[Local3], (nTam-37)), Arg6 )
    Next
else
    DevPos( Arg3 + 4, 19 ) ; DevOut( padc(Arg1, (nTam-37)), Arg6 )
endif
setcursor(0)
return Local2

function MSGBOX(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6)


    Local Local1, Local2, Local3
    Arg1:= Iif(( Arg1 == NIL ), "", Arg1)
    Arg2:= Iif(( Arg2 == NIL ), "Aguarde", Arg2)
    Local1:= Iif(HB_ISARRAY( Arg1 ), Len(Arg1), 1)
    Arg3:= Iif(( Arg3 == NIL ), 12 - (Local1 + 5) / 2, Arg3)
    Arg4:= Iif(( Arg4 == NIL ), "W+*/B", Arg4)
    Arg5:= Iif(( Arg5 == NIL ), "B+*/W", Arg5)
    Arg6:= Iif(( Arg6 == NIL ), "N*/W", Arg6)
    Local2:= win(Arg3, 18, Arg3 + 5 + Local1, 61, Arg2, Arg4, Arg5)
    if (HB_ISARRAY( Arg1 ))
        For Local3:= 1 To Local1
            DevPos( Arg3 + 2 + Local3, 20 ) ; DevOut( padc(Arg1[Local3], 40), Arg6 )
        Next
    else
        DevPos( Arg3 + 3, 20 ) ; DevOut( padc(Arg1, 40), Arg6 )
    endif
    setcursor(0)
    return Local2

function FRAME(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9)

Local Local1 := SetColor(), Local2 := dn := "", Local3:= Arg4 - Arg2 - 1, Local4:= y:= z:= 0
Arg6:= Iif(( Arg6 == NIL ), 1, Arg6)
Arg7:= Iif(( Arg7 == NIL ), 1, Arg7)
Arg8:= Iif(( Arg8 == NIL ), "N/W", Arg8)
Arg9:= Iif(( Arg9 == NIL ), "N/W", Arg9)
if (Arg7 == 1)
    Local2 := "N+/W"
    dn:= "W+/W"
elseif (Arg7 == 2)
    Local2 := "W+/W"
    dn:= "N+/W"
elseif (Arg7 == 3)
    Local2 := dn:= Arg8
endif
DispBox( Arg1 + 1, Arg2, Arg3 - 1, Arg2, Replicate("Ç", 9), Local2 )
DevPos( Arg1, Arg2 ) ; DevOut( "Í" + Replicate("Ä", Local3), Local2 )
DevPos( Arg3, Arg2 ) ; DevOut( "Î", Local2 )
DispBox( Arg1 + 1, Arg4, Arg3 - 1, Arg4, Replicate("¶", 9), dn )
DevPos( Arg3, Arg2 + 1 ) ; DevOut( Replicate("Ä", Local3) + "¼", dn )
DevPos( Arg1, Arg4 ) ; DevOut( "»", dn )
if (Arg5 <> Nil)
    z:= Len(Arg5)
    if (Arg6 == 1)
        DevPos( Arg1, Arg2 + 2 ) ; DevOut( " " + Arg5 + " ", Arg9 )
    elseif (Arg6 == 2)
        DevPos( Arg1, Arg4 - Local3 / 2 - z / 2 - 1 ) ; DevOut( " " + Arg5 + " ", Arg9 )
    elseif (Arg6 == 3)
        DevPos( Arg1, Arg4 - z - 3 ) ; DevOut( " " + Arg5 + " ", Arg9 )
    endif
endif
SetColor( Local1 )
return Nil

function DOWNMENU(Arg1, Arg2, Arg3, Arg4, Arg5)



    Local Local1, Local2, Local3, Local4, Local5, Local6, Local7,     Local8
    Local1:= htk:= 0
    Local2:= setcursor(0)
    Local3:= Len(Arg1)
    Local4:= Arg1[1][10]
    For Local6:= 1 To Local3
        Local4:= Max(Arg1[Local6][10], Local4)
    Next
    For Local6:= 1 To Local3
        Arg1[Local6][10]:= Local4
    Next
    Local7:= Arg3 + Local3 + 1
    Local8:= Arg4 + Arg1[1][10] + 1

    if (procname(1) == "DOWNMENU" .AND. (Arg4 > 45 .OR. Arg4 + Arg5 >     65))
        Arg4:= Arg4 + Arg5
        Local8:= Local8 + Arg5
        Arg4:= Arg4 - Iif(Local8 + 3 > 80, Arg5 + Arg1[1][10] + 2, 0)

        Local8:= Local8 - Iif(Local8 + 3 > 80, Arg5 + Arg1[1][10] + 2,     0)
        Arg3:= Arg3 - Iif(Local7 + 1 > 22, Local7 + 1 - 22, 0)
        Local7:= Local7 - Iif(Local7 + 1 > 22, Local7 + 1 - 22, 0)
        if (Arg4 < 0)
            Arg4:= 77 - (Local8 - Arg4)
            Local8:= Arg4 + Arg1[1][10] + 1
        endif
    elseif (procname(1) == "DOWNMENU")
        Arg4:= Arg4 + Arg5
        Local8:= Local8 + Arg5
        Arg4:= Arg4 - Iif(Local8 + 3 > 80, Local8 + 3 - 80, 0)
        Local8:= Local8 - Iif(Local8 + 3 > 80, Local8 + 3 - 80, 0)
        Arg3:= Arg3 - Iif(Local7 + 1 > 22, Local7 + 1 - 22, 0)
        Local7:= Local7 - Iif(Local7 + 1 > 22, Local7 + 1 - 22, 0)
    else
        Arg4:= Arg4 - Iif(Local8 + 3 > 80, Local8 + 3 - 80, 0)
        Local8:= Local8 - Iif(Local8 + 3 > 80, Local8 + 3 - 80, 0)
        Arg3:= Arg3 - Iif(Local7 + 1 > 22, Local7 + 1 - 22, 0)
        Local7:= Local7 - Iif(Local7 + 1 > 22, Local7 + 1 - 22, 0)
    endif
    Local5:= nbox(Arg3, Arg4, Local7, Local8)
    For Local6:= 1 To Local3
        Arg1[Local6][6]:= Arg3 + Local6
        Arg1[Local6][7]:= Arg4 + 1
        drawdownit(Arg1[Local6], 1)
    Next
    Arg2:= Iif(( Arg2 == NIL ), 1, Arg2)
    while (Arg1[Arg2][9])
        Arg2:= Iif(++Arg2 > Len(Arg1), 1, Arg2)
    EndDo
    while (.T.)
        drawdownit(Arg1[Arg2], 2)
        if (Arg1[Arg2][2] <> Nil .OR. Arg1[Arg2][2] <> "")
            dwnmsg(Arg1[Arg2][2])
        endif
        Local1:= ninkey(0)

        if ((htk:= ascan(Arg1, { |_1| Upper(Chr(Local1)) ==     Upper(_1[5]) })) <> 0)
            drawdownit(Arg1[Arg2], 1)
            Arg2:= htk
            __Keyboard( Chr(13) )
        endif
        Do Case
        Case Local1 == 5
            drawdownit(Arg1[Arg2], 1)
            Arg2:= Iif(--Arg2 == 0, Len(Arg1), Arg2)
            while (Arg1[Arg2][9])
                Arg2:= Iif(--Arg2 == 0, Len(Arg1), Arg2)
            EndDo
        Case Local1 == 24
            drawdownit(Arg1[Arg2], 1)
            Arg2:= Iif(++Arg2 > Len(Arg1), 1, Arg2)
            while (Arg1[Arg2][9])
                Arg2:= Iif(++Arg2 > Len(Arg1), 1, Arg2)
            EndDo
        Case Local1 == 27 .OR. Local1 == 19 .OR. Local1 == 4
            Arg2:= 0
            Exit
        Case Local1 == 13 .AND. Arg1[Arg2][4]
            if (HB_ISARRAY( Arg1[Arg2][3] ))
                flg:= .T.

                downmenu(Arg1[Arg2][3], 1, Arg1[Arg2][6] - 1,     Arg1[Arg2][7], Arg1[Arg2][10])
                if (LastKey() == 19 .OR. LastKey() == 4)
                    Arg2:= 0
                    Exit
                endif
            else
                eval(Arg1[Arg2][3])
            endif
            aeval(Arg1, { |_1| drawdownit(_1, 1) })
        EndCase
    EndDo
    rstenv(Local5)
    setcursor(Local2)
    return Arg2

function AddBarItem(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7)


    Local Local1, Local2, Local3
    Local3:= Len(Arg1)
    Arg2:= Iif(At("&", Arg2) == 0, "&" + Arg2, Arg2)
    Arg4:= Iif(( Arg4 == NIL ), { || nret() }, Arg4)
    Arg5:= Iif(( Arg5 == NIL ), .T., Arg5)
    Arg6:= Iif(( Arg6 == NIL ), 1, Arg6)
    Local1:= SubStr(Arg2, At("&", Arg2) + 1, 1)
    Local2:= Len(Arg2) + 1
    if (Local3 == 0)
        Arg7:= Iif(( Arg7 == NIL ), 1, Arg7)
    else
        Arg7:= Iif(( Arg7 == NIL ), Arg1[Local3][7] + Arg1[Local3][8], Arg7)
    endif
    AAdd(Arg1, {Arg2, Arg3, Arg4, Arg5, Local1, Arg6, Arg7, Local2})
    return Nil


function BARMENU(Arg1, Arg2, Arg3)


    Local Local1:= htk:= 0, Local2:= setcursor(0), Local3:= ink:=     .T., Local4:= .F.
    Arg2:= Iif(( Arg2 == NIL ), 1, Arg2)
    Arg3:= Iif(( Arg3 == NIL ), 1, Arg3)
    aeval(Arg1, { |_1| (_1[6]:= Arg2, drawbarite(_1, 1)) })
    while (.T.)
        drawbarite(Arg1[Arg3], 2)

        if (Local3 .AND. (Arg1[Arg3][2] <> Nil .OR. Arg1[Arg3][2] <>     ""))
            dwnmsg(Arg1[Arg3][2])
        endif
        if (ink)
            Local1:= ninkey(0)
        endif

        if ((htk:= ascan(Arg1, { |_1| Upper(Chr(Local1)) ==     Upper(_1[5]) })) <> 0)
            drawbarite(Arg1[Arg3], 1)
            Arg3:= htk
            __Keyboard( Chr(13) )
        endif
        Do Case
        Case Local1 == 19
            drawbarite(Arg1[Arg3], 1)
            Arg3:= Iif(--Arg3 == 0, Len(Arg1), Arg3)
        Case Local1 == 4
            drawbarite(Arg1[Arg3], 1)
            Arg3:= Iif(++Arg3 > Len(Arg1), 1, Arg3)
        Case Local1 == 27
            Arg3:= 0
            Exit
        Case Local1 == 13 .AND. Arg1[Arg3][4]
            if (HB_ISARRAY( Arg1[Arg3][3] ))

                downmenu(Arg1[Arg3][3], 1, Arg1[Arg3][6] + 1,     Arg1[Arg3][7])
                if (LastKey() == 19 .OR. LastKey() == 4)
                    Local1:= LastKey()
                    Local3:= .F.
                    ink:= .F.
                    Local4:= .T.
                    aeval(Arg1, { |_1| drawbarite(_1, 1) })
                    Loop
                else
                    Local3:= .T.
                    ink:= .T.
                    Local4:= .F.
                endif
            elseif (LastKey() == 13)
                eval(Arg1[Arg3][3])
                Local4:= .F.
            else
                Local3:= .T.
                ink:= .T.
                aeval(Arg1, { |_1| drawbarite(_1, 1) })
                Loop
            endif
            aeval(Arg1, { |_1| drawbarite(_1, 1) })
        EndCase
        if (Local4 .AND. Arg1[Arg3][4])
            Local1:= 13
            Local3:= .F.
            ink:= .F.
        elseif (!Arg1[Arg3][4])
            Local3:= .T.
            ink:= .T.
        endif
    EndDo
    setcursor(Local2)
    return Arg3


function DRAWBARITE(Arg1, Arg2)

    Local Local1, Local2, Local3, Local4
    Local3:= padr(" " + textmenu(Arg1[1]), Arg1[8])
    Local4:= At("&", Arg1[1])
    if (Arg2 == 1)
        Local1:= Iif(Arg1[4], "N*/W", "W*/W")
        Local2:= Iif(Arg1[4], "R+*/W", "N*/W")
    elseif (Arg2 == 2)
        Local1:= Iif(Arg1[4], "W+/N", "W/N")
        Local2:= Iif(Arg1[4], "R+/N", "W+/N")
    endif
    DevPos( Arg1[6], Arg1[7] ) ; DevOut( Local3, Local1 )
    DevPos( Arg1[6], Arg1[7] + Local4 ) ; DevOut( Arg1[5], Local2 )
    return Nil


function TextMenu(Arg1)

    LOCAL local1, local2, local3

    Local1 := At("&", Arg1)
    Local2 := SubStr(Arg1, 1, Local1 - 1)
    Local3 := SubStr(Arg1, Local1 + 1)
    return Iif(Local1 <> 0, Local2 + Local3, Arg1)

function SetBarItem(Arg1, Arg2, Arg3)

    LOCAL local1 := Arg1[Arg2][4]

    if (Arg3 <> Nil)
        Arg1[Arg2][4]:= Arg3
    endif
    return Local1

proc NDWNMENU()


function NEWDOWNMEN()

    return {}

function AddDownIte(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8)

    Local Local1, Local2

    Local2 := Len(Arg1)
    Arg2   := Iif(At("&", Arg2) == 0, "&" + Arg2, Arg2)
    Arg4   := Iif(( Arg4 == NIL ), { || nret() }, Arg4)
    Arg6   := Iif(( Arg6 == NIL ), .T., Arg6)
    Arg8   := Iif(( Arg8 == NIL ), 3, Arg8)
    Local1 := SubStr(Arg2, At("&", Arg2) + 1, 1)

    if (Local2 == 0)
        Arg7:= Iif(( Arg7 == NIL ), 3, Arg7)
        Arg5:= Iif(( Arg5 == NIL ), Len(Arg2) + 4, Arg5)
    else
        Arg7:= Iif(( Arg7 == NIL ), Arg1[Local2][6] + 1, Arg7)
        Arg5:= Iif(( Arg5 == NIL ), Max(Arg1[Local2][10], Len(Arg2) + 4), Arg5)
    endif
    AAdd(Arg1, {Arg2, Arg3, Arg4, Arg6, Local1, Arg7, Arg8, .F., .F., Arg5})
    return Nil


function AddDownSep(Arg1, Arg2)

    LOCAL Local1, Local2, Local3
    Local3 := Len(Arg1)
    Arg2   := Iif(( Arg2 == NIL ), 1, Arg2)
    Local2 := Iif(( Local2 == NIL ), 3, Local2)
    if (Local3 == 0)
        Local1:= Iif(( Local1 == NIL ), 3, Local1)
    else
        Local1:= Iif(( Local1 == NIL ), Arg1[Local3][6] + 1, Local1)
    endif

    AAdd(Arg1, {Nil, Nil, Nil, .T., "", Local1, Local2, .F., .T.,     Arg2})
    return Nil

function DRAWDOWNIT(Arg1, Arg2)


    Local Local1, Local2, Local3, Local4, Local5, Local6
    Local5:= Iif(Arg1[8], "û ", "  ")
    Local6:= Iif(HB_ISARRAY( Arg1[3] ), Chr(16), " ")

    Local3:= Iif(Arg1[9], Replicate("Ä", Arg1[10]), padr(Local5 +     textmenu(Arg1[1]), Arg1[10] - 1) + Local6)
    Local4:= Iif(Arg1[9], 0, At("&", Arg1[1]) + 1)
    if (Arg2 == 1)
        Local1:= Iif(Arg1[4], "N*/W", "W*/W")
        Local2:= Iif(Arg1[4], "R+*/W", "N*/W")
    elseif (Arg2 == 2)
        Local1:= Iif(Arg1[4], "W+/N", "W/N")
        Local2:= Iif(Arg1[4], "R+/N", "W+/N")
    endif
    if (Arg1[9])
        DevPos( Arg1[6], Arg1[7] ) ; DevOut( Local3, Local1 )
    else
        DevPos( Arg1[6], Arg1[7] ) ; DevOut( Local3, Local1 )
        DevPos( Arg1[6], Arg1[7] + Local4 ) ; DevOut( Arg1[5], Local2 )
    endif
    return Nil

function CHKDOWNITE(Arg1, Arg2, Arg3)


    Local Local1
    Local1:= Arg1[Arg2][8]
    if (Arg3 <> Nil)
        Arg1[Arg2][8]:= Arg3
    endif
    return Local1

function SetDownite(Arg1, Arg2, Arg3)

    LOCAL local1 := Arg1[Arg2][4]

    if (Arg3 <> Nil)
        Arg1[Arg2][4] := Arg3
    endif
    return local1

function Help( cProg, nLine, xVar )

    LOCAL cScreen        := SaveScreen()
    LOCAL aArray        := {}
    LOCAL Help_Codigo := 1
    LOCAL cTexto
    LOCAL nHandle

    SetKey( 28, NIL )
    nHandle := Fopen( oAmbiente:xBase + "\HELP.HLP")
    if FLocate( nHandle, "/" + StrZero( Help_Codigo, 4) ) = 0
        cTitulo := FReadLine( nHandle )
        WHILE !HB_Feof( nHandle )
            cTexto := FReadLine( nHandle )
            if Left( cTexto, 1 ) = "/"
                Exit
            else
                Aadd( aArray, cTexto )
            endif
        EndDo
        M_Title( cTitulo )
        FazMenu(05,10, aArray, Cor())
    else
        Alerta("Help nao Disponivel...")
    endif
    FClose( nHandle )
    SetKey( 28, {| p, l, v | Help( p, l, v ) } )
    return(resTela(cScreen))

function Extenso( Numero, Dinheiro, Linhas, Largura )












LOCAL Numero1     := StrZero( Numero, 13, 2 )
PUBLI TipoMoeda := Dinheiro
PRIVA cTexto     := ""
PRIVA aUnidade  := {"UM ","DOIS ","TRES ","QUATRO ","CINCO ","SEIS ","SETE ","OITO ","NOVE " }
PRIVA aDezena     := {"DEZ ","VINTE ","TRINTA ","QUARENTA ", "CINQUENTA ","SESSENTA ","SETENTA ","OITENTA ","NOVENTA " }
PRIVA Ndb         := {"DEZ ","ONZE ","DOZE ","TREZE ","QUATORZE ","QUINZE ","DEZESSEIS ", "DEZESSETE ","DEZOITO ","DEZENOVE " }
PRIVA aCentena  := {"CENTO ","DUZENTOS ","TREZENTOS ","QUATROCENTOS ","QUINHENTOS ","SEISCENTOS ","SETECENTOS ","OITOCENTOS ", "NOVECENTOS " }
PRIVA aMilhar     := {"MILHAO ","MILHOES " }
PRIVA aCentavo  := {"CENTAVO","CENTAVOS"}
PRIVA cMil         :=  "MIL "
PRIVA aMoeda     := {{ "REAL ", "REAIS "}, {"DOLAR ", "DOLARES "}, {"HORA ", "HORAS "}}

if TipoMoeda = 3
    aCentavo  := {"MINUTO","MINUTOS"}
endif
P1 := SubStr( Numero1, 2, 3 )
P2 := SubStr( Numero1, 5, 3 )
P3 := SubStr( Numero1, 8, 3 )
P4 := StrZero(( Numero - Int( Numero ) ) * 100, 3 )

Converte( P1, 1 )
Converte( P2, 2 )

if Val( P2) <> 0 .AND. Val( P3 ) < 100 .AND. Val( P4) = 0
   cTexto += cTexto
endif

Converte( P3, 3 )

if P3 = "000" .AND. VAL( P1 + P2 ) <> 0
    cTexto := cTexto + aMoeda[ TipoMoeda, 2 ]
endif

Converte( P4, 4 )
cTexto := Formata( cTexto, Linhas, Largura)
return cTexto

function Converte( x, Grandeza  )

    if x = "000"
      return cTexto
    endif

    x1 := Left( x, 1 )
    x2 := SubStr( x, 2, 1 )
    x3 := Right( x, 1 )
    X4 := Right( x, 2 )

    if Grandeza = 4
      cTexto += Iif( Val( P1 + P2 + P3 ) <> 0, "E ", "" )
    endif

    if x1 <> "0"
        if x4 = "00" .AND. x1 = "1"
            cTexto += "CEM "
        else
            cTexto +=  aCentena[ Val( x1 ) ]
        endif
    endif

    if x4 >= "10" .AND. x4 <= "19"
        cTexto +=  Iif( x1 <> "0", "E " + Ndb[ Val( x4 ) -9 ] , Ndb[ Val( x4 ) -9 ] )
    endif

    if x2 >= "2"
      if x1 <> "0"
         cTexto += "E " + aDezena[ Val( x2 ) ]
      else
          cTexto += aDezena[ Val( x2 ) ]
      endif
    endif

    if x3 <> "0" .AND. (x4 < "10" .OR. x4 > "19")
        if x1<> "0" .OR. x2 <> "0"
            cTexto += "E " + aUnidade[VAL(x3)]
        else
            cTexto += aUnidade[VAL(x3)]
        endif
    endif

    DO CASE
    CASE grandeza = 1
      cTexto += Iif(VAL(x)=1, aMilhar[1], aMilhar[2])
    CASE grandeza = 2
      cTexto += Iif(VAL(x) > 0, cMil, "" )
    CASE grandeza = 3
      cTexto += Iif(VAL(p1+p2+p3)=1, aMoeda[ TipoMoeda, 1], aMoeda[ TipoMoeda, 2 ])
    CASE grandeza = 4
      cTexto += Iif(VAL(x)=1, aCentavo[1], aCentavo[2])
    CASE grandeza = nil
      cTexto += ""
    ENDCASE
    return( cTexto )

function formata( _Txt, _Lin, _Tam )

    LOCAL qtd_lin := mlcount(_txt, _tam)
    LOCAL _txtaux := ""
    LOCAL linha
    LOCAL _i

    qtd_lin := iif(qtd_lin > _lin, _lin, qtd_lin)
    for _i = 1 TO qtd_lin
        linha = ltrim(rtrim(memoline(_txt,_tam,_i)))
        if _i <> qtd_lin
            while( .T. )
                falta = _tam-Len(linha)
                if falta > 20 .OR. right(linha,1)="."
                    exit
                endif
                if len(linha) < _tam
                    linha = strtran(linha," ",Chr(177))
                    FOR _j = 1 TO falta
                        acha = rat(chr(177),linha)
                        if acha = 0
                            exit
                        endif
                        linha = stuff(linha,acha,1,"  ")
                    next
                    linha = strtran(linha,Chr(177)," ")
                endif
                if Len(ltrim(rtrim(linha)))= _tam
                    exit
                endif
            enddo
        endif
        _txtaux = _txtaux + linha
    next
    _txtaux = left(ltrim(rtrim(_txtaux)) + replicate("*",_tam * _lin),_tam * _lin)
    return (_txtaux)

function CodiOriginal( cNr_Original )

LOCAL Arq_Ant    := Alias()
LOCAL Ind_Ant    := IndexOrd()
LOCAL lRetVal    := .T.


cNr_Original := ltrim(rtrim(cNr_Original))
Lista->(Order( 10 ))
if Lista->(!DbSeek( cNr_Original ))
    ErrorBeep()
    Alerta("Erro: Nao Encontrado.")
    lRetVal := .F.
endif
AreaAnt( Arq_Ant, Ind_Ant )
return( lRetVal )



function Amax( aArray )
    LOCAL nLen     := Len( aArray )
    LOCAL nY      := 1
    LOCAL nMaior := 0
    LOCAL cMaior := ""
    LOCAL nPos     := 0

    FOR nY := 1 To nLen
        xVar := ValType( aArray[nY])
        if xVar = "N"
            if aArray[nY] > nMaior
                nMaior := aArray[nY]
            endif
        endif
    Next
    return( nMaior )




function DelTemp()
    Aeval( Directory( "T0*.*"),   { | aFile | Ferase( aFile[ 1 ] )})
    Aeval( Directory( "T1*.*"),   { | aFile | Ferase( aFile[ 1 ] )})
    Aeval( Directory( "T2*.*"),   { | aFile | Ferase( aFile[ 1 ] )})
    Aeval( Directory( "T0*.TMP"), { | aFile | Ferase( aFile[ 1 ] )})
    return( nil )




function CopyOk( cUnidade )
    LOCAL c1 := 0
    LOCAL lOk
    LOCAL String
    LOCAL Temp
    LOCAL fHandle
    LOCAL xArquivo := "SC" + ltrim(rtrim(Str( c1 ))) + ".PPP"

    fHandle := Fopen( xArquivo, 2 )
    if fHandle = -1
        lOk = .F.
    else
        sTring := Space(8)
        Fread( fHandle, @sTring, 8 )
        lOk = Iif( string == MsDecrypt( STR(c1,8,0)), .T., .F. )
    endif
    FClose( fHandle)
    return( lOk )




function CopyCria()
    LOCAL lOk      := .F.
    LOCAL c1       := 0
    LOCAL String
    LOCAL Temp
    LOCAL fHandle
    LOCAL xArquivo := "SC" + ltrim(rtrim(Str( c1 ))) + ".PPP"

    fHandle := FCreate( xArquivo, 4 )
    if fHandle <> -1
        lOk := Iif( FWrite( fHandle, MsEncrypt( Str( c1, 8, 0 )), 8 ) = 8, .T., .F. )
        FClose( fHandle )
    endif
    return( lOk )




function MSDecToChr( cString )
    LOCAL cNewString := ""
    LOCAL nTam
    LOCAL nX
    LOCAL cNumero

    nTam := GT_StrCount( "#", cString )
    For nX := 1 To nTam
        cNumero := StrExtract( cString, "#", nX+1 )
        cNewString += Chr( Val( cNumero ))
    Next
    return ( cNewString )




function Opcoes( Par1, Par2, Par3)
    LOCAL cScreen := SaveScreen()
    LOCAL nChoice
    LOCAL aMenuArray := { " Calculadora "," Calendario "," Tabela Ascii " }

    SetKey( -9, NIL )
    while(.T.)
        Menu:Limpa()
        StatusInf("ESCOLHA COM SETAS E TECLE ENTER", "ESC-RETORNA")
        M_Title( "OPCOES" )
        nChoice := FazMenu( 03, 60, aMenuArray, Cor())
        if nChoice = 0
            SetKey( -9, {| p, l, v | Opcoes( p, l, v ) } )
            resTela( cScreen )
            Exit
        endif
        oMenu:Limpa()
        Do Case
        Case nChoice = 1
            Calc()
        Case nChoice = 2
            Calendario()
        Case nChoice = 3
            Ascii()
        EndCase
    enddo




function ResTela( cScreen )
    return(RestScreen(,,,,  cScreen ))




















function PrintOn( lFechaSpooler )
    LOCAL nQualPorta := 1
    LOCAL cSaida      := ""

    if lFechaSpooler = NIL
        AbreSpooler()
    endif
    Instru80( @nQualPorta )
    if      nQualPorta = 1
        cSaida := "LPT1"
    elseif nQualPorta = 2
        cSaida := "LPT2"
    elseif nQualPorta = 3
        cSaida := "LPT3"
    elseif nQualPorta = 4
        cSaida := "COM1"
    elseif nQualPorta = 5
        cSaida := "COM2"
    elseif nQualPorta = 6
        cSaida := "COM3"
    endif
    if lFechaSpooler == nil
        oMenu:StatInf()
        oAmbiente:nRegistrosImpressos := 0
    endif
    LETO_SET( 17, "Off" )
    LETO_SET( 20, "PRINTER" )
    if !oAmbiente:Spooler
        if nQualPorta <> 1
            Set( 24, ( cSaida ), .F. )
        endif
    endif
    LETO_SET( 23, "On" )
    FPrint( RESETA )
    SetPrc(0,0)
    return Nil




function PrintOff()
    PrintOn( .T. )
    FPrint( RESETA )
    LETO_SET( 20, "SCREEN" )
    LETO_SET( 23, "Off" )
    LETO_SET( 17, "On" )
    LETO_SET( 24, "" )
    CloseSpooler()
    return Nil




function Instru80( nQualPorta )
    LOCAL cScreen                := SaveScreen()
    LOCAL Arq_Ant                := Alias()
    LOCAL Ind_Ant                := IndexOrd()
    LOCAL nChoice
    LOCAL aNewLpt
    LOCAL i                        := 0
    LOCAL nStatus                := 0
    STATI nPortaDeImpressao := 1
    PUBLI lCancelou            := .F.
    PRIVA aStatus                := {}
    PRIVA aAction                := {}
    PRIVA aComPort             := {}
    PRIVA aMenu

    if len(oAmbiente:aLpt1) == 0
        EscolheImpressoraUsuario(nil, nil, nil)
    endif

    if nQualPorta <> NIL
        nQualPorta := nPortaDeImpressao
        return( .T. )
    endif
    ErrorBeep()
    while(.T.)
        oMenu:Limpa()
        aAction    := { "PRONTA         ","FORA DE LINHA  ","DESLIGADA      ","SEM PAPEL      ", "NAO CONECTADA  "}
        aComPort := { "DISPONIVEL     ","INDISPONIVEL   " }
        aStatus := {}
        alDisp  := { .T., .T., .T., .T., .T., .T., .T., .T., .T., .T., .T., .T. }
        For i := 1 To 3
            nStatus := PrintStat(i)
            if nStatus = 0
                nStatus := Iif(PrintReady(i), 1, 2 )
            else
              if nStatus = -1
                  nStatus = 4
              else
                  nStatus++
                endif
            endif
            Aadd( aStatus, nStatus )
        Next











        aMenu   := {" LPT1 þ " + aAction[ aStatus[1]] + " þ " + oAmbiente:aLpt1[1,2],    " LPT2 þ " + aAction[ aStatus[2]] + " þ " + oAmbiente:aLpt2[1,2],    " LPT3 þ " + aAction[ aStatus[3]] + " þ " + oAmbiente:aLpt3[1,2],    " COM1 þ " + Iif( FT_IsPrint("COM1"), aComPort[1], aComPort[2]) + " þ " + "PORTA SERIAL 1",    " COM2 þ " + Iif( FT_IsPrint("COM2"), aComPort[1], aComPort[2]) + " þ " + "PORTA SERIAL 2",    " COM3 þ " + Iif( FT_IsPrint("COM3"), aComPort[1], aComPort[2]) + " þ " + "PORTA SERIAL 3",    " USB  þ " + aAction[ aStatus[1]] + " þ IMPRESSORA USB",    " VISUALIZAR   þ ",    " EMAIL        þ ",    " WEB BROWSER  þ ",    " SPOOLER      þ ",    " CANCELAR     þ "}
        MaBox( 05, 10, 18, 62, nil, "ENTER=IMPRIMIR³CTRL+ENTER=ESCOLHER³CTRL+PGDN=ONLINE")
        nChoice := aChoice( 06, 11, 17, 61, aMenu, alDisp, "_Instru80" )
        if nChoice = 0 .OR. nChoice = 12
            if Conf("Pergunta: Cancelar Impressao ?")
                lCancelou := .T.
                return( .F. )
            endif
            Loop
        endif
        aNewLpt := aLpt1
        Do Case
            Case nChoice = 1
                aNewLpt := aLpt1
            Case nChoice = 2
                aNewLpt := aLpt2
            Case nChoice = 3
                aNewLpt := aLpt3
            Case nChoice = 7
                aNewLpt := aLpt1
            Case nChoice = 8
                aNewLpt := aLpt1
            Case nChoice = 9
                aNewLpt := aLpt1
            Case nChoice = 11
                aNewLpt := aLpt1
        EndCase
        AreaAnt( Arq_Ant, Ind_Ant )
        SetarVariavel( aNewLpt )
        Do Case
        Case nChoice = 0 .OR. nChoice = 12
            if lCancelou
                lCancelou := .F.
                Loop
            endif
            if Conf("Pergunta: Cancelar Impressao ?")
                return( .F. )
            endif
        Case nChoice = 7
            nPortaDeImpressao := 1
            SaidaParaUsb()
            return( .T. )
        Case nChoice = 8
            nPortaDeImpressao := 1
            return( SaidaParaArquivo())
        Case nChoice = 9
            nPortaDeImpressao := 1
            SaidaParaEmail()
            return( .T. )
        Case nChoice = 10
            nPortaDeImpressao := 1
            SaidaParaHtml()
            return( .T. )
        Case nChoice = 11
            nPortaDeImpressao := 1
            SaidaParaSpooler()
            return( .T. )
        OTherWise
            nPortaDeImpressao   := Iif( nChoice = 0, 1, nChoice )
            oAmbiente:cArquivo  := ""
            oAmbiente:Spooler   := .F.
            oAmbiente:PrintReady := nChoice
            nQualPorta              := nChoice
            if LptOk()
                ResTela( cScreen )
                return( .T. )
            endif
        EndCase
    EndDo
    ResTela( cScreen )




function _Instru80( Mode, nCorrente, nRowPos )

    LOCAL cCodi := Space(02)
    LOCAL cPath := FT_ChDir()

    Do Case
    Case LastKey() = 30
      lCancelou := .T.
      return( 0 )

    Case Mode = 0
        return(2)

    Case Mode = 1 .OR. Mode = 2
        ErrorBeep()
        return(2)

    Case LastKey() = 27
        return(0)

    Case LastKey() = 13
        return(1)

    Case LastKey() = 10


        if UsaArquivo("PRINTER")
            PrinterErrada( @cCodi )
            if nCorrente = 1
                aLpt1 := {}


                Aadd( aLpt1, { Printer->Codi, Printer->Nome, Printer->_Cpi10, Printer->_Cpi12, Printer->Gd, Printer->Pq, Printer->Ng, Printer->Nr,     Printer->Ca, Printer->c18, Printer->LigSub, Printer->DesSub, Printer->_SaltoOff, Printer->_Spaco1_8,     Printer->_Spaco1_6, Printer->Reseta })
                aMenu[1] := " LPT1 þ " + aAction[ aStatus[1]] + " þ " + aLpt1[1,2]
            elseif nCorrente = 2
                aLpt2 := {}


                Aadd( aLpt2, { Printer->Codi, Printer->Nome, Printer->_Cpi10, Printer->_Cpi12, Printer->Gd, Printer->Pq, Printer->Ng, Printer->Nr,     Printer->Ca, Printer->c18, Printer->LigSub, Printer->DesSub, Printer->_SaltoOff, Printer->_Spaco1_8,     Printer->_Spaco1_6, Printer->Reseta })

                aMenu[2] := " LPT2 þ " + aAction[ aStatus[2]] + " þ " + aLpt2[1,2]
            elseif nCorrente = 3
                aLpt3 := {}


                Aadd( aLpt3, { Printer->Codi, Printer->Nome, Printer->_Cpi10, Printer->_Cpi12, Printer->Gd, Printer->Pq, Printer->Ng, Printer->Nr,     Printer->Ca, Printer->c18, Printer->LigSub, Printer->DesSub, Printer->_SaltoOff, Printer->_Spaco1_8,     Printer->_Spaco1_6, Printer->Reseta })
                aMenu[3] := " LPT3 þ " + aAction[ aStatus[3]] + " þ " + aLpt3[1,2]
            endif

            oAmbiente:aLpt1  := aLpt1
            oAmbiente:aLpt2  := aLpt2
            oAmbiente:aLpt3  := aLpt3

            Printer->(DbCloseArea())
            if UsaArquivo("USUARIO")
                if Usuario->(DbSeek( oAmbiente:xUsuario ))
                    if Usuario->(TravaReg())
                        Usuario->Lpt1 := Iif( oAmbiente:aLpt1[1,1] = NIL, "", oAmbiente:aLpt1[1,1])
                        Usuario->Lpt2 := Iif( oAmbiente:aLpt2[1,1] = NIL, "", oAmbiente:aLpt2[1,1])
                        Usuario->Lpt3 := Iif( oAmbiente:aLpt3[1,1] = NIL, "", oAmbiente:aLpt3[1,1])
                        Usuario->(Libera())
                    endif
                endif
                Usuario->(DbCloseArea())
            endif
        endif


        return(2)

    OtherWise
        return(2)

    EndCase




Proc SetarVariavel( aNewLpt )

    LOCAL nPos := 2
    PUBLIC _CPI10      := MsDecToChr( aNewLpt[1,++nPos] )
    PUBLIC _CPI12      := MsDecToChr( aNewLpt[1,++nPos] )
    PUBLIC GD          := MsDecToChr( aNewLpt[1,++nPos] )
    PUBLIC PQ          := MsDecToChr( aNewLpt[1,++nPos] )
    PUBLIC NG          := MsDecToChr( aNewLpt[1,++nPos] )
    PUBLIC NR          := MsDecToChr( aNewLpt[1,++nPos] )
    PUBLIC CA          := MsDecToChr( aNewLpt[1,++nPos] )
    PUBLIC C18          := MsDecToChr( aNewLpt[1,++nPos] )
    PUBLIC LIGSUB      := MsDecToChr( aNewLpt[1,++nPos] )
    PUBLIC DESSUB      := MsDecToChr( aNewLpt[1,++nPos] )
    PUBLIC _SALTOOFF := MsDecToChr( aNewLpt[1,++nPos] )
    PUBLIC _SPACO1_8 := MsDecToChr( aNewLpt[1,++nPos] )
    PUBLIC _SPACO1_6 := MsDecToChr( aNewLpt[1,++nPos] )
    PUBLIC RESETA      := MsDecToChr( aNewLpt[1,++nPos] )
    return

function Impressora()

LOCAL cScreen := SaveScreen()
LOCAL nChoice := 0
LOCAL aMenu   := {}

oMenu:Limpa()
WHILE .T.


    aMenu := { " LPT1 þ " + Iif( aLpt1[1,2] <> NIL, aLpt1[1,2],""), " LPT2 þ " + Iif( aLpt2[1,2] <> NIL, aLpt2[1,2],""), " LPT3 þ " + Iif( aLpt3[1,2] <> NIL, aLpt3[1,2],"")}
    M_Title(" TECLE ENTER PARA ESCOLHER, ESC CANCELAR")
    nChoice := FazMenu( 09, 14, aMenu, Cor())
    if  nChoice = 0
        ResTela( cScreen )
        return
    else
        MudaImpressora( nChoice )
    endif
EndDo

Proc MudaImpressora( nCorrente )

LOCAL cCodi := Space(02)

if UsaArquivo("PRINTER")
    PrinterErrada( @cCodi )
    if nCorrente = 1
        aLpt1 := {}


        Aadd( aLpt1, { Printer->Codi, Printer->Nome, Printer->_Cpi10, Printer->_Cpi12, Printer->Gd, Printer->Pq, Printer->Ng, Printer->Nr,     Printer->Ca, Printer->c18, Printer->LigSub, Printer->DesSub, Printer->_SaltoOff, Printer->_Spaco1_8,     Printer->_Spaco1_6, Printer->Reseta })
    elseif nCorrente = 2
        aLpt2 := {}


        Aadd( aLpt2, { Printer->Codi, Printer->Nome, Printer->_Cpi10, Printer->_Cpi12, Printer->Gd, Printer->Pq, Printer->Ng, Printer->Nr,     Printer->Ca, Printer->c18, Printer->LigSub, Printer->DesSub, Printer->_SaltoOff, Printer->_Spaco1_8,     Printer->_Spaco1_6, Printer->Reseta })

    elseif nCorrente = 3
        aLpt3 := {}


        Aadd( aLpt3, { Printer->Codi, Printer->Nome, Printer->_Cpi10, Printer->_Cpi12, Printer->Gd, Printer->Pq, Printer->Ng, Printer->Nr,     Printer->Ca, Printer->c18, Printer->LigSub, Printer->DesSub, Printer->_SaltoOff, Printer->_Spaco1_8,     Printer->_Spaco1_6, Printer->Reseta })
    endif
    Printer->(DbCloseArea())
    if UsaArquivo("USUARIO")
        if Usuario->(DbSeek( oAmbiente:xUsuario ))
            if Usuario->(TravaReg())
                Usuario->Lpt1 := Iif( aLpt1[1,1] = NIL, "", aLpt1[1,1])
                Usuario->Lpt2 := Iif( aLpt2[1,1] = NIL, "", aLpt2[1,1])
                Usuario->Lpt3 := Iif( aLpt3[1,1] = NIL, "", aLpt3[1,1])
                Usuario->(Libera())
            endif
        endif
        Usuario->(DbCloseArea())
    endif
endif

function Instruim()

    return( Instru80() )

function InstruEt()

LOCAL cScreen := SaveScreen()
LOCAL nChoice
oMenu:Limpa()
ErrorBeep()



nChoice := Alert(" INSTRUO PARA EMISSO DE ETIQUETAS      " +     ";; û Coloque Formulario Etiqueta.        " +     "; û Acerte a Altura do Picote           " +     "; û Resete ou Ligue a Impressora        ", { "Imprimir", "Visualizar", "Cancelar"})
ResTela( cScreen )
if nChoice = 1
    oAmbiente:cArquivo := ""
    oAmbiente:Spooler  := .F.
    return( .T. )
elseif nChoice = 2
    SaidaParaArquivo()
    return( .T. )
else
    return( .F. )
endif

function PrinterErrada( cCodi )

LOCAL aRotina := {{|| CadastroImpressoras() }}
LOCAL Arq_Ant := Alias()
LOCAL Ind_Ant := IndexOrd()
LOCAL lRetVal := .T.

dbSelectArea( "Printer" )
Printer->(Order( 1 ))
if Printer->(!DbSeek( cCodi ))
    Printer->(Order( 2 ))
    Printer->(Escolhe( 00, 00, 24, "Codi + ' ' + Nome", "ID NOME DA IMPRESSORA", aRotina ))
    cCodi := Printer->Codi
endif
AreaAnt( Arq_Ant, Ind_Ant )
return( lRetVal )

function PrinterDbedit()

LOCAL Arq_Ant    := Alias()
LOCAL Ind_Ant    := IndexOrd()
LOCAL cScreen    := SaveScreen()
LOCAL oBrowse    := MsBrowse():New()
LOCAL nField
SetKey( -8, NIL )

if !UsaArquivo("Printer")
    return( nil )
endif

oMenu:Limpa()
dbSelectArea( "Printer" )
Printer->(Order( 1 ))
Printer->(DbGoBottom())

for nField := 1 To Printer->(FCount())
   cName := Printer->(FieldName( nField ))
   oBrowse:Add( cName, cName, NIL, "PRINTER")
next





oBrowse:Titulo   := "CONSULTA/ALTERACAO DE IMPRESSORAS"
oBrowse:PreDoGet := {|| PodeAlterar() }
oBrowse:PreDoDel := {|| PodeExcluir() }
oBrowse:Show()
oBrowse:Processa()
ResTela( cScreen )
return( nil )

Proc CadastroImpressoras()

LOCAL GetList      := {}
LOCAL cScreen      := SaveScreen()
LOCAL cCodi       := Space(02)
LOCAL cNome       := Space(30)
LOCAL c_Cpi10      := Space(30)
LOCAL c_Cpi12      := Space(30)
LOCAL cGd          := Space(30)
LOCAL cPq          := Space(30)
LOCAL cNg          := Space(30)
LOCAL cNr          := Space(30)
LOCAL cCa          := Space(30)
LOCAL cC18          := Space(30)
LOCAL cLigSub      := Space(30)
LOCAL cDesSub      := Space(30)
LOCAL c_SaltoOff := Space(30)
LOCAL c_Spaco1_6 := Space(30)
LOCAL c_Spaco1_8 := Space(30)
LOCAL cReseta      := Space(30)
LOCAL nOpcao
LOCAL nTam
LOCAL nCol
LOCAL nRow

FIELD Codi
FIELD Nome
FIELD Gd
FIELD Pq
FIELD Ng
FIELD Nr
FIELD Ca
FIELD C18
FIELD LigSub
FIELD DesSub
FIELD _SaltoOff
FIELD _Spaco1_6
FIELD _Spaco1_8
FIELD Reseta

if !UsaArquivo("PRINTER")
    return
endif
dbSelectArea( "Printer" )
Printer->(DbGoBottom())
nTam    := Printer->(Len( Codi ))
cCodi := Printer->(StrZero( Val( Codi ) +1, nTam ))
oMenu:Limpa()
MaBox( 05, 10, 22, 60, "INCLUSAO DE IMPRESSORAS" )
nCol := 11
nRow := 06
WHILE .T.
    SetCursor(1) ; DevPos( nRow, nCol ) ; DevOut( "Codigo...........:" ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( cCodi, "cCodi", "99", {|| PrinterCerto( @cCodi )},))
    SetCursor(1) ; DevPos( Row()+1, nCol ) ; DevOut( "Modelo...........:" ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( cNome, "cNome", "@!",,))
    SetCursor(1) ; DevPos( Row()+1, nCol ) ; DevOut( "Ligar 05 CPI.....:" ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( cGd, "cGd", "@!",,))
    SetCursor(1) ; DevPos( Row()+1, nCol ) ; DevOut( "Desl  05 CPI.....:" ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( cCA, "cCA", "@!",,))
    SetCursor(1) ; DevPos( Row()+1, nCol ) ; DevOut( "Ligar 10 CPI.....:" ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( c_Cpi10, "c_Cpi10", "@!",,))
    SetCursor(1) ; DevPos( Row()+1, nCol ) ; DevOut( "Ligar 12 CPI.....:" ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( c_Cpi12, "c_Cpi12", "@!",,))
    SetCursor(1) ; DevPos( Row()+1, nCol ) ; DevOut( "Ligar 15 CPI.....:" ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( cPQ, "cPQ", "@!",,))
    SetCursor(1) ; DevPos( Row()+1, nCol ) ; DevOut( "Desl  15 CPI.....:" ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( cC18, "cC18", "@!",,))
    SetCursor(1) ; DevPos( Row()+1, nCol ) ; DevOut( "Ligar NEGRITO....:" ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( cNG, "cNG", "@!",,))
    SetCursor(1) ; DevPos( Row()+1, nCol ) ; DevOut( "Desl  NEGRITO....:" ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( cNR, "cNR", "@!",,))
    SetCursor(1) ; DevPos( Row()+1, nCol ) ; DevOut( "Ligar SUBLINHADO.:" ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( cLigSub, "cLigSub", "@!",,))
    SetCursor(1) ; DevPos( Row()+1, nCol ) ; DevOut( "Desl  SUBLINHADO.:" ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( cDesSub, "cDesSub", "@!",,))
    SetCursor(1) ; DevPos( Row()+1, nCol ) ; DevOut( "Desl SALTO PAG...:" ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( c_SaltoOff, "c_SaltoOff", "@!",,))
    SetCursor(1) ; DevPos( Row()+1, nCol ) ; DevOut( "Espacamento 1/8..:" ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( c_Spaco1_8, "c_Spaco1_8", "@!",,))
    SetCursor(1) ; DevPos( Row()+1, nCol ) ; DevOut( "Espacamento 1/6..:" ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( c_Spaco1_6, "c_Spaco1_6", "@!",,))
    SetCursor(1) ; DevPos( Row()+1, nCol ) ; DevOut( "RESETAR..........:" ) ; SetCursor(1) ; SetPos( Row(), Col()+1 ) ; AAdd( GetList, _GET_( cReseta, "cReseta", "@!",,))
    ReadModal( GetList, NIL,,,,, ) ; GetList := {} ; ( GetList )
    if LastKey() = 27
        ResTela( cScreen )
        Exit
    endif
    ErrorBeep()
    nOpcao := Alerta(" Pergunta: Voce Deseja ? ", {" Incluir ", " Alterar ", " Sair " })
    if nOpcao = 1
        if PrinterCerto( @cCodi )
            if Printer->(Incluiu())
                Printer->Codi         := cCodi
                Printer->Nome         := cNome
                Printer->_Cpi10     := c_Cpi10
                Printer->_Cpi12     := c_Cpi12
                Printer->Gd          := cGd
                Printer->Pq          := cPq
                Printer->Ng          := cNg
                Printer->Nr          := cNr
                Printer->Ca          := cCa
                Printer->C18         := cC18
                Printer->LigSub     := cLigSub
                Printer->DesSub     := cDesSub
                Printer->_SaltoOff := c_SaltoOff
                Printer->_Spaco1_6 := c_Spaco1_6
                Printer->_Spaco1_8 := c_Spaco1_8
                Printer->Reseta     := cReseta
                cCodi                  := Printer->(StrZero( Val( Codi ) +1, nTam ))
                Printer->(Libera())
            endif
        endif
    elseif nOpcao = 2
        Loop
    elseif nOpcao = 3
        ResTela( cScreen )
        Exit
    endif
END

function PrinterCerto( cCodi )

LOCAL nTam      := Printer->(Len( Codi ))
LOCAL Arq_Ant := Alias()
LOCAL Ind_Ant := IndexOrd()
LOCAL lRetVal := .T.

dbSelectArea( "Printer" )
Printer->(Order( 1 ))
if Printer->(DbSeek( cCodi ))
    ErrorBeep()
    Alerta("Erro: Codigo ja Registrado.")
    cCodi := StrZero( Val( cCodi ) + 1, nTam )
    lRetVal := .F.
endif
AreaAnt( Arq_Ant, Ind_Ant )
return( lRetVal )

function CpfCgcIntToStr( nCpfCgc )

LOCAL cCgc    := ltrim(rtrim(Str( nCpfCgc )))
LOCAL nTam    := Len( cCgc )

if nTam <= 11
    cCpf1 := Left( cCgc, 3 )
    cCpf2 := SubStr( cCgc, 4, 3 )
    cCpf3 := SubStr( cCgc, 7, 3 )
    cCpf4 := SubStr( cCgc, 10, 2 )
    cCgc    := cCpf1 + "." + cCpf2 + "." + cCpf3 + "-" + cCpf4
else
    cCgc1 := Left( cCgc, 2 )
    cCgc2 := SubStr( cCgc, 3, 3 )
    cCgc3 := SubStr( cCgc, 6, 3 )
    cCgc4 := SubStr( cCgc, 9, 4 )
    cCgc5 := SubStr( cCgc, 13, 2 )
    cCgc    := cCgc1 + "." + cCgc2 + "." + cCgc3 + "/" + cCgc4 + "-" + cCgc5
endif
return( cCgc )

function EanDig( cString )

LOCAL nNumero1
LOCAL nNumero2
LOCAL nX
LOCAL nSoma
LOCAL nResto
LOCAL nTotal
LOCAL nDig

nNumero1 := 0
nNumero2 := 0
For nX := 2 To 12 Step 2
    nNumero1 += Val(SubStr( cString, nX, 1 ))
Next
For nX := 1 To 12 Step 2
    nNumero2 += Val(SubStr( cString, nX, 1 ))
Next
nNumero1 *= 3
nNumero2 *= 1
nSoma := nNumero1 + nNumero2

nResto := Mod( nSoma, 10 )
nTotal := nSoma
if nResto <> 0
    nTotal -= nResto
    nTotal += 10
endif
nDig := nTotal - nSoma
return( StrZero( nDig, 1 ))

function R_NTX( ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8 )

LOCAL LOCAL1
LOCAL LOCAL2
LOCAL LOCAL3
LOCAL1 := &( "{ || " + ltrim(rtrim(ARG1)) + " }" )
LOCAL2 := LastRec()
LOCAL3 := R_Opnbar(Iif( ARG3 = Nil, "INDEXING: " + ltrim(rtrim(Alias())), ARG3 ), LTrim(Str(LOCAL2)) + " Registro(s)", ARG5, ARG6, ARG7, ARG8)
if ( LOCAL2 == 0 )
    LOCAL2 := 1
endif
ordCondSet(,,,,,, RecNo(),,,,,,,,,,,,, ) ; ordCreate( (ARG2),, "( R_Updbar(LOCAL3, 100 * RecNo() / LOCAL2), Eval(LOCAL1) )", {|| ( R_Updbar(LOCAL3, 100 * RecNo() / LOCAL2), Eval(LOCAL1) )}, )
R_Clsbar(LOCAL3)
return Nil


function R_CLSBAR( ARG1 )

Local LOCAL1
LOCAL1 := LETO_SET( 20, "SCREEN" )
if ( ValType(ARG1) = "A" )
    RestScreen(ARG1[ 2 ], ARG1[ 3 ], ARG1[ 2 ] + 5, ARG1[ 3 ] + 54, ARG1[ 1 ])
endif
LETO_SET( 20, LOCAL1 )
return Nil


function R_OPNBAR( ARG1, ARG2, ARG3, ARG4, ARG5, ARG6 )

Local LOCAL1, LOCAL2, LOCAL3, LOCAL4, LOCAL5, LOCAL6, LOCAL7, LOCAL8, LOCAL9, LOCAL10, LOCAL11
LOCAL1 := {}
LOCAL3 := LETO_SET( 20, "SCREEN" )
LOCAL9 := "ªßßß­ ½³×ÖßÒßßÇßÑ"
LOCAL10 := ""
For LOCAL11 := 1 To Len(LOCAL9)
    LOCAL10 := LOCAL10 + Chr(255 - Asc(SubStr(LOCAL9, LOCAL11, 1)))
Next
ARG2 := Iif( ARG2 = Nil, "", ARG2 )
ARG3 := Iif( ARG3 = Nil, 10, ARG3 )
ARG4 := Iif( ARG4 = Nil, 13, ARG4 )
ARG5 := Iif( ARG5 = Nil, "W+/B", ARG5 )
ARG6 := Iif( ARG6 = Nil, "GR+/B", ARG6 )
if ( ARG3 > 19 )
    ARG3 := 19
endif
if ( ARG4 > 25 )
    ARG4 := 25
endif
LOCAL5 := ARG3 + 4
LOCAL6 := ARG4 + 53
AAdd(LOCAL1, SaveScreen(ARG3, ARG4, LOCAL5 + 1, LOCAL6 + 1))
LOCAL2 := SetColor(ARG5)
Bar_Shbox(ARG3, ARG4, LOCAL5, LOCAL6)
if ( !Empty(ARG1) )
    if ( Len(ARG1) > LOCAL6 - ARG4 - 3 )
        ARG1 := Left(ARG1, LOCAL6 - ARG4 - 3)
    endif
    DevPos( ARG3, ARG4 + ( LOCAL6 - ARG4 - Len(ARG1) - 1 ) / 2 ) ; DevOut( "þ " + ARG1 + " þ" )
endif
if ( !Empty(ARG2) )
    if ( Len(ARG2) > LOCAL6 - ARG4 - 3 )
        ARG2 := Left(ARG2, LOCAL6 - ARG4 - 3)
    endif
    DevPos( LOCAL5, ARG4 + ( LOCAL6 - ARG4 - Len(ARG2) - 1 ) / 2 ) ; DevOut( "þ " + ARG2 + " þ" )
endif
DevPos( ARG3 + 1, ARG4 + 25 ) ; DevOut( Transform(0, "999%") )
DevPos( ARG3 + 3, ARG4 + 2 ) ; DevOut( "" )
For LOCAL4 := 1 To 9
    DevPos( ARG3 + 3, ARG4 + 1 + LOCAL4 * 5 ) ; DevOut( "" )
Next
DevPos( ARG3 + 3, LOCAL6 - 2 ) ; DevOut( "" )
DevPos( ARG3 + 2, ARG4 + 2 ) ; DevOut( Replicate(".", 50) )
SetColor( LOCAL2 )
AAdd(LOCAL1, ARG3)
AAdd(LOCAL1, ARG4)
AAdd(LOCAL1, Iif( Procname(1) = "R_NTX", -1, 0 ))
AAdd(LOCAL1, ARG5)
AAdd(LOCAL1, ARG6)
Setcursor(0)
LETO_SET( 20, LOCAL3 )
return LOCAL1


function R_PACK( ARG1, ARG2, ARG3, ARG4, ARG5 )

Local LOCAL1, LOCAL2, LOCAL3, LOCAL4, LOCAL5, LOCAL6
LOCAL1 := Alias()
LOCAL2 := Iif( LastRec() < 1, 1, LastRec() )
LOCAL3 := 0
LOCAL4 := LETO_SET( 11, .T. )
LOCAL5 := {}
LOCAL6 := R_Opnbar(Iif( ARG1 = Nil, "PACKING: " + ltrim(rtrim(Alias())), ARG1 ), LTrim(Str(LOCAL2)) + " record(s)", ARG2, ARG3, ARG4, ARG5)
__dbCopyStruct( "RvGTmp", { } )
dbUseArea( .T.,, "RvGTmp",, iif( .F. .OR. .F., ! .F., NIL ), .F. )
dbSelectArea( (LOCAL1) )
dbGoTop()

DBEval({ || ( LOCAL5 := Bar_Getrec(), Rvgtmp->( dbAppend() ), Rvgtmp->( Bar_Putrec(LOCAL5) ) ) }, { || !Deleted() }, { || R_Updbar(LOCAL6, 100 * ( LOCAL3 := LOCAL3 + 0.5 ) / LOCAL2) }, Nil, Nil,     .F.)
__dbZap()
dbSelectArea( "RVGTmp" )
dbGoTop()

DBEval({ || ( LOCAL5 := Bar_Getrec(), dbSelectArea(LOCAL1), dbAppend(), Bar_Putrec(LOCAL5), dbSelectArea("RVGTmp") ) }, Nil, { || R_Updbar(LOCAL6, 100 * ( LOCAL3 := LOCAL3 + 0.5 ) / LOCAL2) },     Nil, Nil, .F.)
dbCloseArea("RVGTmp")
dbSelectArea( (LOCAL1) )
FErase( "RvGTmp.DBF" )
FErase( "RvGTmp.DBT" )
LETO_SET( 11, LOCAL4 )
return R_Clsbar(LOCAL6)


function R_UPDBAR( ARG1, ARG2 )

Local LOCAL1, LOCAL2, LOCAL3
if ( ARG2 > 100 )
    ARG2 := 100
endif
LOCAL3 := Int(ARG2 / 2)
if ( ValType(ARG1) = "A" )
    if ( ARG1[ 4 ] < 0 )
        ARG1[ 4 ] := 0
    elseif ( LOCAL3 > ARG1[ 4 ] )
        LOCAL2 := LETO_SET( 20, "SCREEN" )
        LOCAL1 := SetColor(ARG1[ 5 ])
        DevPos( ARG1[ 2 ] + 1, ARG1[ 3 ] + 25 ) ; DevOut( Transform(ARG2, "999%") )
        SetColor( ARG1[ 6 ] )
        DevPos( ARG1[ 2 ] + 2, ARG1[ 3 ] + 2 ) ; DevOut( Replicate("Û", LOCAL3) )
        ARG1[ 4 ] := LOCAL3
        SetColor( LOCAL1 )
        LETO_SET( 20, LOCAL2 )
    endif
endif
return .T.


Static function BAR_GETREC

Local LOCAL1
LOCAL1 := {}
Aeval(Dbstruct(), { | _1, _2 | AAdd(LOCAL1, Fieldget(_2)) })
return LOCAL1


Static function BAR_PUTREC( ARG1 )

Aeval(Dbstruct(), { | _1, _2 | Fieldput(_2, ARG1[ _2 ]) })
return Nil


Static function BAR_SHBOX( ARG1, ARG2, ARG3, ARG4 )

Local LOCAL1, LOCAL2
Scroll(ARG1, ARG2, ARG3, ARG4)
DispBox(ARG1, ARG2, ARG3, ARG4)
LOCAL1 := SaveScreen(ARG3 + 1, ARG2 + 1, ARG3 + 1, ARG4 + 1)
For LOCAL2 := 2 To Len(LOCAL1) Step 2
    LOCAL1 := Stuff(LOCAL1, LOCAL2, 1, "")
Next
RestScreen(ARG3 + 1, ARG2 + 1, ARG3 + 1, ARG4 + 1, LOCAL1)
LOCAL1 := SaveScreen(ARG1 + 1, ARG4 + 1, ARG3 + 1, ARG4)
For LOCAL2 := 2 To Len(LOCAL1) Step 2
    LOCAL1 := Stuff(LOCAL1, LOCAL2, 1, "")
Next
RestScreen(ARG1 + 1, ARG4 + 1, ARG3 + 1, ARG4, LOCAL1)
return Nil

function NtxProgress

    LOCAL nReg         := Recno()
    LOCAL nUltimo     := LastRec()
    LOCAL nPorcento := ( nReg / nUltimo ) * 100
    LOCAL cComplete := LTrim( Str( Int( nPorcento )))

    if cComplete = "99"
        cComplete := "100"
    endif
    DevPos( 08, 11 ) ; DevOut( "þ " + LTrim(Str(nReg)) + " de " + LTrim(Str(nUltimo )) + " Registros" )
    DevPos( 09, 11 ) ; DevOut( "þ " + cComplete + "%" )
    DevPos( 10, 11 ) ; DevOut( Replicate("Û", nPorcento/2 ), "W+/r" )
    return .T.

function LookUp( cString, aArray )


    LOCAL aDados := {}
    LOCAL nY      := Len( aArray )
    LOCAL nX      := 0

    if DbSeek( cString )
        For nX := 1 To nY
            Aadd( aDados, FieldGet( FieldPos( aArray[ nX ] )))
        Next
    endif
    return( aDados )

function MsDecrypt( Pal )

    LOCAL cChave    := ""
    LOCAL nX         := 0

    For nX := 0 To 10
        cChave += Chr( Asc( Chr( nX )))
    Next
    return( HB_Decrypt( Pal, cChave ))

function MsEncrypt( Pal )

    LOCAL cChave    := ""
    LOCAL nX         := 0

    For nX := 0 To 10
        cChave += Chr( Asc( Chr( nX )))
    Next
    return( HB_Crypt( Pal, cChave ))

function CriaNtx( Col_1, Lin_1, Nome_Field, Nome_Ntx, cTag )

    Ferase( (Nome_Ntx) + ".NTX")
    Ferase( (Nome_Ntx) + ".CDX")
    SetColor("W*+/N")
    Write( Col_1, Lin_1, Chr(10))
    MacroNtx( Nome_Field, Nome_Ntx, cTag )
    SetColor("W+/R")
    Write( Col_1, Lin_1, Chr(251))
    return Nil

function MacroNtx( Nome_Field, Nome_Ntx, cTag )

    LOCAL cScreen := SaveScreen()

    if RddSetDefa() = "DBFNTX"
      MaBox( 07, 10, 11, 61 )
      ordCondSet(,,,, {|| NtxProgress()}, LastRec()/1000, RecNo(),,,,,,,,,,,,, ) ; ordCreate( Nome_Ntx,, Nome_Field, {|| &Nome_Field.}, )
    else
      ordCondSet(,,,, {|| Odometer()}, 10, RecNo(),,,,,,,,,,,,, ) ; ordCreate( ( cTag ), Nome_Ntx, Nome_Field, {|| &Nome_Field.}, )
    endif
    ResTela( cScreen )
    return Nil

function FazMenu( nTopo, nEsquerda, aArray, Cor )

    LOCAL cFrame     := m_Frame()
    LOCAL cFrame2      := SubStr( "ÕÍ¸³¾ÍÔ³", 2, 1 )
    LOCAL nFundo      := ( nTopo + Len( aArray ) + 3 )
    LOCAL nTamTitle  := ( Len( m_Title() ) + 12 )
    LOCAL nDireita   := ( nEsquerda + AmaxStrLen( aArray ) + 1 )
    LOCAL cTitulo    := m_Title()
    LOCAL cChar      :=  "³û³ð³³"
    IF Cor == NIL ; Cor := Cor( 1 ) ; END

    if ( nDireita - nEsquerda ) <  nTamTitle
        nDireita := ( nEsquerda + nTamTitle )
    endif

    if ( nFundo > MaxRow() )
        nFundo := MaxRow()-2
    endif

    MS_Box( nTopo, nEsquerda, nFundo, nDireita, cFrame, Cor )
    Print( nFundo-2, nEsquerda+1, Repl(SubStr( cFrame,2,1),(nDireita-nEsquerda)-1), Cor)
    Print( nFundo-1, nEsquerda+1, cTitulo, Roloc( Cor ), (nDireita-nEsquerda)-1)
    Print( nFundo-1, nDireita-8, cChar, Roloc( Cor ))
    nSetColor( Cor, oAmbiente:CorLightBar, Roloc( Cor ))

    return( nChoice := Achoice( nTopo+1, nEsquerda+1, nFundo-3, nDireita-1, aArray))


function MaBox( nTopo, nEsq, nFundo, nDireita, Cabecalho, Rodape, lInverterCor )

    LOCAL cPattern := " "
    LOCAL pfore     := Cor( 1 )
    LOCAL pback    := Cor( 5 )
    LOCAL cCor     := Cor( 5 )
    LOCAL pUns     := Roloc( pFore )

    hb_default(@nTopo, 0)
    hb_default(@nEsq, 0)
    hb_default(@nFundo,   maxrow())
    hb_default(@nDireita, maxcol())

    if(nDireita > maxcol(), nDireita := maxcol(), nDireita)
    if(nFundo   > maxrow(), nFundo   := maxrow(), nFundo)

    hb_DispBox( nTopo, nEsq, nFundo, nDireita, oAmbiente:Frame + cPattern, pfore )

    if !(( Cabecalho == NIL ))
        aPrint( nTopo, nEsq+1, "Û", cCor, (nDireita-nEsq)-1)
        aPrint( nTopo, nEsq+1, Padc( Cabecalho, ( nDireita-nEsq)-1), cCor )
    endif

    if !(( Rodape == NIL ))
        aPrint( nFundo, nEsq+1, "Û", cCor, (nDireita-nEsq)-1)
        aPrint( nFundo, nEsq+1, Padc( Rodape, ( nDireita-nEsq)-1), cCor )
    endif
    nSetColor( pfore, pback, pUns )
    return NIL


function MS_Box( nRow, nCol, nRow1, nCol1, cFrame, nCor)

    LOCAL nComp  := ( nCol1 - nCol )-1
    IF cFrame == NIL ; cFrame := M_Frame() ; END
    IF nCor == NIL ; nCor := Cor() ; END

    return( Hb_DispBox( nRow, nCol, nRow1, nCol1, cFrame + " ", nCor))




    for x := nRow To nRow1
        Print( x, nCol, Space(1), nCor, nComp+1, " ")
    next

    Print( nRow, nCol, Left(cFrame,1), nCor, 1 )
    Print( nRow, nCol+1, Repl(SubStr(cFrame,2,1),nComp), nCor )
    Print( nRow, nCol1, SubStr(cFrame,3,1), nCor, 1 )

    for x := nRow+1 To nRow1
        Print( x, nCol,  SubStr(cFrame,4,1), nCor, 1 )
        Print( x, nCol1, SubStr(cFrame,8,1), nCor, 1 )
    Next

    Print( nRow1, nCol, SubStr(cFrame,7,1),  nCor, 1 )
    Print( nRow1, nCol+1, Repl(SubStr(cFrame,6,1),nComp), nCor )
    Print( nRow1, nCol1, SubStr(cFrame,5,1), nCor, 1 )
return NIL

function Conf( Texto, aPrompt, cor)
   LOCAL cScreen   := SaveScreen()
    LOCAL Les         := 19
    LOCAL Exceto     := .F.
    LOCAL Ativo      :=  1
    LOCAL aArray     := { " Sim ", " Nao " }
    LOCAL cFundo     := 207
    LOCAL cFrente     := 192
    LOCAL Largjan     := Len( Texto ) + 2
    LOCAL cFrame    := oAmbiente:Frame
    LOCAL nRetVal
    LOCAL PBack
    LOCAL nLen
    LOCAL Ces
    LOCAL Com
    LOCAL Coluna
    LOCAL nRow
    LOCAL nCol
    LOCAL nComp
    LOCAL nChoice
    LOCAL Centralizar := .F.
    LOCAL lPrompt     := .T.

    __DefaultNIL(@cor, oAmbiente:CorMsg)
    if aPrompt == nil .OR. !(HB_ISARRAY( aPrompt ))
       aPrompt := aArray
    endif
    nRetval := AlertaPy(Texto + ";-;;", cor, centralizar, lPrompt, aPrompt)
    restela(cScreen)
    return( nRetVal == 1 )

    if aPrompt == NIL
        if oAmbiente:Visual
            return(( nButton := MsgBox2( Texto ) == 1 ))
            ResTela( cScreen )
        endif
    endif

    LargJan := Iif( LargJan < 16, 16, LargJan )
    Les      := Iif( Les = Nil .OR. Les = 0, 19, Les )
    Ces      := (MaxCol()-LargJan)/2
    Com      := Ces + LargJan
    Coluna  := (LargJan - 9 ) / 2
    nRow      := Les + 2
    nCol      := Ces + Coluna
    nBot      := Les + 3
    nComp   := ( Com - Ces )-1

    M_Title( Texto )
    if aPrompt <> NIL
        nLen := Len( aPrompt )

        MSFrame( Les-nLen, Ces, Les+3, Com, oAmbiente:CorMsg )
        nChoice := aChoice( (Les-nLen)+3, Ces+4, Les+5, Com-3, aPrompt )
        ResTela( cScreen )
        return( nChoice )
    endif

    MsFrame( Les-2, Ces, Les+3, Com, oAmbiente:CorMsg )
    nRetVal := aChoice( Les+1, Ces+4, Les+5, Com-3, aArray )
    ResTela( cScreen )
    return( nRetVal == 1 )

function MsFrame( nTopo, nEsquerda, nFundo, nDireita, Cor )

    LOCAL cFrame2    := SubStr( oAmbiente:Frame, 2, 1 )
    LOCAL pFore     := Iif( Cor = NIL, Cor(), Cor )
    LOCAL cPattern := " "
    LOCAL pBack

    ColorSet( @pfore, @pback )
    MS_Box( nTopo, nEsquerda, nFundo, nDireita, oAmbiente:Frame + cPattern, pFore  )
    cSetColor( SetColor())
    nSetColor( pFore, Roloc( pFore ))
    DevPos( nTopo+2, nEsquerda+1 ) ; DevOut( Repl( cFrame2, (nDireita - nEsquerda )-1 ) )
    DispBox( nTopo+3, nEsquerda+2, nFundo-1, nEsquerda+2, 1 )
    DevPos( nTopo+1, nEsquerda+1 ) ; DevOut( Padc( M_Title(), nDireita-nEsquerda-1) )
    DispBox( nTopo+3, nDireita-2, nFundo-1, nDireita-2, 1 )
return( NIL )

function IntToStrRepl( nValor, nTam )

    LOCAL cStr := StrTran( StrTran( Tran( nValor, "9999999999999.99" ), ".")," ", "0")
    return( Right( cStr, nTam ))

Proc LigaTela()

    LETO_SET( 17, "On" )
    LETO_SET( 20, "SCREEN" )
    return

Proc DesLigaTela()

    LETO_SET( 17, "Off" )
    LETO_SET( 20, "PRINTER" )
    return

function AchaSegunda( dDate )

    if cDow( dDate ) = "Monday"
        return( dDate + 7 )
    endif
    For i = 1 To 7
         if cDow( dDate + i ) = "Monday"
             return( dDate + i )
         endif
    Next
    return dDate

function TempNew( cDeleteFile)

    LOCAL xTemp := FTempName("T*.TMP")
    LOCAL cTela := Mensagem("Aguarde, Criando Arquivo Temporario.")

    Ferase("*.TMP")
    WHILE !File( (xTemp) )
        xTemp := FTempName("T*.TMP")
    EndDo
    ResTela( cTela )
    return( (xTemp) )

function RetPerc( nDivisor, nDividendo )

    LOCAL nDivi  := nDivisor / nDividendo
    LOCAL nMult  := nDivi * 100
    LOCAL Result := ( nMult - 100 )

    if Result == -100
        Result := 100
    endif
    return( Result )


function RD( ARG1 )

    Local LOCAL1, LOCAL2
    static1 := 1
    LOCAL1 := Seconds()
    while ( ARG1 > LOCAL1 )
        LOCAL1 := LOCAL1 * 100 + Seconds()
    EndDo
    STATIC1 := ( STATIC1 + LOCAL1 ) / ( LOCAL2 := STATIC1 * LOCAL1 % ARG1 + 1 )
    return Int(LOCAL2)




Procedure SHUFFLE

    Local LOCAL1, LOCAL2, LOCAL3, LOCAL4, LOCAL5, LOCAL6, LOCAL7, LOCAL8, LOCAL9, LOCAL10, LOCAL11, LOCAL12, LOCAL13, LOCAL14, LOCAL15
    LOCAL1 := 5 * Rd(5) - 1
    LOCAL2 := 10 * Rd(8) - 1
    LOCAL3 := LOCAL1 - 4
    LOCAL4 := LOCAL2 - 9
    LOCAL5 := 0
    LOCAL9 := Setcursor(0)
    LOCAL10 := Row()
    LOCAL11 := Col()
    LOCAL12 := SaveScreen()
    LOCAL15 := SetColor("W/N")
    Scroll(LOCAL3, LOCAL4, LOCAL1, LOCAL2)
    while ( InKey(0.05) == 0 )
        LOCAL13 := {}
        LOCAL14 := 0
        if ( LOCAL1 < 24 .AND. LOCAL5  <>  3 )
            AAdd(LOCAL13, 1)
            LOCAL14++
        endif
        if ( LOCAL4 > 0 .AND. LOCAL5    <>  4 )
            AAdd(LOCAL13, 2)
            LOCAL14++
        endif
        if ( LOCAL3 > 0 .AND. LOCAL5    <>  1 )
            AAdd(LOCAL13, 3)
            LOCAL14++
        endif
        if ( LOCAL2 < 79 .AND. LOCAL5  <>  2 )
            AAdd(LOCAL13, 4)
            LOCAL14++
        endif
        LOCAL5 := LOCAL13[ Rd(LOCAL14) ]
        LOCAL7 := LOCAL8 := 0
        Do Case
        Case LOCAL5 == 1
            LOCAL1 := LOCAL1 + 5
            LOCAL7 := 1
        Case LOCAL5 == 2
            LOCAL4 := LOCAL4 - 10
            LOCAL8 := -2
        Case LOCAL5 == 3
            LOCAL3 := LOCAL3 - 5
            LOCAL7 := -1
        Case LOCAL5 == 4
            LOCAL2 := LOCAL2 + 10
            LOCAL8 := 2
        EndCase
        For LOCAL6 := 1 To 5
            Scroll(LOCAL3, LOCAL4, LOCAL1, LOCAL2, LOCAL7, LOCAL8)
            if ( InKey(0.05)    <>  0 )
                Exit
            endif
        Next
        if ( LOCAL6 <= 5 )
            Exit
        endif
        Do Case
        Case LOCAL5 == 1
            LOCAL3 := LOCAL3 + 5
        Case LOCAL5 == 2
            LOCAL2 := LOCAL2 - 10
        Case LOCAL5 == 3
            LOCAL1 := LOCAL1 - 5
        Case LOCAL5 == 4
            LOCAL4 := LOCAL4 + 10
        EndCase
    EndDo
    SetColor( LOCAL15 )
    RestScreen(Nil, Nil, Nil, Nil, LOCAL12)
    SetPos(LOCAL10, LOCAL11)
    Setcursor(LOCAL9)
    return


Proc ScrollEsq()

    LOCAL i

    for i := 1 To 13


    next
    return



Proc ScrollDir()

    LOCAL i

    for i := 1 To 13


    next
    return



Proc CenturyOn()

    __SetCentury( "On" )
    return

Proc CenturyOff()

    __SetCentury( "Off" )
    return

function FTempMemory()

    LOCAL cFile := ""
    LOCAL nNumber
    LOCAL cNumber
    LOCAL snRandom := Seconds() / Exp(1)
   LOCAL nLimit   := 65535

    snRandom := Log( snRandom + Sqrt(2) ) * Exp(3)
   snRandom := Val( Str(snRandom - Int(snRandom), 17, 15 ) )
    nNumber  := HB_RandomInt(snRandom, 999999)
    cNumber  := StrZero(nNumber, 7)
    cFile    := "MEM" + cNumber
    return cFile


function FTempRandomName( xCoringa, cDir )

    LOCAL cFile  := ""
    LOCAL cExt
    LOCAL nNumber
    LOCAL cNumber
    LOCAL snRandom := Seconds() / Exp(1)
   LOCAL nLimit   := 65535

    hb_default(@xCoringa, "T*.TMP")
    cExt     := "." + GetFileExtension(xCoringa)
    snRandom := Log( snRandom + Sqrt(2) ) * Exp(3)
   snRandom := Val( Str(snRandom - Int(snRandom), 17, 15 ) )
    nNumber  := HB_RandomInt(snRandom, 999999)
    cNumber  := StrZero(nNumber,7)
    cFile    := "T" + cNumber + cExt
    return cFile


function FTempName( xCoringa, cDir )

    LOCAL cTempFile := ""
    LOCAL nConta    := 0
    LOCAL cTela     := Mensagem("Aguarde, Criando Arquivo Temporario.")

    cDir := ms_swap_tmp()
    hb_default(@xCoringa, "T*.TMP")


    cTempFile := cDir + FTempRandomName()
    While !file(cTempFile) .AND. nConta <= 100
        cTempFile := cDir + FTempRandomName()
        nConta++
    EndDo
    restela(cTela)
    return( cTempFile )


function HB_TempName()

   LOCAL nFileHandle
   LOCAL cFileName

   nFileHandle := HB_FTempCreate( ,,, @cFileName )

   if nFileHandle > 0
     FClose( nFileHandle )
   endif
   return cFileName

function MS_TempName( xCoringa, cDir )




    LOCAL nPos     := Rat(".", xCoringa)
    LOCAL nLen     := Len(xCoringa)
    IF cDir == NIL ; cDir := oAmbiente:xBaseTmp ; END
            xCoringa := ltrim(rtrim(xCoringa))
            xCoringa := SubStr(xCoringa, nPos, 4)

    return(Upper(TempFile(cDir, xcoringa)))

function nTrim( nVal)

    return( ltrim(rtrim(ValToStr(nVal))))


function xt_Random( nLimit )

   STATIC snRandom := Nil
   LOCAL nDecimals
    LOCAL cLimit

   IF snRandom == NIL ; snRandom := Seconds() / Exp(1) ; END
   IF nLimit == NIL ; nLimit := 65535 ; END
   snRandom  := Log( snRandom + Sqrt(2) ) * Exp(3)
   snRandom  := Val( Str(snRandom - Int(snRandom), 17, 15 ) )

   nDecimals := At(".", cLimit)
   if nDecimals > 0
      nDecimals := Len(cLimit)-nDecimals
   endif
   return Round( nLimit * snRandom, nDecimals )

Proc Sx_Filter( xStrTop, xStrBottom )

    OrdScope( 0 )
    OrdScope( 1 )
    OrdScope( 0, xStrTop )
    OrdScope( 1, xStrBottom )
    return

Proc Sx_DbSetFilter( xStrTop, xStrBottom )

    OrdScope( 0 )
    OrdScope( 1 )
    OrdScope( 0, xStrTop )
    OrdScope( 1, xStrBottom )
    return

Proc Sx_DbClearFilter()

    OrdScope( 0 )
    OrdScope( 1 )
    DbGoTop()
    return

function Sx_Count()

    if !Eof()
        return( 1 )
    endif
    return( 0)

function ArrPrinter()
    LOCAL hESCP    := oAmbiente:hESCP
    LOCAL aPrinter := {}
    LOCAL nTam
    LOCAL nX

    Aadd( aPrinter, {"12","FUJITSU DL-700","#27#80","#27#77","#14","#15","#27#69","#27#70","#20","#18","#27#45#49","#27#45#48","#27#79","#27#48","#27#50","#27#64#27#70", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"13","SAMSUNG EE-809","#27#18","#27#58","#14","#15","#27#69","#27#70","#20","#18","#27#45#49","#27#45#48","#27#79","#27#48","#27#50","#27#64#27#70", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"14","PROLOGICA P720 XT","#27#18","#27#58","#14","#15","#27#120#49","#27#120#48","#20","#18","#27#45#49","#27#45#48","#27#79","#27#48","#27#50","#27#64#27#70", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"27","DATAMAX","#27#40#115#49#48#72","#27#40#115#49#50#72","#27#40#115#51#66#27#40#115#54#72","#27#40#115#49#55#72","#27#40#115#51#66","#27#40#115#48#66","#27#40#115#49#48#72","#27#40#115#49#48#72","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"28","ARGOX","#27#40#115#49#48#72","#27#40#115#49#50#72","#27#40#115#51#66#27#40#115#54#72","#27#40#115#49#55#72","#27#40#115#51#66","#27#40#115#48#66","#27#40#115#49#48#72","#27#40#115#49#48#72","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"01","EPSON FX-1170","#27#18","#27#58","#14","#15","#27#69","#27#70","#20","#18","#27#45#49","#27#45#48","#27#79","#27#48","#27#50","#27#64#27#70#27#85#49#27#52", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"02","EPSON FX-1050","#27#80","#27#77","#14","#15","#27#69","#27#70","#20","#18","#27#45#49","#27#45#48","#27#79","#27#48","#27#50","#27#64#27#70#27#85#49#27#52", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"03","EPSON LQ-1070","#27#80","#27#77","#14","#15","#27#69","#27#70","#20","#18","#27#45#49","#27#45#48","#27#79","#27#48","#27#50","#27#64#27#70#27#85#49#27#52", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"04","EPSON LQ-570","#27#80","#27#77","#14","#15","#27#69","#27#70","#20","#18","#27#45#49","#27#45#48","#27#79","#27#48","#27#50","#27#64#27#70#27#85#49#27#52", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"05","EPSON LX-810","#27#80","#27#77","#14","#15","#27#69","#27#70","#20","#18","#27#45#49","#27#45#48","#27#79","#27#48","#27#50","#27#64#27#70#27#85#49#27#52", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"06","EPSON LX-300","#27#80","#27#77","#14","#15","#27#69","#27#70","#20","#18","#27#45#49","#27#45#48","#27#79","#27#48","#27#50","#27#64#27#70#27#85#49#27#52", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"34","EPSON LX-300+","#27#80","#27#77","#14","#15","#27#69","#27#70","#20","#18","#27#45#49","#27#45#48","#27#79","#27#48","#27#50","#27#64#27#70#27#85#49#27#52", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"20","EPSON FX-2170","#27#80","#27#77","#14","#15","#27#69","#27#70","#20","#18","#27#45#49","#27#45#48","#27#79","#27#48","#27#50","#27#64#27#70#27#85#49#27#52", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"21","EPSON LQ-2170","#27#80","#27#77","#14","#15","#27#69","#27#70","#20","#18","#27#45#49","#27#45#48","#27#79","#27#48","#27#50","#27#64#27#70#27#85#49#27#52", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"07","RIMA XT-180","#30#49","#30#50","#14","#15","#27#69","#27#70","#20","#18","#27#45#49","#27#45#48","#27#79","#27#48","#27#50","#27#64#27#70", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"08","CITYZEN GSX-190","#27#80","#27#77","#14","#15","#27#69","#27#70","#20","#18","#27#45#49","#27#45#48","#27#79","#27#48","#27#50","#27#64#27#70", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"09","SEIKOSHA","#27#80","#27#77","#14","#15","#27#69","#27#70","#20","#18","#27#45#49","#27#45#48","#27#79","#27#48","#27#50","#27#64#27#70", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"10","HP DESKJET 500",  "#27#40#115#49#48#72","#27#40#115#49#50#72","#27#40#115#51#66#27#40#115#54#72","#27#40#115#49#55#72","#27#40#115#51#66","#27#40#115#48#66","#27#40#115#49#48#72","#27#40#115#49#48#72","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"11","HP DESKJET 520",  "#27#40#115#49#48#72","#27#40#115#49#50#72","#27#40#115#51#66#27#40#115#54#72","#27#40#115#49#55#72","#27#40#115#51#66","#27#40#115#48#66","#27#40#115#49#48#72","#27#40#115#49#48#72","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"15","HP DESKJET 600",  "#27#40#115#49#48#72","#27#40#115#49#50#72","#27#40#115#51#66#27#40#115#54#72","#27#40#115#49#55#72","#27#40#115#51#66","#27#40#115#48#66","#27#40#115#49#48#72","#27#40#115#49#48#72","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"40","HP DESKJET 656C", "#27#40#115#49#48#72","#27#40#115#49#50#72","#27#40#115#51#66#27#40#115#54#72","#27#40#115#49#55#72","#27#40#115#51#66","#27#40#115#48#66","#27#40#115#49#48#72","#27#40#115#49#48#72","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"16","HP DESKJET 660",  "#27#40#115#49#48#72","#27#40#115#49#50#72","#27#40#115#51#66#27#40#115#54#72","#27#40#115#49#55#72","#27#40#115#51#66","#27#40#115#48#66","#27#40#115#49#48#72","#27#40#115#49#48#72","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"17","HP DESKJET 680",  "#27#40#115#49#48#72","#27#40#115#49#50#72","#27#40#115#51#66#27#40#115#54#72","#27#40#115#49#55#72","#27#40#115#51#66","#27#40#115#48#66","#27#40#115#49#48#72","#27#40#115#49#48#72","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"18","HP DESKJET 692",  "#27#40#115#49#48#72","#27#40#115#49#50#72","#27#40#115#51#66#27#40#115#54#72","#27#40#115#49#55#72","#27#40#115#51#66","#27#40#115#48#66","#27#40#115#49#48#72","#27#40#115#49#48#72","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"19","HP DESKJET 693",  "#27#40#115#49#48#72","#27#40#115#49#50#72","#27#40#115#51#66#27#40#115#54#72","#27#40#115#49#55#72","#27#40#115#51#66","#27#40#115#48#66","#27#40#115#49#48#72","#27#40#115#49#48#72","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"24","HP DESKJET 670",  "#27#40#115#49#48#72","#27#40#115#49#50#72","#27#40#115#51#66#27#40#115#54#72","#27#40#115#49#55#72","#27#40#115#51#66","#27#40#115#48#66","#27#40#115#49#48#72","#27#40#115#49#48#72","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"25","HP DESKJET 695",  "#27#40#115#49#48#72","#27#40#115#49#50#72","#27#40#115#51#66#27#40#115#54#72","#27#40#115#49#55#72","#27#40#115#51#66","#27#40#115#48#66","#27#40#115#49#48#72","#27#40#115#49#48#72","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"26","HP DESKJET 610",  "#27#40#115#49#48#72","#27#40#115#49#50#72","#27#40#115#51#66#27#40#115#54#72","#27#40#115#49#55#72","#27#40#115#51#66","#27#40#115#48#66","#27#40#115#49#48#72","#27#40#115#49#48#72","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"29","HP DESKJET 640",  "#27#40#115#49#48#72","#27#40#115#49#50#72","#27#40#115#51#66#27#40#115#54#72","#27#40#115#49#55#72","#27#40#115#51#66","#27#40#115#48#66","#27#40#115#49#48#72","#27#40#115#49#48#72","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"30","HP DESKJET 710",  "#27#40#115#49#48#72","#27#40#115#49#50#72","#27#40#115#51#66#27#40#115#54#72","#27#40#115#49#55#72","#27#40#115#51#66","#27#40#115#48#66","#27#40#115#49#48#72","#27#40#115#49#48#72","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"31","HP DESKJET 740",  "#27#40#115#49#48#72","#27#40#115#49#50#72","#27#40#115#51#66#27#40#115#54#72","#27#40#115#49#55#72","#27#40#115#51#66","#27#40#115#48#66","#27#40#115#49#48#72","#27#40#115#49#48#72","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"32","HP DESKJET 950",  "#27#40#115#49#48#72","#27#40#115#49#50#72","#27#40#115#51#66#27#40#115#54#72","#27#40#115#49#55#72","#27#40#115#51#66","#27#40#115#48#66","#27#40#115#49#48#72","#27#40#115#49#48#72","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"33","HP DESKJET 970",  "#27#40#115#49#48#72","#27#40#115#49#50#72","#27#40#115#51#66#27#40#115#54#72","#27#40#115#49#55#72","#27#40#115#51#66","#27#40#115#48#66","#27#40#115#49#48#72","#27#40#115#49#48#72","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"35","HP DESKJET 840",  "#27#40#115#49#48#72","#27#40#115#49#50#72","#27#40#115#51#66#27#40#115#54#72","#27#40#115#49#55#72","#27#40#115#51#66","#27#40#115#48#66","#27#40#115#49#48#72","#27#40#115#49#48#72","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"38","HP DESKJET 3420", "#27#40#115#49#48#72","#27#40#115#49#50#72","#27#40#115#51#66#27#40#115#54#72","#27#40#115#49#55#72","#27#40#115#51#66","#27#40#115#48#66","#27#40#115#49#48#72","#27#40#115#49#48#72","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"39","HP DESKJET 3820", "#27#40#115#49#48#72","#27#40#115#49#50#72","#27#40#115#51#66#27#40#115#54#72","#27#40#115#49#55#72","#27#40#115#51#66","#27#40#115#48#66","#27#40#115#49#48#72","#27#40#115#49#48#72","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"36","HP LASERJET 1100","#27#38#107#48#83",   "#27#38#107#52#83",   "#27#40#115#51#66#27#40#115#54#72","#27#38#107#50#83","#27#40#115#51#66","#27#40#115#48#66","#27#38#107#48#83","#27#38#107#48#83","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"22","HP LASERJET 5L",  "#27#38#107#48#83",   "#27#38#107#52#83",   "#27#40#115#51#66#27#40#115#54#72","#27#38#107#50#83","#27#40#115#51#66","#27#40#115#48#66","#27#38#107#48#83","#27#38#107#48#83","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"23","HP LASERJET 6L",  "#27#38#107#48#83",   "#27#40#115#112#72",  "#27#40#115#51#66#27#40#115#54#72","#27#38#107#50#83","#27#40#115#51#66","#27#40#115#48#66","#27#38#107#48#83","#27#38#107#48#83","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"37","HP LASERJET 4L",  "#27#38#107#48#83",   "#27#38#107#52#83",   "#27#40#115#51#66#27#40#115#54#72","#27#38#107#50#83","#27#40#115#51#66","#27#40#115#48#66","#27#38#107#48#83","#27#38#107#48#83","#27#38#100#49#68","#27#38#100#64","#27#38#108#48#76","#27#38#108#54#67","#27#38#108#56#67","#27#69", "#27#52", "#27#53", Date()})
    Aadd( aPrinter, {"38"," ARQUIVO",        "#255","#255","#255","#255","#255","#255","#255","#255","#255","#255","#255","#255","#255","#255","#27#52", "#27#53", Date()})
    nTam := Len( aPrinter )
    if Printer->(TravaArq())
      for nX := 1 To nTam
          Printer->(DbAppend())
          for nField := 1 To Printer->(FCount())
              Printer->(FieldPut( nField, aPrinter[nX,nField]))
          next
      next
      Printer->(Libera())
    endif
    return


function lAnoBissexto( dData )
    LOCAL nAno := Year( dData )
    return( nAno % 4 == 0 .AND. nAno % 100 <> 0)


function DaysInAMonth(dIni, nMes, lString)

    LOCAL aDias := {31,28,31,30,31,30,31,31,30,31,30,31}
    LOCAL Result

    hb_default(@dIni, Date())
    hb_default(@nMes, Month(dIni))
    hb_default(@lString, .F.)

    Result := aDias[nMes]
    if (nMes = 2) .AND. IsLeapYear(dIni)
        Result := 29
    endif
    return(if(lString == .T. , strzero(result,2), result))

function NomeMesesDoAno(dIni, nMes, lAbreviado, lUpper)

    LOCAL aStringMes := {"Janeiro","Fevereiro","Marco","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"}
    LOCAL Result

    hb_default(@dIni, Date())
    hb_default(@nMes, Month(dIni))
    hb_default(@lAbreviado, .F.)
    hb_default(@lUpper, .F.)

    Result := aStringMes[nMes]
    return(if(lUpper, upper(if(lAbreviado, Left(Result,3), Result)), Result))

function LastDayOfMonth(dIni, nMes, lString)

    return(DaysInAMonth(dIni, nMes, lString))

function StringToData(cString)

    hb_default(@cString, Dtoc(Date()))
    return(cTod(cString))

function DataToString(dData)

    hb_default(@dData, Date())
    return(Dtoc(dData))

function FirstDayOfMonth(dIni, nMes, lString)

    LOCAL Result
    hb_default(@dIni, Date())
    hb_default(@nMes, Month(dIni))
    Result := 1
    return(if(lString == .T. , strzero(result, 2), result))

function NextMonth(dIni)

    hb_default(@dIni, Date())
    return(month(dIni + 1))

function IsLeapYear(dData)

    LOCAL nAno := Year( dData )
    return( nAno % 4 == 0 .AND. nAno % 100 <> 0)

function DayOfWeek(dIni)

    hb_default(@dIni, Date())
    return(Day(dIni))

function Grafico( aArray, MostraVal, Titulo1, Titulo2, Titulo3, nBase )

LOCAL Porc     := 0
LOCAL aNumero  := {}



LOCAL CorBarra := { "W/N",  "G/W",  "BG/W", "R/W", "GR/W", "B/W", "RB/W", "W/N", "BG+/W", "G/W", "GR+/W", "B+/W", "W/N",  "G/W",  "BG/W", "R/W", "GR/W", "B/W", "RB/W", "W/N", "BG+/W", "G/W", "GR+/W", "B+/W" }



LOCAL CorLetra := { "N/W",  "N/G",  "N/BG", "N/R", "N/GR", "N/B", "N/RB", "N/W", "N/BG+", "N/G+", "N/GR+", "N/B+", "N/W",  "N/G",  "N/BG", "N/R", "N/GR", "N/B", "N/RB", "N/W", "N/BG+", "N/G+", "N/GR+", "N/B+" }

LOCAL Tam      := Len(aArray)
LOCAL aChr     := Array(Tam)
LOCAL nMaxRow  := MaxRow()
LOCAL nMaxCol  := MaxCol()
LOCAL Larg     := Round((nMaxCol*.75)/Tam,0)
LOCAL T        := 0
LOCAL Escala   := 0
LOCAL Porc1    := 0
LOCAL Num      := 0
LOCAL Num1     := 0
LOCAL Num2     := 0
LOCAL xY

nBase       := Iif( nBase = Nil, 1, nBase )
MostraVal  := Iif( MostraVal = NIL, .F., .T. )
Afill(aChr, Chr(219))
Porc       := aMax( aArray[1])

For xY     := 1 To Tam
    Aadd( aNumero, aArray[ xY, 1 ])
next

Porc   := aMax( aNumero )
Escala := Porc / 10
Porc1  := Porc
Num    := 0
Num1   := 0
Num2   := 0

MaBox(01, 00, nMaxRow-1, nMaxCol, Titulo1 + " - " + Titulo2)
oMenu:StatSup()
oMenu:StatInf()

For nX := 2 To (nMaxRow-4)
   Write( nX, 6, Chr(179))
next

For nY := 2 To (nMaxRow-3) Step 4
   Write( nY, 01, Tran(Int(Porc/nBase), "999999") + Repl(Chr(196),nMaxCol-10))
    Porc -= Escala
next

Write( nX, 6, Chr(192) + Repl(Chr(196),nMaxCol-8))
t := (6-Larg)
For nN := 1 To Tam
   Write(nMaxRow-2, T + Larg + 1, Left( aArray[ nN, 2 ], Larg ) )
   Pos := Int( aArray[nN,1] * (nMaxRow-5) / Porc1 )
   Bar := ( nMaxRow-4 - Pos ) + 1
   For j := nMaxRow-4 To Bar Step -1
      DevPos( j, t + Larg+1 ) ; DevOut( Repl(aChr[nN],Larg), CorBarra[nN] )
    next
    if MostraVal
      DevPos( Bar, t + Larg + ( Larg / 2 )-3 ) ; DevOut( Tran(Int( aArray[ nN, 1 ]/nBase), "99999999"), CorLetra[nN] )
    endif
   t += ( Larg + 1 )
next











function Tecla_ESC()

    LOCAL cScreen := SaveScreen()

    if Inkey() == 27
        ErrorBeep()
        return(Conf("Pergunta: Deseja cancelar?"))
    endif
    return(.F.)

function RJust( cString, nTam, cChar)

    LOCAL nLenStr  := Len(cString)
    LOCAL cStrTrim := ltrim(rtrim(cString))
    LOCAL nLenTrim := Len(cStrTrim)
    LOCAL cRetChar

    if( cChar = NIL, cChar := Space(1), cChar )
    if( nTam  = NIL, nTam  := (nLenStr-nLenTrim), nTam := (nTam-nLenTrim))
    cRetChar := Replicate(cChar, nTam) + cStrTrim
    return( cRetChar )

function LJust( cString, nTam, cChar)

    LOCAL nLenStr  := Len(cString)
    LOCAL cStrTrim := ltrim(rtrim(cString))
    LOCAL nLenTrim := Len(cStrTrim)
    LOCAL cRetChar

    if( cChar = NIL, cChar := Space(1), cChar )
    if( nTam  = NIL, nTam  := (nLenStr-nLenTrim), nTam := (nTam-nLenTrim))
    cRetChar := cStrTrim + Replicate(cChar, nTam)
    return( cRetChar )

function FBof( nHandle )

   return FTell( nHandle) == 0

function FBot( nHandle )

   LOCAL nPos := FSeek( nHandle, 0, 2 )
   return nPos    <> -2

function FTop( nHandle )

   LOCAL nPos := FSeek( nHandle, 0, 0 )
   return nPos    <> -2

function MS_FReadStr( nH, cB, nMaxLine )
    LOCAL cLine
    LOCAL nSavePos
    LOCAL nEol
    LOCAL nNumRead


    if( nMaxLine = NIL, nMaxLine := 512, nMaxLine)
    cLine := space( nMaxLine )
    cB    := ""
    nSavePos := FSEEK( nH, 0, 1 )
    nNumRead := FREAD( nH, @cLine, nMaxLine )
    if ( nEol := AT( HB_OSNEWLINE(), substr( cLine, 1, nNumRead ) ) ) == 0
    cB := cLine
    else
    cB := SUBSTR( cLine, 1, nEol - 1 )
    FSEEK( nH, nSavePos + nEol + 1, 0 )
    endif
    FSEEK( nH, nSavePos, 0 )

    return(cB)

function FReadLine( nH, nMaxLine )

   LOCAL nSavePos
    LOCAL nNumRead
    LOCAL cBuffer
    LOCAL nEol
    LOCAL cB


    nMaxLine := if( nMaxLine = NIL, 512, nMaxLine)
    cBuffer  := Space(nMaxLine)
   nSavePos := FSEEK( nH, 0, 1 )
   nNumRead := FREAD( nH, @cBuffer, nMaxLine )
    if ( nEol := AT( HB_OSNEWLINE(), substr( cBuffer, 1, nNumRead ))) == 0
      cB := cBuffer
   else
      cB := SUBSTR( cBuffer, 1, nEol - 1 )
      FSEEK( nH, nSavePos + nEol + 1, 0 )
   endif
    FSEEK( nH, nSavePos, 0 )
   return cB

function FReadByte( nH )

    LOCAL nSavePos, nNumRead, cBuffer := Space(1)

   nSavePos := FSEEK( nH, 0, 1 )
   nNumRead := FREAD( nH, @cBuffer, 1 )
    FSEEK( nH, nSavePos, 0 )
   return cBuffer























function FAdvance(nH)

    LOCAL nSavePos
    LOCAL nNumRead
    LOCAL cBuffer
    LOCAL nEol
    LOCAL nPos
    LOCAL nMaxLine

    nMaxLine := if( nMaxLine = NIL, 512, nMaxLine)
    cBuffer  := Space(nMaxLine)
   nSavePos := FSEEK( nH, 0, 1 )
   nNumRead := FREAD( nH, @cBuffer, nMaxLine )
    if ( nEol := AT( HB_OSNEWLINE(), substr( cBuffer, 1, nNumRead ))) == 0
      nPos := nSavePos
   else
       nPos := nSavePos + nEol + 1
    endif
    return( FSEEK( nH, nPos, 0))

function FLocate( nHandle, cStr, lFlag )

   LOCAL nPos    := FSeek( nHandle, 0, 1 )
   LOCAL nNewPos := -2
   LOCAL j       := FLen( nHandle ) - nPos
   LOCAL cText   := Space( j )

   FRead( nHandle , @cText , j )
   if HB_IsLogical( lFlag ) .AND. lFlag
      j := hb_AtI( cStr, cText )
   else
      j := hb_At( cStr, cText )
   endif
   if j > 0
      nNewPos := nPos + j - 1
      FSeek( nHandle, nNewPos, 0 )
   endif
   return nNewPos

function FLen( nHandle )

   LOCAL nPos := FSeek( nHandle, 0, 1 )
   LOCAL nLen := FSeek( nHandle, 0, 2 )
   FSeek( nHandle, nPos, 0 )
   return nLen

function FTell( nHandle )

   return FSeek(nHandle, 0, 1)

function FWriteLine( nH, cBuffer)

    LOCAL nSavePos
    LOCAL nNumRead


   nSavePos := FSEEK( nH, 0, 1 )
   FBot(nH)
    nNumRead := FWRITE( nH, cBuffer + HB_OSNEWLINE())
    FSEEK( nH, nSavePos, 0 )
   return nNumRead <> 0

function Untrim( cString, nTam)

    LOCAL nLenStr  := Len(cString)
    LOCAL cChar    := Space(1)
    LOCAL cRetChar

    if( nTam  = NIL, nTam := nLenStr, nTam)
    cRetChar := cString + Replicate(cChar, nTam)
    return( Left(cRetChar,nTam))

function FCurdir()

    LOCAL cRetChar

    cRetChar := CurDrive() + ":\" + Curdir()
    return(cRetChar)

function aMaxStrLen( xArray )

    LOCAL nTam    := Len(xArray)
    LOCAL nLen    := 0
    LOCAL nMaxLen := 0
    LOCAL x

    For x := 1 To nTam
        nLen := Len(xArray[x])
        if nMaxLen < nLen
            nMaxLen := nLen
        endif
    Next
    return( nMaxLen )

function aPrintLen( xArray )

    return( Len( xArray))

function StrSwap( string, cChar, nPos, cSwap)




    LOCAL nConta := GT_StrCount( cChar, string ), aPos, nX,    nLen

    if nConta > 0
      aPos := aStrPos(string, cChar)
        nLen := Len(aPos)
        if nLen >= 0
           if nPos <= nLen
              string := Stuff(string, aPos[nPos], Len(cChar), cSwap)
           endif
        endif
    endif
return( string)

function aStrPos(string, delims)

    LOCAL nConta  := GT_StrCount(delims, string)
    LOCAL nLen    := Len(delims)
    LOCAL cChar   := Repl("%",nLen)
    LOCAL aNum    := {}
    LOCAL x

    if cChar == delims
        cChar := Repl("*",delims)
    endif

    if nConta = 0
        return(aNum)
    endif

    FOR x := 1 To nConta
        nPos   := At( Delims, string )
        string := Stuff(string, nPos, 1, cChar)
        Aadd( aNum, nPos)
    Next
    Aadd( aNum, Len(string)+1)
    return(aNum)

function StrExtract( string, delims, ocurrence )

    LOCAL nInicio := 1
    LOCAL nConta  := GT_StrCount(delims, string)
    LOCAL aArray  := {}
    LOCAL aNum    := {}
    LOCAL nLen    := Len(delims)
    LOCAL cChar   := Repl("%",nLen)
    LOCAL cNewStr := String
    LOCAL nPosIni := 1
    LOCAL aPos
    LOCAL nFim
    LOCAL x
    LOCAL nPos

    if cChar == delims
        cChar := Repl("*",nLen)
    endif

    if nConta = 0 .AND. ocurrence > 0
      return(string)
    endif




























    aPos   := aStrPos(string, Delims)
    nConta := Len(aPos)
    For x := 1 to nConta
        nInicio  := aPos[x]
        if x = 1
            cString   := Left(String, nInicio-1)
        else
            nFim     := aPos[x-1]
            cString  := SubStr(String, nFim+1, nInicio-nFim-1)
        endif
        Aadd( aArray, cString)
    Next

    nConta := Len(aArray)
    if ocurrence > nConta .OR. oCurrence = 0
        return(string)
    endif
    return(aArray[ocurrence])



function StrSplit( string, delims)
    LOCAL nInicio := 1
    LOCAL nConta  := GT_StrCount(delims, string)
    LOCAL aArray  := {}
    LOCAL aNum    := {}
    LOCAL nLen    := Len(delims)
    LOCAL cChar   := Repl("%",nLen)
    LOCAL cNewStr := String
    LOCAL nPosIni := 1
    LOCAL aPos
    LOCAL nFim
    LOCAL x
    LOCAL nPos

    if cChar == delims
        cChar := Repl("*",nLen)
    endif

    if nConta = 0
        return { string }
    endif

    aPos   := aStrPos(string, Delims)
    nConta := Len(aPos)
    For x := 1 to nConta
        nInicio  := aPos[x]
        if x = 1
            cString   := Left(String, nInicio-1)
        else
            nFim     := aPos[x-1]
            cString  := SubStr(String, nFim+1, nInicio-nFim-1)
        endif
        Aadd( aArray, cString)
    Next
    return(aArray)




function M_Message( cString, cCor)
    LOCAL nMaxRow := MaxRow()
    LOCAL nMaxCol := MaxCol()
    LOCAL nLen    := Len(cString)
    LOCAL row     := ((nMaxRow/2)-5)
    LOCAL Col     := ((nMaxCol-nLen)/2)

    MS_Box(row, col, row+4, col+ nLen+6, M_Frame(), cCor)
    Print(row+2, col+3, cString, cCor)
    return(NIL)




function FTruncate()
    return NIL




function Shr
    return nil

function achartest
    return nil

function M_Prompt
    return NIL

function Write( Linha, Col, xString, nCor)

    LOCAL Color_Ant := SetCOlor()

    Linha   := Iif( Linha    = NIL, Row(),    Linha   )
    Col      := Iif( Col        = NIL, Col(),    Col      )
    xString := Iif( xString = NIL, "",     xString )

    if nCor = nil
        SetColor(ColorIntToStr(Color_Ant))
        DevPos( Linha, Col ) ; Qqout( xString )
    else
        Print( Linha, Col, xString, nCor )
    endif
    SetColor( Color_Ant)
    return( nil )

function Print( row, col, string, attrib, length, cChar)

    LOCAL Color_Ant := SetColor()
    LOCAL nLen      := Len(string)
    IF attrib == NIL ; attrib := oMenu:CorMenu ; END
    IF length == NIL ; length := nLen ; END
    IF cChar == NIL ; cChar := Space(1) ; END

    if length > nLen
        string += Repl(cChar,length-nlen)
        nLen   := length
    endif
    SetColor(ColorIntToStr(attrib))
    DevPos(row, col) ; DevOut(Left(string,nLen))

    SetColor( Color_Ant)
    return NIL

function printf(string, attrib)
    LOCAL Color_Ant := SetColor()
    LOCAL row       := row()
    LOCAL col       := col()
    IF attrib == NIL ; attrib := oMenu:CorMenu ; END

    SetColor(ColorIntToStr(attrib))
    DevPos(row, col) ; DevOut(string)

    SetColor( Color_Ant)
    return NIL




function aPrint( row, col, string, attrib, length)
    LOCAL Color_Ant := SetColor()
    LOCAL nLen      := Len(string)

    hb_default(@attrib, ColorStrToInt(SetColor()))
    hb_default(@length, nLen)

    if length > nLen
        string += Repl(Space(1),length-nlen)
        nLen   := length
    endif

    dispbegin()
    SetColor(ColorIntToStr(attrib))
    DevPos(row, col) ; DevOut(Left(string,nLen))
    SetColor( Color_Ant)
    dispend()
    return NIL




function Roloc(nColor)
    LOCAL cColor  := ColorIntToStr(nColor)
    LOCAL inverse := FT_InvClr( cColor)

    return(nColor := ColorStrToInt(inverse))




function ColorIntToStr(xColor)
    LOCAL cColor

    return(cColor := FT_n2Color(xColor))




function ColorStrToInt(xColor)
    LOCAL nColor

    return( nColor := FT_Color2n(xColor))




function Cls( CorFundo, PanoFundo, lforcar )
    LOCAL nDelay     := 0
    LOCAL row        := 0
    LOCAL col        := 0
    LOCAL row1       := MaxRow()
    LOCAL col1       := MaxCol()
    LOCAL nComp      := ( col1 - col )
    LOCAL nLen       := Len( Panofundo)
    LOCAL cString    := ""
    LOCAL xString    := ""
    LOCAL nConta     := 0
    LOCAL y          := 0
    LOCAL x          := 0
    STATI cScreen    := NIL
    STATI xPanoFundo := ""
    STATI xCorFundo  := NIL
    IF CorFundo == NIL ; CorFundo := oAmbiente:CorFundo ; END
    IF PanoFundo == NIL ; PanoFundo := oAmbiente:PanoFundo ; END






    Ms_Cls(CorFundo, PanoFundo, nDelay)



    return NIL


    if lforcar = nil
        if !(xPanoFundo == PanoFundo ) .OR. !(xCorFundo == CorFundo )
            cScreen := NIL
        endif
    else
        cScreen := NIL
    endif

    if cScreen == NIL





        nConta = row1 * col1
        for x := 1 TO nConta STEP nlen


            cString += PanoFundo
        next
        y := 0
        for x := 1 to nConta STEP col1
            xString := SubStr( cString, x, col1)
            Print( y++, 0, xString, corfundo, col1, xString)
        next
        xPanoFundo := PanoFundo
        xCorFundo  := CorFundo
        cScreen    := SaveScreen()
    endif

    return( restela( cScreen ))




function ColorStandard(nStd)

    STATI nStandard
    LOCAL nSwap := nStandard

    if (( nStd == NIL ))
      return nStandard
   else
      nStandard := nStd
   endif
   return nSwap

function ColorEnhanced(nEnh)

    STATI nEnhanced
    LOCAL nSwap := nEnhanced

    if (( nEnh == NIL ))
      return nEnhanced
   else
      nEnhanced := nEnh
   endif
   return nSwap

function ColorUnselected(nUns)

STATI nUnselected
LOCAL nSwap := nUnselected

    if (( nUns == NIL ))
      return nUnselected
   else
      nUnselected := nUns
   endif
   return nSwap

function nSetColor(std, enh, uns)




    LOCAL cStd,     cEnh,     cUns,     cColor

    cStd     := attrtoa(std)
    cEnh     := attrtoa(enh)
    cUns     := attrtoa(uns)


    ColorStandard(std)
    ColorEnhanced(enh)
    ColorUnselected(uns)
    cColor := cStd + "," + cEnh + ",,," + cUns




    Setcolor( cColor )
    return COlorStrToInt(cColor)

function cSetColor(ColorStr)



LOCAL nStd,     nEnh,     nUns

nStd := atoattr( strextract( ColorStr, ",", 1))
nEnh := atoattr( strextract( ColorStr, ",", 2))
nUns := atoattr( strextract( ColorStr, ",", 4))




ColorStandard(nStd)
ColorEnhanced(nEnh)
Colorunselected(nUns)


SetColor( ColorStr )

return ColorIntToStr(ColorStrToInt(ColorStr))


function atoattr(cColor)

return (ColorStrToInt(cColor))



function attrtoa(nColor)

return (ColorIntToStr(nColor))



function MS_QuadroCorInt()

LOCAL x := 10
LOCAL y := 10
LOCAL a

MS_Box(09,12,29,70)
For a := 1 to 256


        if y >= 64
           y := 10
            x++
        endif
        y += 4
        Print( x, y, StrZero(HB_ColorToN(hb_NToColor(a)),3), a,)
Next
return NIL

function MS_QuadroCorStr()

LOCAL x := 10
LOCAL y := 10
LOCAL a

MS_Box(09,15,28,135)
For a := 1 to 256


        if y >= 128
           y := 10
            x++
        endif
        y += 8
        Print( x, y, hb_NToColor(a), a,)
Next
return NIL









function ShellRun( cComando )

LOCAL intWindowStyle := 0
LOCAL WshShell
LOCAL lRet
LOCAL oExec



















   WshShell := win_oleCreateObject("WScript.Shell")


lRet     := WshShell:Run("%comspec% /c " + cComando, intWindowStyle, .F.)
WshShell := NIL
return Iif( lRet = 0, .T., .F.)



function ShellExec( cComando )
    LOCAL intWindowStyle := 0
    LOCAL WshShell
    LOCAL lRet
    LOCAL oExec



















        WshShell := win_oleCreateObject("WScript.Shell")



    oExec    := WshShell:Exec(cComando)
    lRet     := oExec:Status
    WshShell := NIL
    return Iif( lRet = 0, .T., .F.)




function M_View( row, col, row1, col1, cFile, nCor )
    MaBox(row, col, row1, col1)
    FT_DFSetup(cFile, row+1, col+1, row1-1, col1-1, 1, nCor, Roloc(nCor),"EeQqXx", .T., 5, MaxCol()+80, 8196)
    cKey := FT_DispFile()
    FT_DFClose()
    return NIL




function MX_PopFile( row, col, row1, col1, xCoringa, nColor)
    LOCAL aFileList  := {}
    LOCAL nChoice








    Aeval( Directory( xCoringa ), {|aDirectory|    Aadd( aFileList,    Upper(PADR( aDirectory[1], 15 )) +     if( SUBSTR( aDirectory[5], 1,1) == "D", "   <DIR>",     TRAN(       aDirectory[2], "99,999,999 B"))  + "  " +     DTOC(       aDirectory[3])       + "  " +     SUBSTR(     aDirectory[4], 1, 5) + "  " +     SUBSTR(     aDirectory[5], 1, 4) + "  " )})
    if (nChoice := FazMenu(row, col, aFileList, nColor)) = 0
        return ""
    endif
    return( ltrim(rtrim(left(aFileList[nChoice],15))))




function MS_Version()
   LOCAL k

    QOut( "Harbour verso:                    " , hb_Version( 0 ) )
    QOut( "Compilador usado:                  " , hb_Version( 1 ) )
   QOut( "Harbour build date:                " , hb_Version( 11 ) )
   QOut( "Major version number:              " , hb_Version( 2 ) )
   QOut( "Minor version number:              " , hb_Version( 3 ) )
   QOut( "Revision number:                   " , hb_Version( 4 ) )
   QOut( "Build status:                      " , hb_Version( 5 ) )
    QOut( "PCode:                             " , hb_Version( 10 ) )
    QOut( "Compilado em:                      " , hb_Version( 11 ) )
    QOut( "Ambiente:                          " , hb_Version( 21 ) )
    QOut( "Cpu:                               " , hb_Version( 24 ) )
    QOut( "-------------------------------------------------------------------" )







   return
































































































































































































































































































































































































































































































































































































































function Toggle_Acento()
    if oAmbiente:Acento
        Desliga_Acento()
    else
        Liga_Acento()
    endif




function Liga_Acento()
    SetKey( 39, {| p, l, v | Act_Geral( p, l, v ) } )
    SetKey( 94, {| p, l, v | Act_Geral( p, l, v ) } )
    SetKey( 34, {| p, l, v | Act_Geral( p, l, v ) } )
    SetKey( 91, {| p, l, v | Act_Geral( p, l, v ) } )
    SetKey( 123, {| p, l, v | Act_Geral( p, l, v ) } )
    SetKey( 96, {| p, l, v | Act_Geral( p, l, v ) } )
    SetKey( 126, {| p, l, v | Act_Geral( p, l, v ) } )
    SetKey( 95, {| p, l, v | Act_Geral( p, l, v ) } )
    oAmbiente:Acento := .T.
    return .T.




function Desliga_Acento()
    SetKey( 39, NIL )
    SetKey( 94, NIL )
    SetKey( 34, NIL )
    SetKey( 91, NIL )
    SetKey( 123, NIL )
    SetKey( 96, NIL )
    SetKey( 126, NIL )
    SetKey( 95, NIL )
    oAmbiente:Acento := .F.
    return .F.




function Act_Geral()
    LOCAL COD_ACENTO := Chr( LastKey())






    LOCAL VAR_CNF_AC := "'a 'e'i¡'o¢'u£'A'E'I'O'U'c'C" +  "`a`e`i`o`u`A`E`I`O©`U`c`C" +  "^a^e^o^A^E^O^c^C"                  +  "~a~n¤~o~A~N¥~O~c~C"                  +  "u U"                                +  "_a¦_A¦_o§_O§"                                  +  " {"

    if COD_ACENTO $ "[{"
        COD_ACENTO += " "
    else
        COD_ACENTO += chr( abs( inkey( 0 ) ) )
    endif
    COD_ACENTO = at( COD_ACENTO, VAR_CNF_AC )
    if COD_ACENTO <> 0
        __Keyboard( substr( VAR_CNF_AC, COD_ACENTO + 2, 1 ) )
    else
        ErrorBeep()
        __Keyboard( lastkey() )
    endif
    oAmbiente:Acento := .T.

